<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>未闻丶死讯的博客</title>
  
  <subtitle>欢迎你来到异次元（中二）</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liuhuaqiang.top/"/>
  <updated>2020-05-20T01:32:21.142Z</updated>
  <id>https://liuhuaqiang.top/</id>
  
  <author>
    <name>anlen123</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>1371.每个元音包含偶数次的最长子字符串</title>
    <link href="https://liuhuaqiang.top/2020/05/20/1371-mei-ge-yuan-yin-bao-han-ou-shu-ci-de-zui-chang-zi-zi-fu-chuan/"/>
    <id>https://liuhuaqiang.top/2020/05/20/1371-mei-ge-yuan-yin-bao-han-ou-shu-ci-de-zui-chang-zi-zi-fu-chuan/</id>
    <published>2020-05-20T01:27:41.000Z</published>
    <updated>2020-05-20T01:32:21.142Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1371-每个元音包含偶数次的最长子字符串"><a href="#1371-每个元音包含偶数次的最长子字符串" class="headerlink" title="1371. 每个元音包含偶数次的最长子字符串"></a><a href="https://leetcode-cn.com/problems/find-the-longest-substring-containing-vowels-in-even-counts/" target="_blank" rel="noopener">1371. 每个元音包含偶数次的最长子字符串</a></h4><pre class=" language-bash"><code class="language-bash">给你一个字符串 s ，请你返回满足以下条件的最长子字符串的长度：每个元音字母，即 <span class="token string">'a'</span>，<span class="token string">'e'</span>，<span class="token string">'i'</span>，<span class="token string">'o'</span>，<span class="token string">'u'</span> ，在子字符串中都恰好出现了偶数次。示例 1：输入：s <span class="token operator">=</span> <span class="token string">"eleetminicoworoep"</span>输出：13解释：最长子字符串是 <span class="token string">"leetminicowor"</span> ，它包含 e，i，o 各 2 个，以及 0 个 a，u 。示例 2：输入：s <span class="token operator">=</span> <span class="token string">"leetcodeisgreat"</span>输出：5解释：最长子字符串是 <span class="token string">"leetc"</span> ，其中包含 2 个 e 。示例 3：输入：s <span class="token operator">=</span> <span class="token string">"bcbcbc"</span>输出：6解释：这个示例中，字符串 <span class="token string">"bcbcbc"</span> 本身就是最长的，因为所有的元音 a，e，i，o，u 都出现了 0 次。来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/find-the-longest-substring-containing-vowels-in-even-counts著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><p><img src="https://i.imgur.com/mIWool9.png" alt></p><p><img src="https://i.imgur.com/D8TXcM8.png" alt></p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">findTheLongestSubstring</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vis</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'u'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">==</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">{</span>                vis<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span>i<span class="token operator">-</span>vis<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1371-每个元音包含偶数次的最长子字符串&quot;&gt;&lt;a href=&quot;#1371-每个元音包含偶数次的最长子字符串&quot; class=&quot;headerlink&quot; title=&quot;1371. 每个元音包含偶数次的最长子字符串&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetc
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
      <category term="hard" scheme="https://liuhuaqiang.top/tags/hard/"/>
    
  </entry>
  
  <entry>
    <title>Docker 学习</title>
    <link href="https://liuhuaqiang.top/2020/05/20/docker-xue-xi/"/>
    <id>https://liuhuaqiang.top/2020/05/20/docker-xue-xi/</id>
    <published>2020-05-19T16:00:00.000Z</published>
    <updated>2020-05-20T10:00:22.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-学习"><a href="#Docker-学习" class="headerlink" title="Docker 学习"></a>Docker 学习</h1><h2 id="开启Docker服务"><a href="#开启Docker服务" class="headerlink" title="开启Docker服务"></a>开启Docker服务</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> docker startsystemctl daemon-reloadsystemctl restart docker.service</code></pre><h2 id="镜像开始运行"><a href="#镜像开始运行" class="headerlink" title="镜像开始运行"></a>镜像开始运行</h2><pre class=" language-bash"><code class="language-bash">docker start <span class="token function">id</span></code></pre><h2 id="进入镜像"><a href="#进入镜像" class="headerlink" title="进入镜像"></a>进入镜像</h2><pre class=" language-bash"><code class="language-bash">docker attach <span class="token function">id</span></code></pre><h2 id="重启镜像"><a href="#重启镜像" class="headerlink" title="重启镜像"></a>重启镜像</h2><pre class=" language-bash"><code class="language-bash">docker restart <span class="token function">id</span></code></pre><h2 id="停止镜像"><a href="#停止镜像" class="headerlink" title="停止镜像"></a>停止镜像</h2><pre class=" language-bash"><code class="language-bash">docker stop <span class="token function">id</span></code></pre><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><pre class=" language-bash"><code class="language-bash">docker rmi <span class="token function">id</span>可能要先删除容器docker <span class="token function">rm</span> <span class="token function">id</span>不能删除的话就强制删除docker rmi -f <span class="token function">id</span></code></pre><h2 id="最常用的镜像"><a href="#最常用的镜像" class="headerlink" title="最常用的镜像"></a>最常用的镜像</h2><pre class=" language-bash"><code class="language-bash">docker pull ubuntudocker run -it -v ~/docker-ubuntu:/root/docker-ubuntu --name ubuntu ubuntudocker run -it -v  本机目录挂载   到   docker目录       --name 新的命名 打开的镜像名字-p 8080:8888  把主机上的8080端口,转发到docker上的8888端口-d 后台运行</code></pre><h2 id="保存镜像文件"><a href="#保存镜像文件" class="headerlink" title="保存镜像文件"></a>保存镜像文件</h2><pre class=" language-bash"><code class="language-bash">由于容器内的修改不会自动保存，所以需要对容器进行一个保存。使用docker <span class="token function">ps</span> -a 查看容器id并使用docker commit 保存镜像docker commit <span class="token function">id</span> name</code></pre><h1 id="查看当前的镜像"><a href="#查看当前的镜像" class="headerlink" title="查看当前的镜像"></a>查看当前的镜像</h1><pre class=" language-bash"><code class="language-bash">docker images</code></pre><h2 id="查看当前的运行的容器"><a href="#查看当前的运行的容器" class="headerlink" title="查看当前的运行的容器"></a>查看当前的运行的容器</h2><pre class=" language-bash"><code class="language-bash">docker <span class="token function">ps</span>查看所以容器docker <span class="token function">ps</span> -a</code></pre><p>解决ubuntu中文问题</p><p><a href="https://blog.csdn.net/yiwanxingchena/article/details/83900284" target="_blank" rel="noopener">https://blog.csdn.net/yiwanxingchena/article/details/83900284</a></p><pre class=" language-bash"><code class="language-bash">方法一：     <span class="token punctuation">(</span>0<span class="token punctuation">)</span>.查看容器语言环境         $ locale         LANG<span class="token operator">=</span>         LANGUAGE<span class="token operator">=</span>         LC_CTYPE<span class="token operator">=</span><span class="token string">"POSIX"</span>         <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>     <span class="token punctuation">(</span>1<span class="token punctuation">)</span>.查看容器支持的语言         $ locale -a          C          C.UTF-8          POSIX     <span class="token punctuation">(</span>2<span class="token punctuation">)</span>.修改 /etc/profile         $ <span class="token function">vi</span> /etc/profile            在最后添加 <span class="token function">export</span>  LANG<span class="token operator">=</span>C.UTF-8     <span class="token punctuation">(</span>3<span class="token punctuation">)</span>.重新加载环境变量         $ <span class="token function">source</span> /etc/profile     <span class="token punctuation">(</span>4<span class="token punctuation">)</span>.再次查看         $ locale         LANG<span class="token operator">=</span>C.UTF-8         LANGUAGE<span class="token operator">=</span>         LC_CTYPE<span class="token operator">=</span><span class="token string">"C.UTF-8"</span>         <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> 方法二：      在Dockerfile中添加 ENV LANG C.UTF-8 重新制作镜像————————————————版权声明：本文为CSDN博主「GO小胖」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/yiwanxingchena/java/article/details/83900284</code></pre><h1 id="安装可视化界面的docker管理"><a href="#安装可视化界面的docker管理" class="headerlink" title="安装可视化界面的docker管理"></a>安装可视化界面的docker管理</h1><p>为了更好的观察Docker运行状态，我们采用Portainer工具进行可视化，下面是部署过程总结：</p><p>环境：</p><p>Liunx:CentOS Linux release 7.6.1810 (Core)</p><p>Docker:19.03.5（备注：默认版本存在问题，升级可参考<a href="https://www.cnblogs.com/Bug-Hunter/p/12022491.html" target="_blank" rel="noopener">docker升级步骤及注意事项</a>）</p><p>部署步骤：</p><p>1、查询当前Portainer镜像，选择start值比较高的</p><p>命令：</p><p>docker search portainer</p><p>2、下载指定portainer镜像</p><p>命令：</p><p>docker pull portainer/portainer</p><p>3、本次只部署单机版，命令如下</p><p>docker run -d -p 9000:9000 –restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data –name prtainer-test portainer/portainer</p><p>如下图：</p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211153203115-79465651.png" alt="img"></p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211152823762-1999879810.png" alt="img"></p><p>参数说明：<br>-d：容器在后台运行；<br>-p 9000:9000 ：宿主机9000端口映射容器中的9000端口<br>–restart 标志会检查容器的退出代码，并据此来决定是否要重启容器，默认是不会重启。</p><p>–restart=always：自动重启该容器<br>-v /var/run/docker.sock:/var/run/docker.sock ：把宿主机的Docker守护进程(Docker daemon)默认监听的Unix域套接字挂载到容器中<br>-v portainer_data:/data ：把宿主机portainer_data数据卷挂载到容器/data目录<br>–name prtainer-test ： 给容器起名为portainer-test</p><p>4、使用docker ps查看进程，如下所示：</p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211153234806-1638544994.png" alt="img"></p><p> 如果需要汉化，可以下载<a href="https://pan.baidu.com/s/1BLXMSmJFcgESeNMhQL26Mg&shfl=sharepset" target="_blank" rel="noopener">汉化包</a>（提取码：6vjr）<a href="https://liuhuaqiang.lanzous.com/icu3qwd，之后解压，并将解压后的public文件夹上传到centos系统的根目录下，如下图所示：" target="_blank" rel="noopener">https://liuhuaqiang.lanzous.com/icu3qwd，之后解压，并将解压后的public文件夹上传到centos系统的根目录下，如下图所示：</a></p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211154002659-629104571.png" alt="img"></p><p>然后执行以下命令：</p><p>docker run -d -p 9000:9000 –restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data -v /public:/public –name prtainer-test portainer/portainer（如果已部署，需要将之前的容器删除）</p><p>5、Portainer的web页面登录</p><p>在浏览器输入部署服务器的IP:9000，回车，显示如下界面：</p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211154735320-1919071871.png" alt="img"></p><p> 由于是本地docker，所有选择local</p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211155241808-1937877821.png" alt="img"></p><p> 之后点击“Connect”，成功后跳转到主页界面（汉化后），如下图：</p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211154943016-14709007.png" alt="img"></p><p> 点击“local”，进入该docker内，展示相关容器、堆栈、镜像等信息，如下图所示：</p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211155743452-2143259224.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker-学习&quot;&gt;&lt;a href=&quot;#Docker-学习&quot; class=&quot;headerlink&quot; title=&quot;Docker 学习&quot;&gt;&lt;/a&gt;Docker 学习&lt;/h1&gt;&lt;h2 id=&quot;开启Docker服务&quot;&gt;&lt;a href=&quot;#开启Docker服务&quot; cla
      
    
    </summary>
    
    
    
      <category term="linux" scheme="https://liuhuaqiang.top/tags/linux/"/>
    
      <category term="docker" scheme="https://liuhuaqiang.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>152.乘积最大子数组</title>
    <link href="https://liuhuaqiang.top/2020/05/18/152-cheng-ji-zui-da-zi-shu-zu/"/>
    <id>https://liuhuaqiang.top/2020/05/18/152-cheng-ji-zui-da-zi-shu-zu/</id>
    <published>2020-05-18T01:08:10.000Z</published>
    <updated>2020-05-18T01:10:55.318Z</updated>
    
    <content type="html"><![CDATA[<h4 id="152-乘积最大子数组"><a href="#152-乘积最大子数组" class="headerlink" title="152. 乘积最大子数组"></a><a href="https://leetcode-cn.com/problems/maximum-product-subarray/" target="_blank" rel="noopener">152. 乘积最大子数组</a></h4><p>难度中等505</p><p>给你一个整数数组 <code>nums</code> ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p><p><strong>示例 1:</strong></p><pre class=" language-bash"><code class="language-bash">输入: <span class="token punctuation">[</span>2,3,-2,4<span class="token punctuation">]</span>输出: 6解释: 子数组 <span class="token punctuation">[</span>2,3<span class="token punctuation">]</span> 有最大乘积 6。</code></pre><p><strong>示例 2:</strong></p><pre class=" language-bash"><code class="language-bash">输入: <span class="token punctuation">[</span>-2,0,-1<span class="token punctuation">]</span>输出: 0解释: 结果不能为 2, 因为 <span class="token punctuation">[</span>-2,-1<span class="token punctuation">]</span> 不是子数组。</code></pre><p><img src="https://i.imgur.com/j53CzRh.png" alt></p><pre class=" language-c"><code class="language-c">我们可以根据正负性进行分类讨论。考虑当前位置如果是一个负数的话， 那么我们希望以它前一个位置结尾的某个段的积也是个负数，这样就可以负负得正，組我们希望这个积尽可能<span class="token punctuation">[</span> 负得更多，即尽可能小。如果当前位置是一个正数的话<span class="token punctuation">,</span>我们更希望以它前一个位置结尾的某个段的积也是个正数<span class="token punctuation">,</span>粗希望它尽可能地大。于是这里我们可以再维护<span class="token operator">-</span>一个<span class="token function">fmin</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> 它表示以第i个元素结尾的乘积最小子数组的乘积，那么我们可以得到这样的动态规划转移方程<span class="token punctuation">:</span>它代表第i个元素结尾的乘积最大子数组的乘积<span class="token function">fmax</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>可以考虑把a<span class="token punctuation">;</span>加入第i <span class="token operator">-</span> <span class="token number">1</span>个元素结尾的乘积最大或最小的子数组的乘积中，二者加上a<span class="token punctuation">;</span><span class="token punctuation">,</span>三者取大<span class="token punctuation">,</span>就是第i个元素结尾的乘积最大子数组的乘积。第i个元素结尾的乘积最小子数组的乘积<span class="token function">fmin</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>同理。不难给出这样的实现<span class="token punctuation">:</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n  <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minn <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>maxx <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> ma <span class="token operator">=</span> maxx<span class="token punctuation">;</span>            <span class="token keyword">int</span> mm <span class="token operator">=</span> minn<span class="token punctuation">;</span>            maxx <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxx<span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>mm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            minn <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>minn<span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>ma<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span>maxx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;152-乘积最大子数组&quot;&gt;&lt;a href=&quot;#152-乘积最大子数组&quot; class=&quot;headerlink&quot; title=&quot;152. 乘积最大子数组&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/maximum-pr
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>课程表</title>
    <link href="https://liuhuaqiang.top/2020/05/17/ke-cheng-biao/"/>
    <id>https://liuhuaqiang.top/2020/05/17/ke-cheng-biao/</id>
    <published>2020-05-17T02:05:57.000Z</published>
    <updated>2020-05-17T02:08:07.448Z</updated>
    
    <content type="html"><![CDATA[<h4 id="207-课程表"><a href="#207-课程表" class="headerlink" title="207. 课程表"></a><a href="https://leetcode-cn.com/problems/course-schedule/" target="_blank" rel="noopener">207. 课程表</a></h4><p>难度中等328</p><p>你这个学期必须选修 <code>numCourse</code> 门课程，记为 <code>0</code> 到 <code>numCourse-1</code> 。</p><p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们：<code>[0,1]</code></p><p>给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？</p><p><strong>示例 1:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 2, <span class="token punctuation">[</span><span class="token punctuation">[</span>1,0<span class="token punctuation">]</span><span class="token punctuation">]</span> 输出: <span class="token boolean">true</span>解释: 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。</code></pre><p><strong>示例 2:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 2, <span class="token punctuation">[</span><span class="token punctuation">[</span>1,0<span class="token punctuation">]</span>,<span class="token punctuation">[</span>0,1<span class="token punctuation">]</span><span class="token punctuation">]</span>输出: <span class="token boolean">false</span>解释: 总共有 2 门课程。学习课程 1 之前，你需要先完成课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。</code></pre><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> viss<span class="token punctuation">[</span><span class="token number">100050</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> edge<span class="token punctuation">[</span><span class="token number">100050</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    bool <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        viss<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        bool ret <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token punctuation">:</span>edge<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>viss<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>viss<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token operator">==</span>true <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ret <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                ret <span class="token operator">=</span> false<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        viss<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    bool <span class="token function">canFinish</span><span class="token punctuation">(</span><span class="token keyword">int</span> numCourses<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numCourses<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            viss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token punctuation">:</span>prerequisites<span class="token punctuation">)</span><span class="token punctuation">{</span>            edge<span class="token punctuation">[</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        bool ret <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numCourses<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>viss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> ret <span class="token operator">=</span> ret <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="210-课程表-II"><a href="#210-课程表-II" class="headerlink" title="210. 课程表 II"></a><a href="https://leetcode-cn.com/problems/course-schedule-ii/" target="_blank" rel="noopener">210. 课程表 II</a></h4><p>难度中等141</p><p>现在你总共有 <em>n</em> 门课需要选，记为 <code>0</code> 到 <code>n-1</code>。</p><p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: <code>[0,1]</code></p><p>给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。</p><p>可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。</p><p><strong>示例 1:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 2, <span class="token punctuation">[</span><span class="token punctuation">[</span>1,0<span class="token punctuation">]</span><span class="token punctuation">]</span> 输出: <span class="token punctuation">[</span>0,1<span class="token punctuation">]</span>解释: 总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 <span class="token punctuation">[</span>0,1<span class="token punctuation">]</span> 。</code></pre><p><strong>示例 2:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 4, <span class="token punctuation">[</span><span class="token punctuation">[</span>1,0<span class="token punctuation">]</span>,<span class="token punctuation">[</span>2,0<span class="token punctuation">]</span>,<span class="token punctuation">[</span>3,1<span class="token punctuation">]</span>,<span class="token punctuation">[</span>3,2<span class="token punctuation">]</span><span class="token punctuation">]</span>输出: <span class="token punctuation">[</span>0,1,2,3<span class="token punctuation">]</span> or <span class="token punctuation">[</span>0,2,1,3<span class="token punctuation">]</span>解释: 总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。     因此，一个正确的课程顺序是 <span class="token punctuation">[</span>0,1,2,3<span class="token punctuation">]</span> 。另一个正确的排序是 <span class="token punctuation">[</span>0,2,1,3<span class="token punctuation">]</span> 。</code></pre><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>private<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// 存储有向图</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> edges<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 标记每个节点的状态：0=未搜索，1=搜索中，2=已完成</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> visited<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用数组来模拟栈，下标 0 为栈底，n-1 为栈顶</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> result<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断有向图中是否有环</span>    bool invalid<span class="token punctuation">;</span>public<span class="token punctuation">:</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将节点标记为「搜索中」</span>        visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 搜索其相邻节点</span>        <span class="token comment" spellcheck="true">// 只要发现有环，立刻停止搜索</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">:</span> edges<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果「未搜索」那么搜索相邻节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>invalid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果「搜索中」说明找到了环</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                invalid <span class="token operator">=</span> true<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将节点标记为「已完成」</span>        visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将节点入栈</span>        result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>u<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">findOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span> numCourses<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">{</span>        edges<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>numCourses<span class="token punctuation">)</span><span class="token punctuation">;</span>        visited<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>numCourses<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> info<span class="token punctuation">:</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">{</span>            edges<span class="token punctuation">[</span>info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 每次挑选一个「未搜索」的节点，开始进行深度优先搜索</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numCourses <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>invalid<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>invalid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果没有环，那么就有拓扑排序</span>        <span class="token comment" spellcheck="true">// 注意下标 0 为栈底，因此需要将数组反序输出</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;207-课程表&quot;&gt;&lt;a href=&quot;#207-课程表&quot; class=&quot;headerlink&quot; title=&quot;207. 课程表&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/course-schedule/&quot; targ
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>反转链表</title>
    <link href="https://liuhuaqiang.top/2020/05/16/fan-zhuan-lian-biao/"/>
    <id>https://liuhuaqiang.top/2020/05/16/fan-zhuan-lian-biao/</id>
    <published>2020-05-16T02:48:12.000Z</published>
    <updated>2020-05-16T02:52:51.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><p>●定义两个指针: pre和cur ; pre在前cur在后。<br>●每次让pre的next指向cur，实现-次局部反转<br>●局部反转完成之后，pre和cur同时往后移动-一个位置<br>●循环上述过程，直至pre到达链表尾部</p><p><img src="https://i.imgur.com/dYHzv5N.gif" alt></p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>pre <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pre <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListNode<span class="token operator">*</span> t <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span>            pre<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>简洁的递归<br>●使用递归函数,一直递归到链表的最后-个结点,该结点就是反转后的头结点，记作ret .<br>●此后，每次函数在返回的过程中，让当前结点的下一个结点的next指针指向当前节点。<br>●同时让当前结点的next指针指向NULL，从而实现从链表尾部开始的局部反转<br>●当递归函数全部出栈后，链表反转完成。</p><p><img src="https://i.imgur.com/e9cyL2J.gif" alt></p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> head<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ListNode<span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;反转链表&quot;&gt;&lt;a href=&quot;#反转链表&quot; class=&quot;headerlink&quot; title=&quot;反转链表&quot;&gt;&lt;/a&gt;反转链表&lt;/h1&gt;&lt;p&gt;●定义两个指针: pre和cur ; pre在前cur在后。&lt;br&gt;●每次让pre的next指向cur，实现-次局部反转&lt;b
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>560.和为K的子数组</title>
    <link href="https://liuhuaqiang.top/2020/05/15/560-he-wei-k-de-zi-shu-zu/"/>
    <id>https://liuhuaqiang.top/2020/05/15/560-he-wei-k-de-zi-shu-zu/</id>
    <published>2020-05-15T09:41:22.000Z</published>
    <updated>2020-05-15T09:45:50.649Z</updated>
    
    <content type="html"><![CDATA[<h4 id="560-和为K的子数组"><a href="#560-和为K的子数组" class="headerlink" title="560. 和为K的子数组"></a><a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/" target="_blank" rel="noopener">560. 和为K的子数组</a></h4><p>给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。</p><p>示例 1 :</p><p>输入:nums = [1,1,1], k = 2<br>输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。<br>说明 :</p><p>数组的长度为 [1, 20,000]。<br>数组中元素的范围是 [-1000, 1000] ，且整数 k 的范围是 [-1e7, 1e7]</p><p><img src="https://i.imgur.com/NXZJujY.png" alt></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*我们可以基于方法一利用数据结构进行进一步的优化，我们知道方法一的瓶颈在于对每个 ii，我们需要枚举所有的 jj 来判断是否符合条件，这一步是否可以优化呢？答案是可以的。我们定义preli为0..2]里所有数的和，则prei可以由preli- 1] 递推而来，即:pre[i]= pre[i- 1] + nums[i]那么[j..i] 这个子数组和为k」这个条件我们可以转化为pre[i]- pre[j- 1]==k简单移项可得符合条件的下标j需要满足pre[j- 1]== pre[i] - k:所以我们考虑以i结尾的和为ke的连续子数组个数时只要统计有多少个前缀和为pre[i]- k的pre[j]即可。我们建立哈希表mp,以和为键,出现次数为对应的值,记录pre[i]出现的次数,从左往右边更新mp边计算答案,那么以i结尾的答案mp[pre[]一k]即可在0(1)时间内得到。后的答案即为所有下标结尾的和为k的子数组个数之和。需要注意的是，从左往右边更新边计算的时候已经保证了mp[pre[i] - k] 里记录的pre[j] 的下标范围是0≤j≤i.同时，由于pre[i] 的计算只与前一项的答案有关,因此我们可以不用建立pre数组，直接用pre量来记录pre[i - 1] 的答案即可。*/</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">subarraySum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        mp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token operator">+</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>ans<span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token operator">!=</span>mp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ret<span class="token operator">+</span><span class="token operator">=</span>mp<span class="token punctuation">[</span>ans<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mp<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;560-和为K的子数组&quot;&gt;&lt;a href=&quot;#560-和为K的子数组&quot; class=&quot;headerlink&quot; title=&quot;560. 和为K的子数组&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/subarray-s
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>50.pow(x,n)</title>
    <link href="https://liuhuaqiang.top/2020/05/11/50-pow-x-n/"/>
    <id>https://liuhuaqiang.top/2020/05/11/50-pow-x-n/</id>
    <published>2020-05-11T02:22:28.000Z</published>
    <updated>2020-05-15T12:37:54.992Z</updated>
    
    <content type="html"><![CDATA[<h4 id="50-Pow-x-n"><a href="#50-Pow-x-n" class="headerlink" title="50. Pow(x, n)"></a><a href="https://leetcode-cn.com/problems/powx-n/" target="_blank" rel="noopener">50. Pow(x, n)</a></h4><p>难度中等333</p><p>实现 <a href="https://www.cplusplus.com/reference/valarray/pow/" target="_blank" rel="noopener">pow(<em>x</em>, <em>n</em>)</a> ，即计算 x 的 n 次幂函数。</p><p><strong>示例 1:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 2.00000, 10输出: 1024.00000</code></pre><p><strong>示例 2:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 2.10000, 3输出: 9.26100</code></pre><p><strong>示例 3:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 2.00000, -2输出: 0.25000解释: 2-2 <span class="token operator">=</span> 1/22 <span class="token operator">=</span> 1/4 <span class="token operator">=</span> 0.25</code></pre><p>思路描述：因为不用考虑大数问题，所以只需要循环地去计算就可以了，但是单纯的循环去算，比如：</p><p>for(int i = 1; i &lt; n; i ++)<br>    x *= x;<br>是会超时的。</p><p>所以我们可以考虑比如我们计算 x^8，就是 x^2 * x^2 * x^2 * x^2，当我们计算出来 x^2 之后就可以只进行三次乘法就可以了，相对于之前的 7 次乘法，时间大大减少了。</p><p>也就是 x^n 可以分解成若干个 x^i 的乘积</p><p>我们这里使用快速幂进行求解。我们看一下 n 的二进制形式一定是若干个 1 和 0 构成</p><p>所以我们可以看出来，每次乘的值都是前一个值的2倍，当 n 对应位为0时跳过</p><p>负数幂和正数幂相同，因为除以一个数就相当于乘这个数的倒数。</p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> x<span class="token operator">==</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> num <span class="token operator">=</span>n<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            num<span class="token operator">=</span><span class="token operator">-</span>num<span class="token punctuation">;</span>            x<span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">double</span> ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> ret<span class="token operator">*</span><span class="token operator">=</span>x<span class="token punctuation">;</span>            x<span class="token operator">*</span><span class="token operator">=</span>x<span class="token punctuation">;</span>            num<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c">ll <span class="token function">quick_pow</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ll ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans<span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span>b是可以为<span class="token keyword">double</span>的<span class="token punctuation">,</span></code></pre><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">double</span>  <span class="token function">quick_pow</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span>  b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans<span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token punctuation">;</span>            b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> x<span class="token operator">==</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> num <span class="token operator">=</span>n<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            num<span class="token operator">=</span><span class="token operator">-</span>num<span class="token punctuation">;</span>            x<span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">quick_pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;50-Pow-x-n&quot;&gt;&lt;a href=&quot;#50-Pow-x-n&quot; class=&quot;headerlink&quot; title=&quot;50. Pow(x, n)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/powx-n/&quot; ta
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>236. 二叉树的最近公共祖先</title>
    <link href="https://liuhuaqiang.top/2020/05/10/236.er-cha-shu-de-zui-jin-gong-gong-zu-xian/"/>
    <id>https://liuhuaqiang.top/2020/05/10/236.er-cha-shu-de-zui-jin-gong-gong-zu-xian/</id>
    <published>2020-05-10T03:16:27.000Z</published>
    <updated>2020-05-10T03:50:07.983Z</updated>
    
    <content type="html"><![CDATA[<h4 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236. 二叉树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="noopener">236. 二叉树的最近公共祖先</a></h4><p>难度中等504</p><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p><a href="https://baike.baidu.com/item/最近公共祖先/8918834?fr=aladdin" target="_blank" rel="noopener">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p><p>例如，给定如下二叉树: root = [3,5,1,6,2,0,8,null,null,7,4]</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/binarytree.png" alt="img"></p><p><strong>示例 1:</strong></p><pre><code>输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1输出: 3解释: 节点 5 和节点 1 的最近公共祖先是节点 3。</code></pre><p><strong>示例 2:</strong></p><pre class=" language-bash"><code class="language-bash">输入: root <span class="token operator">=</span> <span class="token punctuation">[</span>3,5,1,6,2,0,8,null,null,7,4<span class="token punctuation">]</span>, p <span class="token operator">=</span> 5, q <span class="token operator">=</span> 4输出: 5解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。</code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*方法二：存储父节点思路我们可以用哈希表存储所有节点的父节点，然后我们就可以利用节点的父节点信息从 p 结点开始不断往上跳，并记录已经访问过的节点，再从 q 节点开始不断往上跳，如果碰到已经访问过的节点，那么这个节点就是我们要找的最近公共祖先。算法从根节点开始遍历整棵二叉树，用哈希表记录每个节点的父节点指针。从 p 节点开始不断往它的祖先移动，并用数据结构记录已经访问过的祖先节点。同样，我们再从 q 节点开始不断往它的祖先移动，如果有祖先已经被访问过，即意味着这是 p 和 q 的深度最深的公共祖先，即 LCA 节点。作者：LeetCode-Solution链接：https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/er-cha-shu-de-zui-jin-gong-gong-zu-xian-by-leetc-2/来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。*/</span><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>TreeNode<span class="token operator">*</span> <span class="token operator">></span> fa<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>bool<span class="token operator">></span> vis<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fa<span class="token punctuation">[</span>root<span class="token operator">-></span>left<span class="token operator">-></span>val<span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fa<span class="token punctuation">[</span>root<span class="token operator">-></span>right<span class="token operator">-></span>val<span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fa<span class="token punctuation">[</span>root<span class="token operator">-></span>val<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            vis<span class="token punctuation">[</span>p<span class="token operator">-></span>val<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>            p <span class="token operator">=</span> fa<span class="token punctuation">[</span>p<span class="token operator">-></span>val<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>q<span class="token operator">-></span>val<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> q<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            q <span class="token operator">=</span> fa<span class="token punctuation">[</span>q<span class="token operator">-></span>val<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;236-二叉树的最近公共祖先&quot;&gt;&lt;a href=&quot;#236-二叉树的最近公共祖先&quot; class=&quot;headerlink&quot; title=&quot;236. 二叉树的最近公共祖先&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/l
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>221.最大正方形</title>
    <link href="https://liuhuaqiang.top/2020/05/08/221-zui-da-zheng-fang-xing/"/>
    <id>https://liuhuaqiang.top/2020/05/08/221-zui-da-zheng-fang-xing/</id>
    <published>2020-05-08T02:25:27.000Z</published>
    <updated>2020-05-10T04:03:48.503Z</updated>
    
    <content type="html"><![CDATA[<h4 id="221-最大正方形"><a href="#221-最大正方形" class="headerlink" title="221. 最大正方形"></a><a href="https://leetcode-cn.com/problems/maximal-square/" target="_blank" rel="noopener">221. 最大正方形</a></h4><p>难度中等332</p><p>在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。</p><p><strong>示例:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 1 0 1 0 01 0 1 1 11 1 1 1 11 0 0 1 0输出: 4</code></pre><p><img src="https://assets.leetcode-cn.com/solution-static/221/221_fig1.png" alt></p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">maximalSquare</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token operator">*</span>ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;221-最大正方形&quot;&gt;&lt;a href=&quot;#221-最大正方形&quot; class=&quot;headerlink&quot; title=&quot;221. 最大正方形&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/maximal-square/&quot;
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>1361.验证二叉树</title>
    <link href="https://liuhuaqiang.top/2020/05/07/1361-yan-zheng-er-cha-shu/"/>
    <id>https://liuhuaqiang.top/2020/05/07/1361-yan-zheng-er-cha-shu/</id>
    <published>2020-05-07T13:47:19.000Z</published>
    <updated>2020-05-10T04:04:56.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1361-验证二叉树"><a href="#1361-验证二叉树" class="headerlink" title="1361.验证二叉树"></a>1361.验证二叉树</h1><p>二叉树上有 n 个节点，按从 0 到 n - 1 编号，其中节点 i 的两个子节点分别是 leftChild[i] 和 rightChild[i]。</p><p>只有 所有 节点能够形成且 只 形成 一颗 有效的二叉树时，返回 true；否则返回 false。</p><p>如果节点 i 没有左子节点，那么 leftChild[i] 就等于 -1。右子节点也符合该规则。</p><p>注意：节点没有值，本问题中仅仅使用节点编号。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/validate-binary-tree-nodes" target="_blank" rel="noopener">https://leetcode-cn.com/problems/validate-binary-tree-nodes</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/23/1503_ex1.png" alt></p><pre class=" language-c"><code class="language-c">输入：n <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> leftChild <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rightChild <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>输出：true</code></pre><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/23/1503_ex2.png" alt></p><pre class=" language-c++"><code class="language-c++">输入：n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]输出：false</code></pre><p>以满二叉树为例，我们知道一个深度为 n<em>n</em> 的二叉树有如下特点：</p><ol><li><p>一共有2^n-1个节点</p></li><li><p>深度为n的叶子节点为2^(n-1)个节点</p></li><li><p>叶子节点下面的节点为题目中的-1的节点，深度为n+1，个数为2^(n+1-1)=2^n个节点</p></li><li><p>所以-1 的节点个数比总结点个数多1</p></li></ol><p><img src="https://pic.leetcode-cn.com/4529e5d73ac73f1b2043f0955f6d69c850bb57ced6d0b33f49b136c27d74bd39-5170.jpg" alt></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">validateBinaryTreeNodes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">,</span> leftChild<span class="token punctuation">,</span> rightChild<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span>leftChild <span class="token operator">+</span> rightChild<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> n <span class="token operator">+</span> <span class="token number">1</span></code></pre><h4 id="方法一：连通性判定"><a href="#方法一：连通性判定" class="headerlink" title="方法一：连通性判定"></a>方法一：连通性判定</h4><p>官方题解:</p><p>我们将验证二叉树的过程分为两步：第一步找到二叉树的根节点，第二步从根节点开始对二叉树进行遍历，判断其是否为一颗有效的二叉树。</p><p>在第一步中，为了找到根节点，我们需要用数组 indeg 存放所有节点的入度，这是因为只有入度为 0 的点才能是根节点。我们遍历数组 leftChild 和 rightChild，如果数组中的某个元素 x 不为 -1，那么就表示有一条边指向节点 x，节点 x 的入度 indeg[x] 增加 1。在遍历完数组 leftChild 和 rightChild 后，我们在数组 indeg 中找到一个满足 index[root] == 0 的节点 root，即为二叉树的根节点。</p><p>如果有多个满足 index[root] == 0 的节点呢？在这种情况下，这 n 个节点一定不是一颗有效的二叉树。我们把这个问题放在第二步来考虑，而在第一步中，我们先不处理这个问题。</p><p>在第二步中，我们从根节点开始进行深度优先搜索或广度优先搜索，判定这 n 个节点的连通性，这是因为当这个 n 个节点是一颗有效的二叉树时，所有的节点会恰好被遍历一次。如果某一个节点被遍历了超过一次（有不止一个父节点）或零次（不连通），那么这 n 个节点都不是一颗有效的二叉树。我们可以使用哈希集合（HashSet）seen 来存放所有被遍历过的节点，如果在搜索时遍历到了 seen 中出现的节点，那么说明该节点被遍历了超过一次。如果在搜索完成后，seen 中的节点个数少于 n，那么说明有些节点没有被遍历过。</p><p>回到第一步中遗留的那个问题，如果有多个满足 index[root] == 0 的节点 r1, r2, …，那么我们可以任意选择一个节点，例如 r1，作为根节点。在搜索时，由于节点 r2, … 的入度为 0，因此不可能被遍历到。这样在搜索结束后，seen 中的节点个数一定少于 n。</p><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/validate-binary-tree-nodes/solution/yan-zheng-er-cha-shu-by-leetcode-solution/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/validate-binary-tree-nodes/solution/yan-zheng-er-cha-shu-by-leetcode-solution/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>   bool <span class="token function">validateBinaryTreeNodes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> leftChild<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> rightChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>       vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">indeg</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>leftChild<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token operator">++</span>indeg<span class="token punctuation">[</span>leftChild<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>rightChild<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token operator">++</span>indeg<span class="token punctuation">[</span>rightChild<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">int</span> root <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>indeg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               root <span class="token operator">=</span> i<span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> false<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> seen<span class="token punctuation">;</span>       queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>       seen<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>       q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">int</span> u <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>leftChild<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>seen<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>leftChild<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">return</span> false<span class="token punctuation">;</span>               <span class="token punctuation">}</span>               seen<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>leftChild<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leftChild<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>rightChild<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>seen<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>rightChild<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">return</span> false<span class="token punctuation">;</span>               <span class="token punctuation">}</span>               seen<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>rightChild<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rightChild<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> seen<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1361-验证二叉树&quot;&gt;&lt;a href=&quot;#1361-验证二叉树&quot; class=&quot;headerlink&quot; title=&quot;1361.验证二叉树&quot;&gt;&lt;/a&gt;1361.验证二叉树&lt;/h1&gt;&lt;p&gt;二叉树上有 n 个节点，按从 0 到 n - 1 编号，其中节点 i 的两个
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>字典树</title>
    <link href="https://liuhuaqiang.top/2020/05/07/zi-dian-shu/"/>
    <id>https://liuhuaqiang.top/2020/05/07/zi-dian-shu/</id>
    <published>2020-05-07T13:24:30.000Z</published>
    <updated>2020-05-10T04:04:39.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>tree<span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">buildtree</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>            tree<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">quest</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    tree<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        string ss<span class="token punctuation">;</span>        cin<span class="token operator">>></span>ss<span class="token punctuation">;</span>        <span class="token function">buildtree</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        string ss<span class="token punctuation">;</span>        cin<span class="token operator">>></span>ss<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">quest</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;字典树&quot;&gt;&lt;a href=&quot;#字典树&quot; class=&quot;headerlink&quot; title=&quot;字典树&quot;&gt;&lt;/a&gt;字典树&lt;/h2&gt;&lt;pre class=&quot; language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token 
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>1071. 字符串的最大公因子</title>
    <link href="https://liuhuaqiang.top/2020/05/07/1071.zi-fu-chuan-de-zui-da-gong-yin-zi/"/>
    <id>https://liuhuaqiang.top/2020/05/07/1071.zi-fu-chuan-de-zui-da-gong-yin-zi/</id>
    <published>2020-05-07T13:24:27.000Z</published>
    <updated>2020-05-10T04:03:40.951Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1071-字符串的最大公因子"><a href="#1071-字符串的最大公因子" class="headerlink" title="1071. 字符串的最大公因子"></a><a href="https://leetcode-cn.com/problems/greatest-common-divisor-of-strings/" target="_blank" rel="noopener">1071. 字符串的最大公因子</a></h4><hr><p>对于字符串 S 和 T，只有在 S = T + … + T（T 与自身连接 1 次或多次）时，我们才认定 “T 能除尽 S”。</p><p>返回最长字符串 X，要求满足 X 能除尽 str1 且 X 能除尽 str2。</p><p>示例 1：</p><p>输入：str1 = “ABCABC”, str2 = “ABC”<br>输出：”ABC”<br>示例 2：</p><p>输入：str1 = “ABABAB”, str2 = “ABAB”<br>输出：”AB”<br>示例 3：</p><p>输入：str1 = “LEET”, str2 = “CODE”<br>输出：””</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/greatest-common-divisor-of-strings" target="_blank" rel="noopener">https://leetcode-cn.com/problems/greatest-common-divisor-of-strings</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><hr><pre class=" language-c++"><code class="language-c++">/*总有一种好像顺手就能用上的感觉呢。其实看起来两个字符串之间能有这种神奇的关系是挺不容易的，我们希望能够找到一个简单的办法识别是否有解。如果它们有公因子 abc，那么 str1 就是 mm 个 abc 的重复，str2 是 nn 个 abc 的重复，连起来就是 m+nm+n 个 abc，好像 m+nm+n 个 abc 跟 n+mn+m 个 abc 是一样的。所以如果 str1 + str2 === str2 + str1 就意味着有解。我们也很容易想到 str1 + str2 !== str2 + str1 也是无解的充要条件。当确定有解的情况下，最优解是长度为 gcd(str1.length, str2.length) 的字符串。这个理论最优长度是不是每次都能达到呢？是的。因为如果能循环以它的约数为长度的字符串，自然也能够循环以它为长度的字符串，所以这个理论长度就是我们要找的最优解。把刚刚写的那些拼起来就是解法了。作者：wonderful611链接：https://leetcode-cn.com/problems/greatest-common-divisor-of-strings/solution/1071-zi-fu-chuan-de-zui-da-gong-yin-zi-by-wonderfu/来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。*/class Solution {public:    string gcdOfStrings(string str1, string str2) {        if((str1+ str2) != (str2+str1)){            return "";        }        int n  = __gcd(str1.length(),str2.length());        return str1.substr(0,n);    }};</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1071-字符串的最大公因子&quot;&gt;&lt;a href=&quot;#1071-字符串的最大公因子&quot; class=&quot;headerlink&quot; title=&quot;1071. 字符串的最大公因子&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/g
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>1353. 最多可以参加的会议数目</title>
    <link href="https://liuhuaqiang.top/2020/05/07/1353.zui-duo-ke-yi-can-jia-de-hui-yi-shu-mu/"/>
    <id>https://liuhuaqiang.top/2020/05/07/1353.zui-duo-ke-yi-can-jia-de-hui-yi-shu-mu/</id>
    <published>2020-05-07T13:24:27.000Z</published>
    <updated>2020-05-10T04:03:52.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1353-最多可以参加的会议数目"><a href="#1353-最多可以参加的会议数目" class="headerlink" title="1353. 最多可以参加的会议数目"></a><a href="https://leetcode-cn.com/problems/maximum-number-of-events-that-can-be-attended/" target="_blank" rel="noopener">1353. 最多可以参加的会议数目</a></h1><pre class=" language-bash"><code class="language-bash">给你一个数组 events，其中 events<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>startDayi, endDayi<span class="token punctuation">]</span> ，表示会议 i 开始于 startDayi ，结束于 endDayi 。你可以在满足 startDayi <span class="token operator">&lt;=</span> d <span class="token operator">&lt;=</span> endDayi 中的任意一天 d 参加会议 i 。注意，一天只能参加一个会议。请你返回你可以参加的 最大 会议数目。来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/maximum-number-of-events-that-can-be-attended著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/16/e1.png" alt></p><pre><code>输入：events = [[1,2],[2,3],[3,4]]输出：3解释：你可以参加所有的三个会议。安排会议的一种方案如上图。第 1 天参加第一个会议。第 2 天参加第二个会议。第 3 天参加第三个会议。示例 2：输入：events= [[1,2],[2,3],[3,4],[1,2]]输出：4示例 3：输入：events = [[1,4],[4,4],[2,2],[3,4],[1,1]]输出：4示例 4：输入：events = [[1,100000]]输出：1示例 5：输入：events = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]]输出：7提示：1 &lt;= events.length &lt;= 10^5events[i].length == 21 &lt;= events[i][0] &lt;= events[i][1] &lt;= 10^5来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/maximum-number-of-events-that-can-be-attended著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><p>这是一道典型的扫描算法题。由于每个时间点最多参加一个会议，我们可以从1开始遍历所有时间。</p><p>对于每一个时间点，所有在当前时间及之前时间开始，并且在当前时间还未结束的会议都是可参加的。显然，在所有可参加的会议中，选择结束时间最早的会议是最优的，因为其他会议还有更多的机会可以去参加。</p><p>怎样动态获得当前结束时间最早的会议呢？我们可以使用一个小根堆记录所有当前可参加会议的结束时间。在每一个时间点，我们首先将当前时间点开始的会议加入小根堆，再把当前已经结束的会议移除出小根堆（因为已经无法参加了），然后从剩下的会议中选择一个结束时间最早的去参加。</p><p>为了快速获得当前时间点开始的会议，我们以O(N)O(N)时间预处理得到每个时间点开始的会议的序号。</p><p>算法总的时间复杂度为O(T\log N)O(TlogN)（这里的TT为时间范围）。</p><p>作者：lucifer1004<br>链接：<a href="https://leetcode-cn.com/problems/maximum-number-of-events-that-can-be-attended/solution/sao-miao-suan-fa-tan-xin-by-lucifer1004/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-number-of-events-that-can-be-attended/solution/sao-miao-suan-fa-tan-xin-by-lucifer1004/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">maxEvents</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">ans</span><span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// for (auto v:events){</span>        <span class="token comment" spellcheck="true">//     ans[v[0]].push_back(v[1]);</span>        <span class="token comment" spellcheck="true">// }</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> events<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token punctuation">[</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> pq<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>MAX<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span>  j<span class="token punctuation">:</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ret<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1353-最多可以参加的会议数目&quot;&gt;&lt;a href=&quot;#1353-最多可以参加的会议数目&quot; class=&quot;headerlink&quot; title=&quot;1353. 最多可以参加的会议数目&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/prob
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>1376. 通知所有员工所需的时间</title>
    <link href="https://liuhuaqiang.top/2020/05/07/1376.tong-zhi-suo-you-yuan-gong-suo-xu-de-shi-jian/"/>
    <id>https://liuhuaqiang.top/2020/05/07/1376.tong-zhi-suo-you-yuan-gong-suo-xu-de-shi-jian/</id>
    <published>2020-05-07T13:24:27.000Z</published>
    <updated>2020-05-10T04:05:12.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1376-通知所有员工所需的时间"><a href="#1376-通知所有员工所需的时间" class="headerlink" title="1376. 通知所有员工所需的时间"></a><a href="https://leetcode-cn.com/problems/time-needed-to-inform-all-employees/" target="_blank" rel="noopener">1376. 通知所有员工所需的时间</a></h1><p>公司里有 <code>n</code> 名员工，每个员工的 ID 都是独一无二的，编号从 <code>0</code> 到 <code>n - 1</code>。公司的总负责人通过 <code>headID</code> 进行标识。</p><p>在 <code>manager</code> 数组中，每个员工都有一个直属负责人，其中 <code>manager[i]</code> 是第 <code>i</code> 名员工的直属负责人。对于总负责人，<code>manager[headID] = -1</code>。题目保证从属关系可以用树结构显示。</p><p>公司总负责人想要向公司所有员工通告一条紧急消息。他将会首先通知他的直属下属们，然后由这些下属通知他们的下属，直到所有的员工都得知这条紧急消息。</p><p>第 <code>i</code> 名员工需要 <code>informTime[i]</code> 分钟来通知它的所有直属下属（也就是说在 <code>informTime[i]</code> 分钟后，他的所有直属下属都可以开始传播这一消息）。</p><p>返回通知所有员工这一紧急消息所需要的 <strong>分钟数</strong> 。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> dict<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> edge<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">numOfMinutes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> headID<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> manager<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> informTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>manager<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                edge<span class="token punctuation">[</span>manager<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>headID<span class="token punctuation">)</span><span class="token punctuation">;</span>        dict<span class="token punctuation">[</span>headID<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dict<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token punctuation">:</span>edge<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                dict<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dict<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>informTime<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1376-通知所有员工所需的时间&quot;&gt;&lt;a href=&quot;#1376-通知所有员工所需的时间&quot; class=&quot;headerlink&quot; title=&quot;1376. 通知所有员工所需的时间&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/prob
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>1383. 最大的团队表现值</title>
    <link href="https://liuhuaqiang.top/2020/05/07/1383.zui-da-de-tuan-dui-biao-xian-zhi/"/>
    <id>https://liuhuaqiang.top/2020/05/07/1383.zui-da-de-tuan-dui-biao-xian-zhi/</id>
    <published>2020-05-07T13:24:27.000Z</published>
    <updated>2020-05-10T04:03:59.757Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1383-最大的团队表现值"><a href="#1383-最大的团队表现值" class="headerlink" title="1383. 最大的团队表现值"></a><a href="https://leetcode-cn.com/problems/maximum-performance-of-a-team/" target="_blank" rel="noopener">1383. 最大的团队表现值</a></h4><pre class=" language-md"><code class="language-md">示例 1：输入：n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2输出：60解释：我们选择工程师 2（speed=10 且 efficiency=4）和工程师 5（speed=5 且 efficiency=7）。他们的团队表现值为 performance = (10 + 5) * min(4, 7) = 60 。示例 2：输入：n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3输出：68解释：此示例与第一个示例相同，除了 k = 3 。我们可以选择工程师 1 ，工程师 2 和工程师 5 得到最大的团队表现值。表现值为 performance = (2 + 10 + 5) * min(5, 4, 7) = 68 。示例 3：输入：n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4输出：72提示：1 <= n <= 10^5speed.length == nefficiency.length == n1 <= speed[i] <= 10^51 <= efficiency[i] <= 10^81 <= k <= n来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/maximum-performance-of-a-team著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><pre class=" language-bash"><code class="language-bash">思路对 speed 和 efficiency 同步排序，按照效率降序遍历，对每一项数据1. 累加和 <span class="token function">sum</span> ，当超过 k 个的数据时，选最小的将其排除2. 使用优先队列来找到 k 个中最小的数据3. 效率的最低值就是当前项的效率4. 计算结果，注意这里不能取余返回最终结果时取余作者：ikaruga链接：https://leetcode-cn.com/problems/maximum-performance-of-a-team/solution/5359-by-ikaruga/来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> s<span class="token punctuation">,</span>e<span class="token punctuation">;</span><span class="token punctuation">}</span> en<span class="token punctuation">[</span><span class="token number">100000000</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD <span class="token operator">=</span> <span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">maxPerformance</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> speed<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> efficiency<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            en<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s <span class="token operator">=</span> speed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            en<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e <span class="token operator">=</span> efficiency<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>en<span class="token punctuation">,</span>en<span class="token operator">+</span>n<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>node a<span class="token punctuation">,</span>node b<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> a<span class="token punctuation">.</span>e<span class="token operator">></span>b<span class="token punctuation">.</span>e<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>en<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>en<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        priority_queue<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">></span> <span class="token operator">></span> q<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从小到大的优先队列 </span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span>  ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sum<span class="token operator">+</span><span class="token operator">=</span>en<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>en<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>                sum<span class="token operator">-</span><span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span>sum<span class="token operator">*</span>en<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token operator">%</span>MOD <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1383-最大的团队表现值&quot;&gt;&lt;a href=&quot;#1383-最大的团队表现值&quot; class=&quot;headerlink&quot; title=&quot;1383. 最大的团队表现值&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/maxi
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>21. 合并两个有序链表</title>
    <link href="https://liuhuaqiang.top/2020/05/07/21.he-bing-liang-ge-you-xu-lian-biao/"/>
    <id>https://liuhuaqiang.top/2020/05/07/21.he-bing-liang-ge-you-xu-lian-biao/</id>
    <published>2020-05-07T13:24:27.000Z</published>
    <updated>2020-05-10T04:03:50.344Z</updated>
    
    <content type="html"><![CDATA[<h4 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21. 合并两个有序链表"></a><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">21. 合并两个有序链表</a></h4><p>将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p>示例：</p><p>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-two-sorted-lists</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//普通写法</span><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode ret<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode head<span class="token operator">=</span>ret<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span>l2<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token operator">></span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                head<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>                l2<span class="token operator">=</span>l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                head<span class="token punctuation">.</span>next<span class="token operator">=</span>l1<span class="token punctuation">;</span>                l1<span class="token operator">=</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//递归写法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            l1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            l2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>作者：LeetCode链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>merge<span class="token operator">-</span>two<span class="token operator">-</span>sorted<span class="token operator">-</span>lists<span class="token operator">/</span>solution<span class="token operator">/</span>he<span class="token operator">-</span>bing<span class="token operator">-</span>liang<span class="token operator">-</span>ge<span class="token operator">-</span>you<span class="token operator">-</span>xu<span class="token operator">-</span>lian<span class="token operator">-</span>biao<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">/</span>来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;21-合并两个有序链表&quot;&gt;&lt;a href=&quot;#21-合并两个有序链表&quot; class=&quot;headerlink&quot; title=&quot;21. 合并两个有序链表&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/merge-two-
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>1366. 通过投票对团队排名</title>
    <link href="https://liuhuaqiang.top/2020/05/07/1366.tong-guo-tou-piao-dui-tuan-dui-pai-ming/"/>
    <id>https://liuhuaqiang.top/2020/05/07/1366.tong-guo-tou-piao-dui-tuan-dui-pai-ming/</id>
    <published>2020-05-07T13:24:27.000Z</published>
    <updated>2020-05-10T04:03:46.150Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1366-通过投票对团队排名"><a href="#1366-通过投票对团队排名" class="headerlink" title="1366. 通过投票对团队排名"></a><a href="https://leetcode-cn.com/problems/rank-teams-by-votes/" target="_blank" rel="noopener">1366. 通过投票对团队排名</a></h1><p>现在有一个特殊的排名系统，依据参赛团队在投票人心中的次序进行排名，每个投票者都需要按从高到低的顺序对参与排名的所有团队进行排位。</p><p>排名规则如下：</p><p>参赛团队的排名次序依照其所获「排位第一」的票的多少决定。如果存在多个团队并列的情况，将继续考虑其「排位第二」的票的数量。以此类推，直到不再存在并列的情况。<br>如果在考虑完所有投票情况后仍然出现并列现象，则根据团队字母的字母顺序进行排名。<br>给你一个字符串数组 votes 代表全体投票者给出的排位情况，请你根据上述排名规则对所有参赛团队进行排名。</p><p>请你返回能表示按排名系统 排序后 的所有团队排名的字符串。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/rank-teams-by-votes" target="_blank" rel="noopener">https://leetcode-cn.com/problems/rank-teams-by-votes</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><pre class=" language-python"><code class="language-python">int cnt<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool cmp<span class="token punctuation">(</span>char a<span class="token punctuation">,</span>char b<span class="token punctuation">)</span><span class="token punctuation">{</span>    a<span class="token operator">-=</span><span class="token string">'A'</span><span class="token punctuation">;</span>    b<span class="token operator">-=</span><span class="token string">'A'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>cnt<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>cnt<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token operator">&lt;</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    string rankTeams<span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> votes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        int n <span class="token operator">=</span> votes<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        memset<span class="token punctuation">(</span>cnt<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>sizeof cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>        int len <span class="token operator">=</span> votes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cnt<span class="token punctuation">[</span>votes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        string s<span class="token operator">=</span>votes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        sort<span class="token punctuation">(</span>s<span class="token punctuation">.</span>begin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1366-通过投票对团队排名&quot;&gt;&lt;a href=&quot;#1366-通过投票对团队排名&quot; class=&quot;headerlink&quot; title=&quot;1366. 通过投票对团队排名&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/r
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>22. 括号生成</title>
    <link href="https://liuhuaqiang.top/2020/05/07/22.gua-hao-sheng-cheng/"/>
    <id>https://liuhuaqiang.top/2020/05/07/22.gua-hao-sheng-cheng/</id>
    <published>2020-05-07T13:24:27.000Z</published>
    <updated>2020-05-10T04:05:11.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="22-括号生成"><a href="#22-括号生成" class="headerlink" title="22. 括号生成"></a><a href="https://leetcode-cn.com/problems/generate-parentheses/" target="_blank" rel="noopener">22. 括号生成</a></h1><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。</p><p>示例：</p><p>输入：n = 3<br>输出：[<br>       “((()))”,<br>       “(()())”,<br>       “(())()”,<br>       “()(())”,<br>       “()()()”<br>     ]</p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ret<span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>public<span class="token punctuation">:</span>    bool <span class="token function">panduan</span><span class="token punctuation">(</span>string ss<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> booll <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                booll<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                booll<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>booll<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> false<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>booll<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>string tem<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tem<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">panduan</span><span class="token punctuation">(</span>tem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tem<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>tem<span class="token operator">+</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>tem<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token function">func</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>res<span class="token punctuation">,</span> string str<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">func</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> str <span class="token operator">+</span> <span class="token string">'('</span><span class="token punctuation">,</span> l<span class="token number">-1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">></span> l<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">func</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> str <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>作者：chengm15链接：https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>generate<span class="token operator">-</span>parentheses<span class="token operator">/</span>solution<span class="token operator">/</span>zui<span class="token operator">-</span>ji<span class="token operator">-</span>ben<span class="token operator">-</span>de<span class="token operator">-</span>dfs<span class="token operator">-</span>by<span class="token operator">-</span>chengm15<span class="token operator">/</span>来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;22-括号生成&quot;&gt;&lt;a href=&quot;#22-括号生成&quot; class=&quot;headerlink&quot; title=&quot;22. 括号生成&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/generate-parentheses/&quot;
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>23. 合并K个排序链表</title>
    <link href="https://liuhuaqiang.top/2020/05/07/23.he-bing-k-ge-pai-xu-lian-biao/"/>
    <id>https://liuhuaqiang.top/2020/05/07/23.he-bing-k-ge-pai-xu-lian-biao/</id>
    <published>2020-05-07T13:24:27.000Z</published>
    <updated>2020-05-10T04:03:38.329Z</updated>
    
    <content type="html"><![CDATA[<h4 id="23-合并K个排序链表"><a href="#23-合并K个排序链表" class="headerlink" title="23. 合并K个排序链表"></a><a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/" target="_blank" rel="noopener">23. 合并K个排序链表</a></h4><p>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p><p>示例:</p><p>输入:<br>[<br>  1-&gt;4-&gt;5,<br>  1-&gt;3-&gt;4,<br>  2-&gt;6<br>]<br>输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/merge-k-sorted-lists" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-k-sorted-lists</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">mergeKLists</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">[</span><span class="token punctuation">]</span> lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode ret<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">99999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode head<span class="token operator">=</span>ret<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>lists<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                head <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode ret<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode head<span class="token operator">=</span>ret<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span>l2<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token operator">></span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                head<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>                l2<span class="token operator">=</span>l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                head<span class="token punctuation">.</span>next<span class="token operator">=</span>l1<span class="token punctuation">;</span>                l1<span class="token operator">=</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;23-合并K个排序链表&quot;&gt;&lt;a href=&quot;#23-合并K个排序链表&quot; class=&quot;headerlink&quot; title=&quot;23. 合并K个排序链表&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/merge-k-so
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>1155. 掷骰子的N种方法</title>
    <link href="https://liuhuaqiang.top/2020/05/07/1155.zhi-tou-zi-de-n-chong-fang-fa/"/>
    <id>https://liuhuaqiang.top/2020/05/07/1155.zhi-tou-zi-de-n-chong-fang-fa/</id>
    <published>2020-05-07T13:24:27.000Z</published>
    <updated>2020-05-15T13:03:21.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1155-掷骰子的N种方法"><a href="#1155-掷骰子的N种方法" class="headerlink" title="1155. 掷骰子的N种方法"></a><a href="https://leetcode-cn.com/problems/number-of-dice-rolls-with-target-sum/" target="_blank" rel="noopener">1155. 掷骰子的N种方法</a></h1><p>这里有 d 个一样的骰子，每个骰子上都有 f 个面，分别标号为 1, 2, …, f。</p><p>我们约定：掷骰子的得到总点数为各骰子面朝上的数字的总和。</p><p>如果需要掷出的总点数为 target，请你计算出有多少种不同的组合情况（所有的组合情况总共有 f^d 种），模 10^9 + 7 后返回。</p><pre class=" language-c"><code class="language-c">示例 <span class="token number">1</span>：输入：d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">3</span>输出：<span class="token number">1</span>示例 <span class="token number">2</span>：输入：d <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">7</span>输出：<span class="token number">6</span>示例 <span class="token number">3</span>：输入：d <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">10</span>输出：<span class="token number">1</span>示例 <span class="token number">4</span>：输入：d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">3</span>输出：<span class="token number">0</span>示例 <span class="token number">5</span>：输入：d <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">500</span>输出：<span class="token number">222616187</span>来源：力扣（LeetCode）链接：https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>number<span class="token operator">-</span>of<span class="token operator">-</span>dice<span class="token operator">-</span>rolls<span class="token operator">-</span>with<span class="token operator">-</span>target<span class="token operator">-</span>sum著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">numRollsToTarget</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">,</span> <span class="token keyword">int</span> f<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">&lt;</span>d <span class="token operator">||</span> target<span class="token operator">></span>d<span class="token operator">*</span>f<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> f<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> d<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> f<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> f<span class="token operator">*</span>d<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>k<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算结果</span>    <span class="token keyword">int</span> vis<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标记是否已经进行了计算</span>    <span class="token keyword">int</span> F<span class="token punctuation">;</span>    <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">,</span><span class="token keyword">int</span> tar<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//第d次选择，剩余tar</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">></span>tar<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>d <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tar <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>tar<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>tar<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果已经进行了计算，就返回结果</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>F <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;=</span>tar<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token operator">+</span><span class="token operator">=</span><span class="token function">DFS</span><span class="token punctuation">(</span>d<span class="token number">-1</span><span class="token punctuation">,</span>tar<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>            ans<span class="token operator">%</span><span class="token operator">=</span>mod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vis<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>tar<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//已经算出了结果，做一个标记</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>tar<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记忆化</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">numRollsToTarget</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">,</span> <span class="token keyword">int</span> f<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        F <span class="token operator">=</span> f<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">DFS</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1155-掷骰子的N种方法&quot;&gt;&lt;a href=&quot;#1155-掷骰子的N种方法&quot; class=&quot;headerlink&quot; title=&quot;1155. 掷骰子的N种方法&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/numb
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
