<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>未闻丶死讯的博客</title>
  
  <subtitle>欢迎你来到异次元（中二）</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liuhuaqiang.top/"/>
  <updated>2020-06-24T02:21:07.442Z</updated>
  <id>https://liuhuaqiang.top/</id>
  
  <author>
    <name>anlen123</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>16.最接近的三数之和</title>
    <link href="https://liuhuaqiang.top/2020/06/24/16-zui-jie-jin-de-san-shu-zhi-he/"/>
    <id>https://liuhuaqiang.top/2020/06/24/16-zui-jie-jin-de-san-shu-zhi-he/</id>
    <published>2020-06-24T02:19:53.000Z</published>
    <updated>2020-06-24T02:21:07.442Z</updated>
    
    <content type="html"><![CDATA[<h4 id="16-最接近的三数之和"><a href="#16-最接近的三数之和" class="headerlink" title="16. 最接近的三数之和"></a><a href="https://leetcode-cn.com/problems/3sum-closest/" target="_blank" rel="noopener">16. 最接近的三数之和</a></h4><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p><p>示例：</p><p>输入：nums = [-1,2,1,-4], target = 1<br>输出：2<br>解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/3sum-closest" target="_blank" rel="noopener">https://leetcode-cn.com/problems/3sum-closest</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">threeSumClosest</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">99999999</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> target<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>target<span class="token operator">-</span>sum<span class="token punctuation">)</span><span class="token operator">&lt;</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>ans<span class="token operator">-</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    ans <span class="token operator">=</span> sum<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> k0 <span class="token operator">=</span> k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>j<span class="token operator">&lt;</span>k0 <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>k0<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        k0<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    k <span class="token operator">=</span> k0<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> j0 <span class="token operator">=</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>j0<span class="token operator">&lt;</span>k <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j0<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        j0<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    j <span class="token operator">=</span> j0<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;16-最接近的三数之和&quot;&gt;&lt;a href=&quot;#16-最接近的三数之和&quot; class=&quot;headerlink&quot; title=&quot;16. 最接近的三数之和&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/3sum-close
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="面试题" scheme="https://liuhuaqiang.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>1014.最佳观光组合</title>
    <link href="https://liuhuaqiang.top/2020/06/17/1014-zui-jia-guan-guang-zu-he/"/>
    <id>https://liuhuaqiang.top/2020/06/17/1014-zui-jia-guan-guang-zu-he/</id>
    <published>2020-06-17T01:38:43.000Z</published>
    <updated>2020-06-17T01:40:32.766Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1014-最佳观光组合"><a href="#1014-最佳观光组合" class="headerlink" title="1014. 最佳观光组合"></a><a href="https://leetcode-cn.com/problems/best-sightseeing-pair/" target="_blank" rel="noopener">1014. 最佳观光组合</a></h4><p>难度中等84</p><p>给定正整数数组 <code>A</code>，<code>A[i]</code> 表示第 <code>i</code> 个观光景点的评分，并且两个景点 <code>i</code> 和 <code>j</code> 之间的距离为 <code>j - i</code>。</p><p>一对景点（<code>i &lt; j</code>）组成的观光组合的得分为（<code>A[i] + A[j] + i - j</code>）：景点的评分之和<strong>减去</strong>它们两者之间的距离。</p><p>返回一对观光景点能取得的最高分。</p><p><strong>示例：</strong></p><pre><code>输入：[8,1,5,2,6]输出：11解释：i = 0, j = 2, A[i] + A[j] + i - j = 8 + 5 + 0 - 2 = 11</code></pre><p><strong>提示：</strong></p><ol><li><p><code>2 &lt;= A.length &lt;= 50000</code></p></li><li><p><code>1 &lt;= A[i] &lt;= 1000</code></p><pre class=" language-c"><code class="language-c">解题思路我们考虑从前往后枚举j来统计答案，对于每个观光景点j唁<span class="token punctuation">,</span>我们需要遍历<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>j一<span class="token number">1</span><span class="token punctuation">]</span>的观光景点i来计算组成观光组合<span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span>得分的最大值cntj来作为第j个观光景点的值<span class="token punctuation">,</span>那么后的答案无疑就是所有观光景点值的最大值<span class="token punctuation">,</span>即maxj<span class="token operator">-</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">.</span>n<span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">{</span>cntj<span class="token punctuation">}</span>。但是枚举j要<span class="token function">O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>的时间复杂度<span class="token punctuation">,</span>遍历<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>j一<span class="token number">1</span><span class="token punctuation">]</span>的观光景点i也需要<span class="token function">O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>的时间复杂度<span class="token punctuation">,</span>因此该方法总复杂度为<span class="token function">O</span><span class="token punctuation">(</span>n2 <span class="token punctuation">)</span><span class="token punctuation">,</span>不能通过所有测试用例，我们需要进一步优化时间复杂度。我们回过头来看得分公式，我们可以将其拆分成A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span> i和A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span> j两部分<span class="token punctuation">,</span>这样对于统计景点j答案的时候<span class="token punctuation">,</span>纡A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span> j固定不变的，因此最大化A<span class="token punctuation">[</span>i<span class="token operator">+</span>i<span class="token operator">+</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span> j的值其实就等价于求<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>中A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>i的最大值mx<span class="token punctuation">,</span>景点j的答案即为mx<span class="token operator">+</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span> j。而mx的值我们只要从前往后枚举j的时候同时维护即可<span class="token punctuation">,</span>这样每次枚举景点j的时候，寻找使得得分最大的i就能从<span class="token function">O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>降至<span class="token function">0</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>的时间复杂度，总时间复杂度就能从<span class="token function">O</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span>降至<span class="token function">O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>。</code></pre></li></ol><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">maxScoreSightseeingPair</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mx <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> mx <span class="token operator">+</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 边遍历边维护</span>            mx <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mx<span class="token punctuation">,</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1014-最佳观光组合&quot;&gt;&lt;a href=&quot;#1014-最佳观光组合&quot; class=&quot;headerlink&quot; title=&quot;1014. 最佳观光组合&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/best-sight
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>15.三数之和</title>
    <link href="https://liuhuaqiang.top/2020/06/12/15-san-shu-zhi-he/"/>
    <id>https://liuhuaqiang.top/2020/06/12/15-san-shu-zhi-he/</id>
    <published>2020-06-12T03:12:19.000Z</published>
    <updated>2020-06-12T03:13:57.172Z</updated>
    
    <content type="html"><![CDATA[<h4 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">15. 三数之和</a></h4><p>难度中等2215</p><p>给你一个包含 <em>n</em> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <em>a，b，c ，*使得 *a + b + c =</em> 0 ？请你找出所有满足条件且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p><strong>示例：</strong></p><pre><code>给定数组 nums = [-1, 0, 1, 2, -1, -4]，满足要求的三元组集合为：[  [-1, 0, 1],  [-1, -1, 2]]</code></pre><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">threeSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> s<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> l <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> r <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    l<span class="token operator">++</span><span class="token punctuation">;</span>                    r<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    l<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    r<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">ret</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>先确定<span class="token punctuation">,</span>第一位数字<span class="token punctuation">,</span><span class="token punctuation">,</span>后面就是求TwoSum的方法<span class="token punctuation">,</span><span class="token punctuation">,</span>双指针<span class="token punctuation">,</span>先用set存<span class="token punctuation">,</span><span class="token punctuation">,</span>最后转换成vector</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;15-三数之和&quot;&gt;&lt;a href=&quot;#15-三数之和&quot; class=&quot;headerlink&quot; title=&quot;15. 三数之和&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/3sum/&quot; target=&quot;_blank&quot;
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="面试题" scheme="https://liuhuaqiang.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>把python脚本当作.sh脚本使用</title>
    <link href="https://liuhuaqiang.top/2020/06/07/ba-python-jiao-ben-dang-zuo-sh-jiao-ben-shi-yong/"/>
    <id>https://liuhuaqiang.top/2020/06/07/ba-python-jiao-ben-dang-zuo-sh-jiao-ben-shi-yong/</id>
    <published>2020-06-07T02:52:02.000Z</published>
    <updated>2020-06-07T02:55:21.568Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux运行python脚本"><a href="#linux运行python脚本" class="headerlink" title="linux运行python脚本"></a>linux运行python脚本</h1><pre class=" language-python"><code class="language-python">a<span class="token punctuation">.</span>py<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2333"</span><span class="token punctuation">)</span></code></pre><p>需要这样</p><pre class=" language-bash"><code class="language-bash">python a.py</code></pre><p>但是现在</p><pre class=" language-pythn"><code class="language-pythn">首先查找python的位置which python : /usr/bin/python编辑a.py文件在头前加上#!/usr/bin/env python这句话的意义是以这条命令来运行此文件第二步需要给执行权限chmod +x a.py然后,只需要./a.py就可以运行python文件了.</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;linux运行python脚本&quot;&gt;&lt;a href=&quot;#linux运行python脚本&quot; class=&quot;headerlink&quot; title=&quot;linux运行python脚本&quot;&gt;&lt;/a&gt;linux运行python脚本&lt;/h1&gt;&lt;pre class=&quot; language
      
    
    </summary>
    
    
    
      <category term="linux" scheme="https://liuhuaqiang.top/tags/linux/"/>
    
      <category term="学习小技巧" scheme="https://liuhuaqiang.top/tags/%E5%AD%A6%E4%B9%A0%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>238.除自身以外数组的乘积</title>
    <link href="https://liuhuaqiang.top/2020/06/04/238-chu-zi-shen-yi-wai-shu-zu-de-cheng-ji/"/>
    <id>https://liuhuaqiang.top/2020/06/04/238-chu-zi-shen-yi-wai-shu-zu-de-cheng-ji/</id>
    <published>2020-06-04T02:18:25.000Z</published>
    <updated>2020-06-04T02:21:08.018Z</updated>
    
    <content type="html"><![CDATA[<h4 id="238-除自身以外数组的乘积"><a href="#238-除自身以外数组的乘积" class="headerlink" title="238. 除自身以外数组的乘积"></a><a href="https://leetcode-cn.com/problems/product-of-array-except-self/" target="_blank" rel="noopener">238. 除自身以外数组的乘积</a></h4><pre class=" language-bash"><code class="language-bash">给你一个长度为 n 的整数数组 nums，其中 n <span class="token operator">></span> 1，返回输出数组 output ，其中 output<span class="token punctuation">[</span>i<span class="token punctuation">]</span> 等于 nums 中除 nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> 之外其余各元素的乘积。示例:输入: <span class="token punctuation">[</span>1,2,3,4<span class="token punctuation">]</span>输出: <span class="token punctuation">[</span>24,12,8,6<span class="token punctuation">]</span>提示：题目数据保证数组之中任意元素的全部前缀元素和后缀（甚至是整个数组）的乘积都在 32 位整数范围内。说明: 请不要使用除法，且在 O<span class="token punctuation">(</span>n<span class="token punctuation">)</span> 时间复杂度内完成此题。进阶：你可以在常数空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组不被视为额外空间。）</code></pre><pre class=" language-c"><code class="language-c">用前后缀和可解决    class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">productExceptSelf</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">pre</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">next</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ret<span class="token punctuation">;</span>        pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span>n<span class="token number">-2</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>next<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>n<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">*</span>next<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>进阶</p><p>思路</p><p>尽管上面的方法已经能够很好的解决这个问题，但是空间复杂度并不为常数。</p><p>由于输出数组不算在空间复杂度内，那么我们可以将 L 或 R 数组用输出数组来计算。先把输出数组当作 L 数组来计算，然后再动态构造 R 数组得到结果。让我们来看看基于这个思想的算法。</p><p>算法</p><p>初始化 answer 数组，对于给定索引 i，answer[i] 代表的是 i 左侧所有数字的乘积。<br>构造方式与之前相同，只是我们试图节省空间，先把 answer 作为方法一的 L 数组。<br>这种方法的唯一变化就是我们没有构造 R 数组。而是用一个遍历来跟踪右边元素的乘积。并更新数组 answer[i]=answer[i]<em>Ranswer[i]=answer[i]∗R。然后 RR 更新为 R=R</em>nums[i]R=R∗nums[i]，其中变量 RR 表示的就是索引右侧数字的乘积。</p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">productExceptSelf</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ret</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ret<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>ret<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ret<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">*</span>sum<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sum <span class="token operator">*</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;238-除自身以外数组的乘积&quot;&gt;&lt;a href=&quot;#238-除自身以外数组的乘积&quot; class=&quot;headerlink&quot; title=&quot;238. 除自身以外数组的乘积&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/p
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://liuhuaqiang.top/2020/06/03/mysql-bi-ji/"/>
    <id>https://liuhuaqiang.top/2020/06/03/mysql-bi-ji/</id>
    <published>2020-06-03T02:38:52.705Z</published>
    <updated>2020-06-04T03:37:23.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><h2 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h2><pre class=" language-sql"><code class="language-sql">mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p </code></pre><h2 id="显示数据库表"><a href="#显示数据库表" class="headerlink" title="显示数据库表"></a>显示数据库表</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span></code></pre><h2 id="选中一个数据库"><a href="#选中一个数据库" class="headerlink" title="选中一个数据库"></a>选中一个数据库</h2><pre class=" language-bash"><code class="language-bash">use 数据库的名字</code></pre><h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> admin<span class="token punctuation">;</span></code></pre><h2 id="退出数据库"><a href="#退出数据库" class="headerlink" title="退出数据库"></a>退出数据库</h2><pre class=" language-bash"><code class="language-bash"><span class="token keyword">exit</span></code></pre><h2 id="创建一个数据库"><a href="#创建一个数据库" class="headerlink" title="创建一个数据库"></a>创建一个数据库</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> test<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">TABLE</span> pet<span class="token punctuation">(</span>                   name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   owner <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   specise <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   sex CHAR<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   brith <span class="token keyword">DATE</span><span class="token punctuation">,</span>                   death <span class="token keyword">DATE</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="查看数据库中的数据表"><a href="#查看数据库中的数据表" class="headerlink" title="查看数据库中的数据表"></a>查看数据库中的数据表</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span></code></pre><h2 id="查看表的结构"><a href="#查看表的结构" class="headerlink" title="查看表的结构"></a>查看表的结构</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">desc</span> pet</code></pre><h2 id="往数据表中添加记录"><a href="#往数据表中添加记录" class="headerlink" title="往数据表中添加记录"></a>往数据表中添加记录</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> pet<span class="token punctuation">(</span>name<span class="token punctuation">,</span>owner<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'xx'</span><span class="token punctuation">,</span><span class="token string">'cc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> pet <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">"小黄"</span><span class="token punctuation">,</span><span class="token string">"刘华强"</span><span class="token punctuation">,</span><span class="token string">"xx"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="MySql常用数据类型"><a href="#MySql常用数据类型" class="headerlink" title="MySql常用数据类型"></a>MySql常用数据类型</h1><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">范围（有符号）</th><th align="left">范围（无符号）</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">1 byte</td><td align="left">(-128，127)</td><td align="left">(0，255)</td><td align="left">小整数值</td></tr><tr><td align="left">SMALLINT</td><td align="left">2 bytes</td><td align="left">(-32 768，32 767)</td><td align="left">(0，65 535)</td><td align="left">大整数值</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3 bytes</td><td align="left">(-8 388 608，8 388 607)</td><td align="left">(0，16 777 215)</td><td align="left">大整数值</td></tr><tr><td align="left">INT或INTEGER</td><td align="left">4 bytes</td><td align="left">(-2 147 483 648，2 147 483 647)</td><td align="left">(0，4 294 967 295)</td><td align="left">大整数值</td></tr><tr><td align="left">BIGINT</td><td align="left">8 bytes</td><td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td align="left">(0，18 446 744 073 709 551 615)</td><td align="left">极大整数值</td></tr><tr><td align="left">FLOAT</td><td align="left">4 bytes</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td align="left">单精度 浮点数值</td></tr><tr><td align="left">DOUBLE</td><td align="left">8 bytes</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">双精度 浮点数值</td></tr><tr><td align="left">DECIMAL</td><td align="left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td align="left">依赖于M和D的值</td><td align="left">依赖于M和D的值</td><td align="left">小数值</td></tr></tbody></table><table><thead><tr><th align="left">类型</th><th align="left">大小 ( bytes)</th><th align="left">范围</th><th align="left">格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">DATE</td><td align="left">3</td><td align="left">1000-01-01/9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">TIME</td><td align="left">3</td><td align="left">‘-838:59:59’/‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left">YEAR</td><td align="left">1</td><td align="left">1901/2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">DATETIME</td><td align="left">8</td><td align="left">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td align="left">YYYY-MM-DD HH:MM:SS</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">4</td><td align="left">1970-01-01 00:00:00/2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="left">YYYYMMDD HHMMSS</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><table><thead><tr><th>CHAR</th><th>0-255 bytes</th><th>定长字符串</th></tr></thead><tbody><tr><td>VARCHAR</td><td>0-65535 bytes</td><td>变长字符串</td></tr><tr><td>TINYBLOB</td><td>0-255 bytes</td><td>不超过 255 个字符的二进制字符串</td></tr><tr><td>TINYTEXT</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535 bytes</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16 777 215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16 777 215 bytes</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4 294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据:"></a>修改数据:</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> tableName <span class="token keyword">SET</span> 字段<span class="token number">1</span><span class="token operator">=</span>值<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token operator">=</span>值<span class="token number">2</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">WHERE</span> 条件<span class="token punctuation">;</span></code></pre><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 条件</code></pre><h1 id="约束条件"><a href="#约束条件" class="headerlink" title="约束条件"></a>约束条件</h1><h2 id="1-主键约束"><a href="#1-主键约束" class="headerlink" title="1.主键约束:"></a><strong>1.主键约束:</strong></h2><p>它能够<strong>唯一确定</strong>一张表中的一条记录,增加主键约束之后,就可以使得字段不重复而且不为空  </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span><span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 张三 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span>运行<span class="token keyword">DESCRIBE</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span>发现 id是不可以为<span class="token boolean">null</span> 而且 <span class="token keyword">key</span>的值 也变为:PRI<span class="token punctuation">(</span><span class="token keyword">primary</span><span class="token punctuation">)</span></code></pre><h2 id="2-复合主键"><a href="#2-复合主键" class="headerlink" title="2.复合主键:"></a>2.复合主键:</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> user2<span class="token punctuation">(</span>    id <span class="token keyword">INT</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    password <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>运行<span class="token keyword">DESCRIBE</span> user2<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field    <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> id       <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> name     <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> password <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------+-----+---------+-------+</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user2 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'老王'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user2 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'老王'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+----------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span> password <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+----------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 老王 <span class="token operator">|</span> <span class="token number">123456</span>   <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 老王 <span class="token operator">|</span> <span class="token number">123456</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+----------+</span>说明了复合主键只要所有的字段都不是相同的情况下可以允许其中的字段重复:<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user2 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'老李'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user2<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+----------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span> password <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+----------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 老李 <span class="token operator">|</span> <span class="token number">123456</span>   <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 老王 <span class="token operator">|</span> <span class="token number">123456</span>   <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 老王 <span class="token operator">|</span> <span class="token number">123456</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+----------+</span>场景:表中有班级号以及学生座位号<span class="token punctuation">,</span>我们可以用班级号<span class="token operator">+</span>学生的座位号可以准确的定位一个学生<span class="token punctuation">,</span>如:<span class="token punctuation">(</span><span class="token number">1</span>班<span class="token number">5</span>号可以准确的确定一个学生<span class="token punctuation">)</span></code></pre><h2 id="3-自增约束"><a href="#3-自增约束" class="headerlink" title="3.自增约束:"></a>3.自增约束:</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> user3<span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>运行<span class="token keyword">DESCRIBE</span> user3<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user3<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user3<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 张三 <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 李四 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span>没有自定义id值 但是自动生成了id</code></pre><h2 id="4-唯一约束"><a href="#4-唯一约束" class="headerlink" title="4.唯一约束:"></a>4.唯一约束:</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> user5<span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>运行 <span class="token keyword">DESCRIBE</span> user5<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span>新增name为唯一约束:<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user5 <span class="token keyword">ADD</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>运行 <span class="token keyword">DESCRIBE</span> user5<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span> UNI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span>测试:插入数据<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user5<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'cc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>运行 <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user5<span class="token punctuation">;</span> 查看结果:<span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">cc</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span>再次插入<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user5<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'cc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>出现:ERROR <span class="token number">1062</span> <span class="token punctuation">(</span><span class="token number">23000</span><span class="token punctuation">)</span>: Duplicate entry <span class="token string">'cc'</span> <span class="token keyword">for</span> <span class="token keyword">key</span> <span class="token string">'name'</span>换个试试 <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user5<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>运行 <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user5<span class="token punctuation">;</span> 查看结果:<span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">aa</span>   <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">cc</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span>总结一下:    主键约束<span class="token punctuation">(</span><span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">)</span>中包含了唯一约束场景:业务需求:设计一张用户注册表<span class="token punctuation">,</span>用户姓名必须要用手机号来注册<span class="token punctuation">,</span>而且手机号和用户名称都不能为空<span class="token punctuation">,</span>那么:<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> user_test<span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span><span class="token string">'主键id'</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span><span class="token string">'用户姓名,不能为空'</span><span class="token punctuation">,</span>    phone_number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span><span class="token string">'用户手机,不能重复且不能为空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>运行 <span class="token keyword">DESCRIBE</span> user_test<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field        <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> id           <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> name         <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> phone_number <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> UNI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------+-------------+------+-----+---------+----------------+</span>这样的话就达到了每一个手机号都只能出现一次<span class="token punctuation">,</span>达到了每个手机号只能被注册一次<span class="token punctuation">.</span>用户姓名可以重复<span class="token punctuation">,</span>但是手机号码却不能重复<span class="token punctuation">,</span>复合正常的逻辑需求</code></pre><h2 id="5-非空约束"><a href="#5-非空约束" class="headerlink" title="5.非空约束:"></a>5.非空约束:</h2><pre class=" language-sql"><code class="language-sql">在上面的蓝字中已经添加了非空约束: <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>name和phone_number都设置了非空<span class="token punctuation">,</span>先只设置name参数不设置phone_number参数试一试<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user_test <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>会出现Field <span class="token string">'phone_number'</span> doesn<span class="token string">'t have a default value两个非空参数一起设置:INSERT INTO user_test (name,phone_number) VALUES ('</span>张三<span class="token string">','</span><span class="token number">12345678901</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span> phone_number <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 张三 <span class="token operator">|</span> <span class="token number">12345678901</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+</span></code></pre><h2 id="6-默认约束"><a href="#6-默认约束" class="headerlink" title="6.默认约束"></a>6.默认约束</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> user6<span class="token punctuation">(</span>   id <span class="token keyword">int</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span><span class="token string">'主键id'</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span><span class="token string">'用户姓名不能为空'</span><span class="token punctuation">,</span>    phone_number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span><span class="token string">'用户手机号,不能为空'</span><span class="token punctuation">,</span>    <span class="token keyword">status</span> <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span><span class="token string">'用户状态0:启用 1:禁封 默认:0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>运行<span class="token keyword">DESCRIBE</span> user6<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field        <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> id           <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> name         <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> phone_number <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">status</span>       <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token number">0</span>       <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------+-------------+------+-----+---------+----------------+</span>插入数据:<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user6<span class="token punctuation">(</span>name<span class="token punctuation">,</span>phone_number<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user6<span class="token punctuation">(</span>name<span class="token punctuation">,</span>phone_number<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'bb'</span><span class="token punctuation">,</span><span class="token string">'1234'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user6<span class="token punctuation">(</span>name<span class="token punctuation">,</span>phone_number<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'cc'</span><span class="token punctuation">,</span><span class="token string">'1263456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>查看数据:<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user6<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+--------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span> phone_number <span class="token operator">|</span> <span class="token keyword">status</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+--------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">aa</span>   <span class="token operator">|</span> <span class="token number">123</span>          <span class="token operator">|</span>      <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">bb</span>   <span class="token operator">|</span> <span class="token number">1234</span>         <span class="token operator">|</span>      <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">cc</span>   <span class="token operator">|</span> <span class="token number">1263456</span>      <span class="token operator">|</span>      <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+--------+</span>我们没有设置<span class="token keyword">status</span>的值<span class="token punctuation">,</span>但是给我们创建了默认值 <span class="token number">0</span><span class="token punctuation">.</span>应用场景:业务需求:找正常的用户<span class="token punctuation">,</span>对这些正常用户进行发放优惠卷或者积分之类的东西<span class="token punctuation">,</span>而被禁封的用户我们不让其参加多动<span class="token punctuation">.</span>我们想要封用户只要将<span class="token keyword">status</span>的值从<span class="token number">0</span>改为<span class="token number">1</span>就行了<span class="token punctuation">,</span>当然我们取用户的时候必须要先判断<span class="token keyword">status</span>是否是<span class="token number">0</span><span class="token punctuation">.</span>若是<span class="token number">1</span><span class="token punctuation">.</span>说明该用户已经被禁封<span class="token punctuation">.</span>先封手机号为<span class="token string">'1234'</span>的用户:<span class="token keyword">UPDATE</span> user6 <span class="token keyword">SET</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">WHERE</span> phone_number<span class="token operator">=</span> <span class="token string">'1234'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user6<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+--------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span> phone_number <span class="token operator">|</span> <span class="token keyword">status</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+--------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">aa</span>   <span class="token operator">|</span> <span class="token number">123</span>          <span class="token operator">|</span>      <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">bb</span>   <span class="token operator">|</span> <span class="token number">1234</span>         <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">cc</span>   <span class="token operator">|</span> <span class="token number">1263456</span>      <span class="token operator">|</span>      <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+--------+</span><span class="token keyword">status</span>为<span class="token number">1</span><span class="token punctuation">,</span>说明用户已经被封<span class="token punctuation">,</span>该用户不可以参加活动我们取用户的时候加上<span class="token keyword">status</span>的判断<span class="token punctuation">,</span>如:<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user6 <span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+--------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span> phone_number <span class="token operator">|</span> <span class="token keyword">status</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+--------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">aa</span>   <span class="token operator">|</span> <span class="token number">123</span>          <span class="token operator">|</span>      <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">cc</span>   <span class="token operator">|</span> <span class="token number">1263456</span>      <span class="token operator">|</span>      <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+--------+</span></code></pre><h2 id="7-外键约束"><a href="#7-外键约束" class="headerlink" title="7.外键约束"></a>7.外键约束</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> classes<span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span><span class="token string">'班级表id'</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span><span class="token string">'班级名称'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>运行<span class="token keyword">DESCRIBE</span> classes<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span>   id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span><span class="token string">'学生表id'</span><span class="token punctuation">,</span>   name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span><span class="token string">'学生姓名'</span><span class="token punctuation">,</span>    class_id <span class="token keyword">int</span> <span class="token keyword">COMMENT</span><span class="token string">'教室id,这张表中的class_id是classes表中id的值'</span><span class="token punctuation">,</span>    <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>class_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> classes<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//FOREIGN :外来  REFERENCES:应用,参考</span>运行<span class="token keyword">DESCRIBE</span> student<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field    <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> id       <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> name     <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> class_id <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> YES  <span class="token operator">|</span> MUL <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------+-----+---------+----------------+</span>班级插入数据:<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> CLASSES <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'一班'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> CLASSES <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'二班'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> CLASSES <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'三班'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> CLASSES <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'四班'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>查看数据 <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> classes<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 一班 <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 二班 <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 三班 <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 四班 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span>学生插入数据:<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>name<span class="token punctuation">,</span>class_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'小赵'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>name<span class="token punctuation">,</span>class_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'小钱'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>name<span class="token punctuation">,</span>class_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'小孙'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>name<span class="token punctuation">,</span>class_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'小李'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>查看数据 <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+----------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span> class_id <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+----------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 小赵 <span class="token operator">|</span>        <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 小钱 <span class="token operator">|</span>        <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 小孙 <span class="token operator">|</span>        <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 小李 <span class="token operator">|</span>        <span class="token number">4</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+----------+</span>若是像插入班级为<span class="token number">5</span>的数据 如:<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>name<span class="token punctuation">,</span>class_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'小周'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>报错: Cannot <span class="token keyword">add</span> <span class="token operator">or</span> <span class="token keyword">update</span> <span class="token number">a</span> child <span class="token keyword">row</span>我们删除正在被学生表引用的<span class="token string">'四班'</span>试试:<span class="token keyword">DELETE</span> classes <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'四班'</span><span class="token punctuation">;</span>出现:Cannot <span class="token keyword">delete</span> <span class="token operator">or</span> <span class="token keyword">update</span> <span class="token number">a</span> parent <span class="token keyword">row</span>:不能删除主表中的行我们先删除学生表中的 <span class="token string">'小李'</span>从而解除班级中<span class="token string">'四班'</span>的外键约束<span class="token punctuation">,</span>再来删除<span class="token string">'四班'</span><span class="token punctuation">(</span>因为小李引用了四班<span class="token punctuation">)</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'小李'</span><span class="token punctuation">;</span>再次删除classes表中的<span class="token string">'四班'</span><span class="token punctuation">;</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> classes <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'四班'</span><span class="token punctuation">;</span>最后: <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> classes<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 一班 <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 二班 <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 三班 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token string">'四班'</span>被成功删除<span class="token operator">!</span>总结:<span class="token number">1</span><span class="token punctuation">.</span>主表中没有的数据<span class="token punctuation">,</span>在附表中<span class="token punctuation">,</span>是不可以使用的<span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>主表中记录的数据现在正在被附表所引用<span class="token punctuation">,</span>那么主表中正在被引用的数据不可以被删除<span class="token number">3</span><span class="token punctuation">.</span>若要想删除<span class="token punctuation">,</span>先将附表中的数据删除在删除主表数据<span class="token number">4</span><span class="token punctuation">.</span>对于外键约束大家可以联想 省<span class="token punctuation">,</span>市 来进行联想 <span class="token punctuation">(</span>市必须要依赖于省<span class="token punctuation">,</span>只要省还有一个市在引用<span class="token punctuation">,</span>那么就不可以删除省<span class="token punctuation">,</span>要不然市就没有省了<span class="token punctuation">.</span> 那么我们想删除省<span class="token punctuation">,</span>必须要将该省下所有的市全部删除之后<span class="token punctuation">,</span>才可以删除这个省<span class="token punctuation">)</span></code></pre><h2 id="8-如何建表之后添加主键约束"><a href="#8-如何建表之后添加主键约束" class="headerlink" title="8.如何建表之后添加主键约束"></a>8.如何建表之后添加主键约束</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> user4<span class="token punctuation">(</span>    id <span class="token keyword">INT</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>运行<span class="token keyword">DESCRIBE</span> user4<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span>加入主键约束:<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user4 <span class="token keyword">add</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>再次运行<span class="token keyword">DESCRIBE</span> user4<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span>删除主键约束:ALERT <span class="token keyword">TABLE</span> user4 <span class="token keyword">DROP</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">;</span>运行<span class="token keyword">DESCRIBE</span> user4查看表结构:<span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span>使用<span class="token keyword">modify</span> 修改字段<span class="token punctuation">.</span>添加约束:<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user4 <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">key</span><span class="token punctuation">;</span>使用<span class="token keyword">DESCRIBE</span> user4 查看表结构:<span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span>给主键设置自增长:<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user4 <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">;</span>运行 <span class="token keyword">DESCRIBE</span> user4 查看表结构:<span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span></code></pre><h1 id="MySQL学习笔记"><a href="#MySQL学习笔记" class="headerlink" title="MySQL学习笔记"></a>MySQL学习笔记</h1><h2 id="登录和退出MySQL服务器"><a href="#登录和退出MySQL服务器" class="headerlink" title="登录和退出MySQL服务器"></a>登录和退出MySQL服务器</h2><pre class=" language-shell"><code class="language-shell"># 登录MySQL$ mysql -u root -p12345612# 退出MySQL数据库服务器exit;</code></pre><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><pre class=" language-mysql"><code class="language-mysql">-- 显示所有数据库show databases;-- 创建数据库CREATE DATABASE test;-- 切换数据库use test;-- 显示数据库中的所有表show tables;-- 创建数据表CREATE TABLE pet (    name VARCHAR(20),    owner VARCHAR(20),    species VARCHAR(20),    sex CHAR(1),    birth DATE,    death DATE);-- 查看数据表结构-- describe pet;desc pet;-- 查询表SELECT * from pet;-- 插入数据INSERT INTO pet VALUES ('puffball', 'Diane', 'hamster', 'f', '1990-03-30', NULL);-- 修改数据UPDATE pet SET name = 'squirrel' where owner = 'Diane';-- 删除数据DELETE FROM pet where name = 'squirrel';-- 删除表DROP TABLE myorder;</code></pre><h2 id="建表约束"><a href="#建表约束" class="headerlink" title="建表约束"></a>建表约束</h2><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><pre class=" language-mysql"><code class="language-mysql">-- 主键约束-- 使某个字段不重复且不得为空，确保表内所有数据的唯一性。CREATE TABLE user (    id INT PRIMARY KEY,    name VARCHAR(20));-- 联合主键-- 联合主键中的每个字段都不能为空，并且加起来不能和已设置的联合主键重复。CREATE TABLE user (    id INT,    name VARCHAR(20),    password VARCHAR(20),    PRIMARY KEY(id, name));-- 自增约束-- 自增约束的主键由系统自动递增分配。CREATE TABLE user (    id INT PRIMARY KEY AUTO_INCREMENT,    name VARCHAR(20));-- 添加主键约束-- 如果忘记设置主键，还可以通过SQL语句设置（两种方式）：ALTER TABLE user ADD PRIMARY KEY(id);ALTER TABLE user MODIFY id INT PRIMARY KEY;-- 删除主键ALTER TABLE user drop PRIMARY KEY;</code></pre><h3 id="唯一主键"><a href="#唯一主键" class="headerlink" title="唯一主键"></a>唯一主键</h3><pre class=" language-mysql"><code class="language-mysql">-- 建表时创建唯一主键CREATE TABLE user (    id INT,    name VARCHAR(20),    UNIQUE(name));-- 添加唯一主键-- 如果建表时没有设置唯一建，还可以通过SQL语句设置（两种方式）：ALTER TABLE user ADD UNIQUE(name);ALTER TABLE user MODIFY name VARCHAR(20) UNIQUE;-- 删除唯一主键ALTER TABLE user DROP INDEX name;</code></pre><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><pre class=" language-mysql"><code class="language-mysql">-- 建表时添加非空约束-- 约束某个字段不能为空CREATE TABLE user (    id INT,    name VARCHAR(20) NOT NULL);-- 移除非空约束ALTER TABLE user MODIFY name VARCHAR(20);</code></pre><h3 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h3><pre class=" language-mysql"><code class="language-mysql">-- 建表时添加默认约束-- 约束某个字段的默认值CREATE TABLE user2 (    id INT,    name VARCHAR(20),    age INT DEFAULT 10);-- 移除非空约束ALTER TABLE user MODIFY age INT;</code></pre><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><pre class=" language-mysql"><code class="language-mysql">-- 班级CREATE TABLE classes (    id INT PRIMARY KEY,    name VARCHAR(20));-- 学生表CREATE TABLE students (    id INT PRIMARY KEY,    name VARCHAR(20),    -- 这里的 class_id 要和 classes 中的 id 字段相关联    class_id INT,    -- 表示 class_id 的值必须来自于 classes 中的 id 字段值    FOREIGN KEY(class_id) REFERENCES classes(id));-- 1. 主表（父表）classes 中没有的数据值，在副表（子表）students 中，是不可以使用的；-- 2. 主表中的记录被副表引用时，主表不可以被删除。</code></pre><h2 id="数据库的三大设计范式"><a href="#数据库的三大设计范式" class="headerlink" title="数据库的三大设计范式"></a>数据库的三大设计范式</h2><h3 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h3><p>只要字段值还可以继续拆分，就不满足第一范式。</p><p>范式设计得越详细，对某些实际操作可能会更好，但并非都有好处，需要对项目的实际情况进行设定。</p><h3 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h3><p>在满足第一范式的前提下，其他列都必须完全依赖于主键列。如果出现不完全依赖，只可能发生在联合主键的情况下：</p><pre class=" language-mysql"><code class="language-mysql">-- 订单表CREATE TABLE myorder (    product_id INT,    customer_id INT,    product_name VARCHAR(20),    customer_name VARCHAR(20),    PRIMARY KEY (product_id, customer_id));</code></pre><p>实际上，在这张订单表中，<code>product_name</code> 只依赖于 <code>product_id</code> ，<code>customer_name</code> 只依赖于 <code>customer_id</code> 。也就是说，<code>product_name</code> 和 <code>customer_id</code> 是没用关系的，<code>customer_name</code> 和 <code>product_id</code> 也是没有关系的。</p><p>这就不满足第二范式：其他列都必须完全依赖于主键列！</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE myorder (    order_id INT PRIMARY KEY,    product_id INT,    customer_id INT);CREATE TABLE product (    id INT PRIMARY KEY,    name VARCHAR(20));CREATE TABLE customer (    id INT PRIMARY KEY,    name VARCHAR(20));</code></pre><p>拆分之后，<code>myorder</code> 表中的 <code>product_id</code> 和 <code>customer_id</code> 完全依赖于 <code>order_id</code> 主键，而 <code>product</code> 和 <code>customer</code> 表中的其他字段又完全依赖于主键。满足了第二范式的设计！</p><h3 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h3><p>在满足第二范式的前提下，除了主键列之外，其他列之间不能有传递依赖关系。</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE myorder (    order_id INT PRIMARY KEY,    product_id INT,    customer_id INT,    customer_phone VARCHAR(15));</code></pre><p>表中的 <code>customer_phone</code> 有可能依赖于 <code>order_id</code> 、 <code>customer_id</code> 两列，也就不满足了第三范式的设计：其他列之间不能有传递依赖关系。</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE myorder (    order_id INT PRIMARY KEY,    product_id INT,    customer_id INT);CREATE TABLE customer (    id INT PRIMARY KEY,    name VARCHAR(20),    phone VARCHAR(15));</code></pre><p>修改后就不存在其他列之间的传递依赖关系，其他列都只依赖于主键列，满足了第三范式的设计！</p><h2 id="查询练习"><a href="#查询练习" class="headerlink" title="查询练习"></a>查询练习</h2><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><pre class=" language-mysql"><code class="language-mysql">-- 创建数据库CREATE DATABASE select_test;-- 切换数据库USE select_test;-- 创建学生表CREATE TABLE student (    no VARCHAR(20) PRIMARY KEY,    name VARCHAR(20) NOT NULL,    sex VARCHAR(10) NOT NULL,    birthday DATE, -- 生日    class VARCHAR(20) -- 所在班级);-- 创建教师表CREATE TABLE teacher (    no VARCHAR(20) PRIMARY KEY,    name VARCHAR(20) NOT NULL,    sex VARCHAR(10) NOT NULL,    birthday DATE,    profession VARCHAR(20) NOT NULL, -- 职称    department VARCHAR(20) NOT NULL -- 部门);-- 创建课程表CREATE TABLE course (    no VARCHAR(20) PRIMARY KEY,    name VARCHAR(20) NOT NULL,    t_no VARCHAR(20) NOT NULL, -- 教师编号    -- 表示该 tno 来自于 teacher 表中的 no 字段值    FOREIGN KEY(t_no) REFERENCES teacher(no) );-- 成绩表CREATE TABLE score (    s_no VARCHAR(20) NOT NULL, -- 学生编号    c_no VARCHAR(20) NOT NULL, -- 课程号    degree DECIMAL,    -- 成绩    -- 表示该 s_no, c_no 分别来自于 student, course 表中的 no 字段值    FOREIGN KEY(s_no) REFERENCES student(no),        FOREIGN KEY(c_no) REFERENCES course(no),    -- 设置 s_no, c_no 为联合主键    PRIMARY KEY(s_no, c_no));-- 查看所有表SHOW TABLES;-- 添加学生表数据INSERT INTO student VALUES('101', '曾华', '男', '1977-09-01', '95033');INSERT INTO student VALUES('102', '匡明', '男', '1975-10-02', '95031');INSERT INTO student VALUES('103', '王丽', '女', '1976-01-23', '95033');INSERT INTO student VALUES('104', '李军', '男', '1976-02-20', '95033');INSERT INTO student VALUES('105', '王芳', '女', '1975-02-10', '95031');INSERT INTO student VALUES('106', '陆军', '男', '1974-06-03', '95031');INSERT INTO student VALUES('107', '王尼玛', '男', '1976-02-20', '95033');INSERT INTO student VALUES('108', '张全蛋', '男', '1975-02-10', '95031');INSERT INTO student VALUES('109', '赵铁柱', '男', '1974-06-03', '95031');-- 添加教师表数据INSERT INTO teacher VALUES('804', '李诚', '男', '1958-12-02', '副教授', '计算机系');INSERT INTO teacher VALUES('856', '张旭', '男', '1969-03-12', '讲师', '电子工程系');INSERT INTO teacher VALUES('825', '王萍', '女', '1972-05-05', '助教', '计算机系');INSERT INTO teacher VALUES('831', '刘冰', '女', '1977-08-14', '助教', '电子工程系');-- 添加课程表数据INSERT INTO course VALUES('3-105', '计算机导论', '825');INSERT INTO course VALUES('3-245', '操作系统', '804');INSERT INTO course VALUES('6-166', '数字电路', '856');INSERT INTO course VALUES('9-888', '高等数学', '831');-- 添加添加成绩表数据INSERT INTO score VALUES('103', '3-105', '92');INSERT INTO score VALUES('103', '3-245', '86');INSERT INTO score VALUES('103', '6-166', '85');INSERT INTO score VALUES('105', '3-105', '88');INSERT INTO score VALUES('105', '3-245', '75');INSERT INTO score VALUES('105', '6-166', '79');INSERT INTO score VALUES('109', '3-105', '76');INSERT INTO score VALUES('109', '3-245', '68');INSERT INTO score VALUES('109', '6-166', '81');-- 查看表结构SELECT * FROM course;SELECT * FROM score;SELECT * FROM student;SELECT * FROM teacher;</code></pre><h3 id="1-到-10"><a href="#1-到-10" class="headerlink" title="1 到 10"></a>1 到 10</h3><pre class=" language-mysql"><code class="language-mysql">-- 查询 student 表的所有行SELECT * FROM student;-- 查询 student 表中的 name、sex 和 class 字段的所有行SELECT name, sex, class FROM student;-- 查询 teacher 表中不重复的 department 列-- department: 去重查询SELECT DISTINCT department FROM teacher;-- 查询 score 表中成绩在60-80之间的所有行（区间查询和运算符查询）-- BETWEEN xx AND xx: 查询区间, AND 表示 "并且"SELECT * FROM score WHERE degree BETWEEN 60 AND 80;SELECT * FROM score WHERE degree > 60 AND degree < 80;-- 查询 score 表中成绩为 85, 86 或 88 的行-- IN: 查询规定中的多个值SELECT * FROM score WHERE degree IN (85, 86, 88);-- 查询 student 表中 '95031' 班或性别为 '女' 的所有行-- or: 表示或者关系SELECT * FROM student WHERE class = '95031' or sex = '女';-- 以 class 降序的方式查询 student 表的所有行-- DESC: 降序，从高到低-- ASC（默认）: 升序，从低到高SELECT * FROM student ORDER BY class DESC;SELECT * FROM student ORDER BY class ASC;-- 以 c_no 升序、degree 降序查询 score 表的所有行SELECT * FROM score ORDER BY c_no ASC, degree DESC;-- 查询 "95031" 班的学生人数-- COUNT: 统计SELECT COUNT(*) FROM student WHERE class = '95031';-- 查询 score 表中的最高分的学生学号和课程编号（子查询或排序查询）。-- (SELECT MAX(degree) FROM score): 子查询，算出最高分SELECT s_no, c_no FROM score WHERE degree = (SELECT MAX(degree) FROM score);--  排序查询-- LIMIT r, n: 表示从第r行开始，查询n条数据SELECT s_no, c_no, degree FROM score ORDER BY degree DESC LIMIT 0, 1;</code></pre><h3 id="分组计算平均成绩"><a href="#分组计算平均成绩" class="headerlink" title="分组计算平均成绩"></a>分组计算平均成绩</h3><p><strong>查询每门课的平均成绩。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- AVG: 平均值SELECT AVG(degree) FROM score WHERE c_no = '3-105';SELECT AVG(degree) FROM score WHERE c_no = '3-245';SELECT AVG(degree) FROM score WHERE c_no = '6-166';-- GROUP BY: 分组查询SELECT c_no, AVG(degree) FROM score GROUP BY c_no;</code></pre><h3 id="分组条件与模糊查询"><a href="#分组条件与模糊查询" class="headerlink" title="分组条件与模糊查询"></a>分组条件与模糊查询</h3><p><strong>查询 <code>score</code> 表中至少有 2 名学生选修，并以 3 开头的课程的平均分数。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score;-- c_no 课程编号+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 || 103  | 3-245 |     86 || 103  | 6-166 |     85 || 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><p>分析表发现，至少有 2 名学生选修的课程是 <code>3-105</code> 、<code>3-245</code> 、<code>6-166</code> ，以 3 开头的课程是 <code>3-105</code> 、<code>3-245</code> 。也就是说，我们要查询所有 <code>3-105</code> 和 <code>3-245</code> 的 <code>degree</code> 平均分。</p><pre class=" language-mysql"><code class="language-mysql">-- 首先把 c_no, AVG(degree) 通过分组查询出来SELECT c_no, AVG(degree) FROM score GROUP BY c_no+-------+-------------+| c_no  | AVG(degree) |+-------+-------------+| 3-105 |     85.3333 || 3-245 |     76.3333 || 6-166 |     81.6667 |+-------+-------------+-- 再查询出至少有 2 名学生选修的课程-- HAVING: 表示持有HAVING COUNT(c_no) >= 2-- 并且是以 3 开头的课程-- LIKE 表示模糊查询，"%" 是一个通配符，匹配 "3" 后面的任意字符。AND c_no LIKE '3%';-- 把前面的SQL语句拼接起来，-- 后面加上一个 COUNT(*)，表示将每个分组的个数也查询出来。SELECT c_no, AVG(degree), COUNT(*) FROM score GROUP BY c_noHAVING COUNT(c_no) >= 2 AND c_no LIKE '3%';+-------+-------------+----------+| c_no  | AVG(degree) | COUNT(*) |+-------+-------------+----------+| 3-105 |     85.3333 |        3 || 3-245 |     76.3333 |        3 |+-------+-------------+----------+</code></pre><h3 id="多表查询-1"><a href="#多表查询-1" class="headerlink" title="多表查询 - 1"></a>多表查询 - 1</h3><p><strong>查询所有学生的 <code>name</code>，以及该学生在 <code>score</code> 表中对应的 <code>c_no</code> 和 <code>degree</code> 。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT no, name FROM student;+-----+-----------+| no  | name      |+-----+-----------+| 101 | 曾华      || 102 | 匡明      || 103 | 王丽      || 104 | 李军      || 105 | 王芳      || 106 | 陆军      || 107 | 王尼玛    || 108 | 张全蛋    || 109 | 赵铁柱    |+-----+-----------+SELECT s_no, c_no, degree FROM score;+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 || 103  | 3-245 |     86 || 103  | 6-166 |     85 || 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><p>通过分析可以发现，只要把 <code>score</code> 表中的 <code>s_no</code> 字段值替换成 <code>student</code> 表中对应的 <code>name</code> 字段值就可以了，如何做呢？</p><pre class=" language-mysql"><code class="language-mysql">-- FROM...: 表示从 student, score 表中查询-- WHERE 的条件表示为，只有在 student.no 和 score.s_no 相等时才显示出来。SELECT name, c_no, degree FROM student, score WHERE student.no = score.s_no;+-----------+-------+--------+| name      | c_no  | degree |+-----------+-------+--------+| 王丽      | 3-105 |     92 || 王丽      | 3-245 |     86 || 王丽      | 6-166 |     85 || 王芳      | 3-105 |     88 || 王芳      | 3-245 |     75 || 王芳      | 6-166 |     79 || 赵铁柱    | 3-105 |     76 || 赵铁柱    | 3-245 |     68 || 赵铁柱    | 6-166 |     81 |+-----------+-------+--------+</code></pre><h3 id="多表查询-2"><a href="#多表查询-2" class="headerlink" title="多表查询 - 2"></a>多表查询 - 2</h3><p><strong>查询所有学生的 <code>no</code> 、课程名称 ( <code>course</code> 表中的 <code>name</code> ) 和成绩 ( <code>score</code> 表中的 <code>degree</code> ) 列。</strong></p><p>只有 <code>score</code> 关联学生的 <code>no</code> ，因此只要查询 <code>score</code> 表，就能找出所有和学生相关的 <code>no</code> 和 <code>degree</code> ：</p><pre class=" language-mysql"><code class="language-mysql">SELECT s_no, c_no, degree FROM score;+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 || 103  | 3-245 |     86 || 103  | 6-166 |     85 || 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><p>然后查询 <code>course</code> 表：</p><pre class=" language-mysql"><code class="language-mysql">+-------+-----------------+| no    | name            |+-------+-----------------+| 3-105 | 计算机导论      || 3-245 | 操作系统        || 6-166 | 数字电路        || 9-888 | 高等数学        |+-------+-----------------+</code></pre><p>只要把 <code>score</code> 表中的 <code>c_no</code> 替换成 <code>course</code> 表中对应的 <code>name</code> 字段值就可以了。</p><pre class=" language-mysql"><code class="language-mysql">-- 增加一个查询字段 name，分别从 score、course 这两个表中查询。-- as 表示取一个该字段的别名。SELECT s_no, name as c_name, degree FROM score, courseWHERE score.c_no = course.no;+------+-----------------+--------+| s_no | c_name          | degree |+------+-----------------+--------+| 103  | 计算机导论      |     92 || 105  | 计算机导论      |     88 || 109  | 计算机导论      |     76 || 103  | 操作系统        |     86 || 105  | 操作系统        |     75 || 109  | 操作系统        |     68 || 103  | 数字电路        |     85 || 105  | 数字电路        |     79 || 109  | 数字电路        |     81 |+------+-----------------+--------+</code></pre><h3 id="三表关联查询"><a href="#三表关联查询" class="headerlink" title="三表关联查询"></a>三表关联查询</h3><p><strong>查询所有学生的 <code>name</code> 、课程名 ( <code>course</code> 表中的 <code>name</code> ) 和 <code>degree</code> 。</strong></p><p>只有 <code>score</code> 表中关联学生的学号和课堂号，我们只要围绕着 <code>score</code> 这张表查询就好了。</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score;+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 || 103  | 3-245 |     86 || 103  | 6-166 |     85 || 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><p>只要把 <code>s_no</code> 和 <code>c_no</code> 替换成 <code>student</code> 和 <code>srouse</code> 表中对应的 <code>name</code> 字段值就好了。</p><p>首先把 <code>s_no</code> 替换成 <code>student</code> 表中的 <code>name</code> 字段：</p><pre class=" language-mysql"><code class="language-mysql">SELECT name, c_no, degree FROM student, score WHERE student.no = score.s_no;+-----------+-------+--------+| name      | c_no  | degree |+-----------+-------+--------+| 王丽      | 3-105 |     92 || 王丽      | 3-245 |     86 || 王丽      | 6-166 |     85 || 王芳      | 3-105 |     88 || 王芳      | 3-245 |     75 || 王芳      | 6-166 |     79 || 赵铁柱    | 3-105 |     76 || 赵铁柱    | 3-245 |     68 || 赵铁柱    | 6-166 |     81 |+-----------+-------+--------+</code></pre><p>再把 <code>c_no</code> 替换成 <code>course</code> 表中的 <code>name</code> 字段：</p><pre class=" language-mysql"><code class="language-mysql">-- 课程表SELECT no, name FROM course;+-------+-----------------+| no    | name            |+-------+-----------------+| 3-105 | 计算机导论      || 3-245 | 操作系统        || 6-166 | 数字电路        || 9-888 | 高等数学        |+-------+-----------------+-- 由于字段名存在重复，使用 "表名.字段名 as 别名" 代替。SELECT student.name as s_name, course.name as c_name, degree FROM student, score, courseWHERE student.NO = score.s_noAND score.c_no = course.no;</code></pre><h3 id="子查询加分组求平均分"><a href="#子查询加分组求平均分" class="headerlink" title="子查询加分组求平均分"></a>子查询加分组求平均分</h3><p><strong>查询 <code>95031</code> 班学生每门课程的平均成绩。</strong></p><p>在 <code>score</code> 表中根据 <code>student</code>  表的学生编号筛选出学生的课堂号和成绩：</p><pre class=" language-mysql"><code class="language-mysql">-- IN (..): 将筛选出的学生号当做 s_no 的条件查询SELECT s_no, c_no, degree FROM scoreWHERE s_no IN (SELECT no FROM student WHERE class = '95031');+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><p>这时只要将 <code>c_no</code> 分组一下就能得出 <code>95031</code> 班学生每门课的平均成绩：</p><pre class=" language-mysql"><code class="language-mysql">SELECT c_no, AVG(degree) FROM scoreWHERE s_no IN (SELECT no FROM student WHERE class = '95031')GROUP BY c_no;+-------+-------------+| c_no  | AVG(degree) |+-------+-------------+| 3-105 |     82.0000 || 3-245 |     71.5000 || 6-166 |     80.0000 |+-------+-------------+</code></pre><h3 id="子查询-1"><a href="#子查询-1" class="headerlink" title="子查询 - 1"></a>子查询 - 1</h3><p><strong>查询在 <code>3-105</code> 课程中，所有成绩高于 <code>109</code> 号同学的记录。</strong></p><p>首先筛选出课堂号为 <code>3-105</code> ，在找出所有成绩高于 <code>109</code> 号同学的的行。</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score WHERE c_no = '3-105'AND degree > (SELECT degree FROM score WHERE s_no = '109' AND c_no = '3-105');</code></pre><h3 id="子查询-2"><a href="#子查询-2" class="headerlink" title="子查询 - 2"></a>子查询 - 2</h3><p><strong>查询所有成绩高于 <code>109</code> 号同学的 <code>3-105</code> 课程成绩记录。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 不限制课程号，只要成绩大于109号同学的3-105课程成绩就可以。SELECT * FROM scoreWHERE degree > (SELECT degree FROM score WHERE s_no = '109' AND c_no = '3-105');</code></pre><h3 id="YEAR-函数与带-IN-关键字查询"><a href="#YEAR-函数与带-IN-关键字查询" class="headerlink" title="YEAR 函数与带 IN 关键字查询"></a>YEAR 函数与带 IN 关键字查询</h3><p><strong>查询所有和 <code>101</code> 、<code>108</code> 号学生同年出生的 <code>no</code> 、<code>name</code> 、<code>birthday</code> 列。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- YEAR(..): 取出日期中的年份SELECT no, name, birthday FROM studentWHERE YEAR(birthday) IN (SELECT YEAR(birthday) FROM student WHERE no IN (101, 108));</code></pre><h3 id="多层嵌套子查询"><a href="#多层嵌套子查询" class="headerlink" title="多层嵌套子查询"></a>多层嵌套子查询</h3><p><strong>查询 <code>&#39;张旭&#39;</code> 教师任课的学生成绩表。</strong></p><p>首先找到教师编号：</p><pre class=" language-mysql"><code class="language-mysql">SELECT NO FROM teacher WHERE NAME = '张旭'</code></pre><p>通过 <code>sourse</code> 表找到该教师课程号：</p><pre class=" language-mysql"><code class="language-mysql">SELECT NO FROM course WHERE t_no = ( SELECT NO FROM teacher WHERE NAME = '张旭' );</code></pre><p>通过筛选出的课程号查询成绩表：</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score WHERE c_no = (    SELECT no FROM course WHERE t_no = (         SELECT no FROM teacher WHERE NAME = '张旭'     ));</code></pre><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p><strong>查询某选修课程多于5个同学的教师姓名。</strong></p><p>首先在 <code>teacher</code> 表中，根据 <code>no</code> 字段来判断该教师的同一门课程是否有至少5名学员选修：</p><pre class=" language-mysql"><code class="language-mysql">-- 查询 teacher 表SELECT no, name FROM teacher;+-----+--------+| no  | name   |+-----+--------+| 804 | 李诚   || 825 | 王萍   || 831 | 刘冰   || 856 | 张旭   |+-----+--------+SELECT name FROM teacher WHERE no IN (    -- 在这里找到对应的条件);</code></pre><p>查看和教师编号有有关的表的信息：</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM course;-- t_no: 教师编号+-------+-----------------+------+| no    | name            | t_no |+-------+-----------------+------+| 3-105 | 计算机导论      | 825  || 3-245 | 操作系统        | 804  || 6-166 | 数字电路        | 856  || 9-888 | 高等数学        | 831  |+-------+-----------------+------+</code></pre><p>我们已经找到和教师编号有关的字段就在 <code>course</code> 表中，但是还无法知道哪门课程至少有5名学生选修，所以还需要根据 <code>score</code> 表来查询：</p><pre class=" language-mysql"><code class="language-mysql">-- 在此之前向 score 插入一些数据，以便丰富查询条件。INSERT INTO score VALUES ('101', '3-105', '90');INSERT INTO score VALUES ('102', '3-105', '91');INSERT INTO score VALUES ('104', '3-105', '89');-- 查询 score 表SELECT * FROM score;+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 101  | 3-105 |     90 || 102  | 3-105 |     91 || 103  | 3-105 |     92 || 103  | 3-245 |     86 || 103  | 6-166 |     85 || 104  | 3-105 |     89 || 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+-- 在 score 表中将 c_no 作为分组，并且限制 c_no 持有至少 5 条数据。SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) > 5;+-------+| c_no  |+-------+| 3-105 |+-------+</code></pre><p>根据筛选出来的课程号，找出在某课程中，拥有至少5名学员的教师编号：</p><pre class=" language-mysql"><code class="language-mysql">SELECT t_no FROM course WHERE no IN (    SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) > 5);+------+| t_no |+------+| 825  |+------+</code></pre><p>在 <code>teacher</code> 表中，根据筛选出来的教师编号找到教师姓名：</p><pre class=" language-mysql"><code class="language-mysql">SELECT name FROM teacher WHERE no IN (    -- 最终条件    SELECT t_no FROM course WHERE no IN (        SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) > 5    ));</code></pre><h3 id="子查询-3"><a href="#子查询-3" class="headerlink" title="子查询 - 3"></a>子查询 - 3</h3><p><strong>查询 “计算机系” 课程的成绩表。</strong></p><p>思路是，先找出 <code>course</code> 表中所有 <code>计算机系</code> 课程的编号，然后根据这个编号查询 <code>score</code> 表。</p><pre class=" language-mysql"><code class="language-mysql">-- 通过 teacher 表查询所有 `计算机系` 的教师编号SELECT no, name, department FROM teacher WHERE department = '计算机系'+-----+--------+--------------+| no  | name   | department   |+-----+--------+--------------+| 804 | 李诚   | 计算机系     || 825 | 王萍   | 计算机系     |+-----+--------+--------------+-- 通过 course 表查询该教师的课程编号SELECT no FROM course WHERE t_no IN (    SELECT no FROM teacher WHERE department = '计算机系');+-------+| no    |+-------+| 3-245 || 3-105 |+-------+-- 根据筛选出来的课程号查询成绩表SELECT * FROM score WHERE c_no IN (    SELECT no FROM course WHERE t_no IN (        SELECT no FROM teacher WHERE department = '计算机系'    ));+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-245 |     86 || 105  | 3-245 |     75 || 109  | 3-245 |     68 || 101  | 3-105 |     90 || 102  | 3-105 |     91 || 103  | 3-105 |     92 || 104  | 3-105 |     89 || 105  | 3-105 |     88 || 109  | 3-105 |     76 |+------+-------+--------+</code></pre><h3 id="UNION-和-NOTIN-的使用"><a href="#UNION-和-NOTIN-的使用" class="headerlink" title="UNION 和 NOTIN 的使用"></a>UNION 和 NOTIN 的使用</h3><p><strong>查询 <code>计算机系</code> 与 <code>电子工程系</code> 中的不同职称的教师。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- NOT: 代表逻辑非SELECT * FROM teacher WHERE department = '计算机系' AND profession NOT IN (    SELECT profession FROM teacher WHERE department = '电子工程系')-- 合并两个集UNIONSELECT * FROM teacher WHERE department = '电子工程系' AND profession NOT IN (    SELECT profession FROM teacher WHERE department = '计算机系');</code></pre><h3 id="ANY-表示至少一个-DESC-降序"><a href="#ANY-表示至少一个-DESC-降序" class="headerlink" title="ANY 表示至少一个 - DESC ( 降序 )"></a>ANY 表示至少一个 - DESC ( 降序 )</h3><p><strong>查询课程 <code>3-105</code> 且成绩 <u>至少</u> 高于 <code>3-245</code> 的 <code>score</code> 表。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score WHERE c_no = '3-105';+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 101  | 3-105 |     90 || 102  | 3-105 |     91 || 103  | 3-105 |     92 || 104  | 3-105 |     89 || 105  | 3-105 |     88 || 109  | 3-105 |     76 |+------+-------+--------+SELECT * FROM score WHERE c_no = '3-245';+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-245 |     86 || 105  | 3-245 |     75 || 109  | 3-245 |     68 |+------+-------+--------+-- ANY: 符合SQL语句中的任意条件。-- 也就是说，在 3-105 成绩中，只要有一个大于从 3-245 筛选出来的任意行就符合条件，-- 最后根据降序查询结果。SELECT * FROM score WHERE c_no = '3-105' AND degree > ANY(    SELECT degree FROM score WHERE c_no = '3-245') ORDER BY degree DESC;+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 || 102  | 3-105 |     91 || 101  | 3-105 |     90 || 104  | 3-105 |     89 || 105  | 3-105 |     88 || 109  | 3-105 |     76 |+------+-------+--------+</code></pre><h3 id="表示所有的-ALL"><a href="#表示所有的-ALL" class="headerlink" title="表示所有的 ALL"></a>表示所有的 ALL</h3><p><strong>查询课程 <code>3-105</code> 且成绩高于 <code>3-245</code> 的 <code>score</code> 表。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 只需对上一道题稍作修改。-- ALL: 符合SQL语句中的所有条件。-- 也就是说，在 3-105 每一行成绩中，都要大于从 3-245 筛选出来全部行才算符合条件。SELECT * FROM score WHERE c_no = '3-105' AND degree > ALL(    SELECT degree FROM score WHERE c_no = '3-245');+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 101  | 3-105 |     90 || 102  | 3-105 |     91 || 103  | 3-105 |     92 || 104  | 3-105 |     89 || 105  | 3-105 |     88 |+------+-------+--------+</code></pre><h3 id="复制表的数据作为条件查询"><a href="#复制表的数据作为条件查询" class="headerlink" title="复制表的数据作为条件查询"></a>复制表的数据作为条件查询</h3><p><strong>查询某课程成绩比该课程平均成绩低的 <code>score</code> 表。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 查询平均分SELECT c_no, AVG(degree) FROM score GROUP BY c_no;+-------+-------------+| c_no  | AVG(degree) |+-------+-------------+| 3-105 |     87.6667 || 3-245 |     76.3333 || 6-166 |     81.6667 |+-------+-------------+-- 查询 score 表SELECT degree FROM score;+--------+| degree |+--------+|     90 ||     91 ||     92 ||     86 ||     85 ||     89 ||     88 ||     75 ||     79 ||     76 ||     68 ||     81 |+--------+-- 将表 b 作用于表 a 中查询数据-- score a (b): 将表声明为 a (b)，-- 如此就能用 a.c_no = b.c_no 作为条件执行查询了。SELECT * FROM score a WHERE degree < (    (SELECT AVG(degree) FROM score b WHERE a.c_no = b.c_no));+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><h3 id="子查询-4"><a href="#子查询-4" class="headerlink" title="子查询 - 4"></a>子查询 - 4</h3><p><strong>查询所有任课 ( 在 <code>course</code> 表里有课程 ) 教师的 <code>name</code> 和 <code>department</code></strong> 。</p><pre class=" language-mysql"><code class="language-mysql">SELECT name, department FROM teacher WHERE no IN (SELECT t_no FROM course);+--------+-----------------+| name   | department      |+--------+-----------------+| 李诚   | 计算机系        || 王萍   | 计算机系        || 刘冰   | 电子工程系      || 张旭   | 电子工程系      |+--------+-----------------+</code></pre><h3 id="条件加组筛选"><a href="#条件加组筛选" class="headerlink" title="条件加组筛选"></a>条件加组筛选</h3><p><strong>查询 <code>student</code> 表中至少有 2 名男生的 <code>class</code> 。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 查看学生表信息SELECT * FROM student;+-----+-----------+-----+------------+-------+| no  | name      | sex | birthday   | class |+-----+-----------+-----+------------+-------+| 101 | 曾华      | 男  | 1977-09-01 | 95033 || 102 | 匡明      | 男  | 1975-10-02 | 95031 || 103 | 王丽      | 女  | 1976-01-23 | 95033 || 104 | 李军      | 男  | 1976-02-20 | 95033 || 105 | 王芳      | 女  | 1975-02-10 | 95031 || 106 | 陆军      | 男  | 1974-06-03 | 95031 || 107 | 王尼玛    | 男  | 1976-02-20 | 95033 || 108 | 张全蛋    | 男  | 1975-02-10 | 95031 || 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 || 110 | 张飞      | 男  | 1974-06-03 | 95038 |+-----+-----------+-----+------------+-------+-- 只查询性别为男，然后按 class 分组，并限制 class 行大于 1。SELECT class FROM student WHERE sex = '男' GROUP BY class HAVING COUNT(*) > 1;+-------+| class |+-------+| 95033 || 95031 |+-------+</code></pre><h3 id="NOTLIKE-模糊查询取反"><a href="#NOTLIKE-模糊查询取反" class="headerlink" title="NOTLIKE 模糊查询取反"></a>NOTLIKE 模糊查询取反</h3><p><strong>查询 <code>student</code> 表中不姓 “王” 的同学记录。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- NOT: 取反-- LIKE: 模糊查询mysql> SELECT * FROM student WHERE name NOT LIKE '王%';+-----+-----------+-----+------------+-------+| no  | name      | sex | birthday   | class |+-----+-----------+-----+------------+-------+| 101 | 曾华      | 男  | 1977-09-01 | 95033 || 102 | 匡明      | 男  | 1975-10-02 | 95031 || 104 | 李军      | 男  | 1976-02-20 | 95033 || 106 | 陆军      | 男  | 1974-06-03 | 95031 || 108 | 张全蛋    | 男  | 1975-02-10 | 95031 || 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 || 110 | 张飞      | 男  | 1974-06-03 | 95038 |+-----+-----------+-----+------------+-------+</code></pre><h3 id="YEAR-与-NOW-函数"><a href="#YEAR-与-NOW-函数" class="headerlink" title="YEAR 与 NOW 函数"></a>YEAR 与 NOW 函数</h3><p><strong>查询 <code>student</code> 表中每个学生的姓名和年龄。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 使用函数 YEAR(NOW()) 计算出当前年份，减去出生年份后得出年龄。SELECT name, YEAR(NOW()) - YEAR(birthday) as age FROM student;+-----------+------+| name      | age  |+-----------+------+| 曾华      |   42 || 匡明      |   44 || 王丽      |   43 || 李军      |   43 || 王芳      |   44 || 陆军      |   45 || 王尼玛    |   43 || 张全蛋    |   44 || 赵铁柱    |   45 || 张飞      |   45 |+-----------+------+</code></pre><h3 id="MAX-与-MIN-函数"><a href="#MAX-与-MIN-函数" class="headerlink" title="MAX 与 MIN 函数"></a>MAX 与 MIN 函数</h3><p><strong>查询 <code>student</code> 表中最大和最小的 <code>birthday</code> 值。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT MAX(birthday), MIN(birthday) FROM student;+---------------+---------------+| MAX(birthday) | MIN(birthday) |+---------------+---------------+| 1977-09-01    | 1974-06-03    |+---------------+---------------+</code></pre><h3 id="多段排序"><a href="#多段排序" class="headerlink" title="多段排序"></a>多段排序</h3><p><strong>以 <code>class</code> 和 <code>birthday</code> 从大到小的顺序查询 <code>student</code> 表。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM student ORDER BY class DESC, birthday;+-----+-----------+-----+------------+-------+| no  | name      | sex | birthday   | class |+-----+-----------+-----+------------+-------+| 110 | 张飞      | 男  | 1974-06-03 | 95038 || 103 | 王丽      | 女  | 1976-01-23 | 95033 || 104 | 李军      | 男  | 1976-02-20 | 95033 || 107 | 王尼玛    | 男  | 1976-02-20 | 95033 || 101 | 曾华      | 男  | 1977-09-01 | 95033 || 106 | 陆军      | 男  | 1974-06-03 | 95031 || 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 || 105 | 王芳      | 女  | 1975-02-10 | 95031 || 108 | 张全蛋    | 男  | 1975-02-10 | 95031 || 102 | 匡明      | 男  | 1975-10-02 | 95031 |+-----+-----------+-----+------------+-------+</code></pre><h3 id="子查询-5"><a href="#子查询-5" class="headerlink" title="子查询 - 5"></a>子查询 - 5</h3><p><strong>查询 “男” 教师及其所上的课程。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM course WHERE t_no in (SELECT no FROM teacher WHERE sex = '男');+-------+--------------+------+| no    | name         | t_no |+-------+--------------+------+| 3-245 | 操作系统     | 804  || 6-166 | 数字电路     | 856  |+-------+--------------+------+</code></pre><h3 id="MAX-函数与子查询"><a href="#MAX-函数与子查询" class="headerlink" title="MAX 函数与子查询"></a>MAX 函数与子查询</h3><p><strong>查询最高分同学的 <code>score</code> 表。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 找出最高成绩（该查询只能有一个结果）SELECT MAX(degree) FROM score;-- 根据上面的条件筛选出所有最高成绩表，-- 该查询可能有多个结果，假设 degree 值多次符合条件。SELECT * FROM score WHERE degree = (SELECT MAX(degree) FROM score);+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 |+------+-------+--------+</code></pre><h3 id="子查询-6"><a href="#子查询-6" class="headerlink" title="子查询 - 6"></a>子查询 - 6</h3><p><strong>查询和 “李军” 同性别的所有同学 <code>name</code> 。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 首先将李军的性别作为条件取出来SELECT sex FROM student WHERE name = '李军';+-----+| sex |+-----+| 男  |+-----+-- 根据性别查询 name 和 sexSELECT name, sex FROM student WHERE sex = (    SELECT sex FROM student WHERE name = '李军');+-----------+-----+| name      | sex |+-----------+-----+| 曾华      | 男  || 匡明      | 男  || 李军      | 男  || 陆军      | 男  || 王尼玛    | 男  || 张全蛋    | 男  || 赵铁柱    | 男  || 张飞      | 男  |+-----------+-----+</code></pre><h3 id="子查询-7"><a href="#子查询-7" class="headerlink" title="子查询 - 7"></a>子查询 - 7</h3><p><strong>查询和 “李军” 同性别且同班的同学 <code>name</code> 。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT name, sex, class FROM student WHERE sex = (    SELECT sex FROM student WHERE name = '李军') AND class = (    SELECT class FROM student WHERE name = '李军');+-----------+-----+-------+| name      | sex | class |+-----------+-----+-------+| 曾华      | 男  | 95033 || 李军      | 男  | 95033 || 王尼玛    | 男  | 95033 |+-----------+-----+-------+</code></pre><h3 id="子查询-8"><a href="#子查询-8" class="headerlink" title="子查询 - 8"></a>子查询 - 8</h3><p><strong>查询所有选修 “计算机导论” 课程的 “男” 同学成绩表。</strong></p><p>需要的 “计算机导论” 和性别为 “男” 的编号可以在 <code>course</code> 和 <code>student</code> 表中找到。</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score WHERE c_no = (    SELECT no FROM course WHERE name = '计算机导论') AND s_no IN (    SELECT no FROM student WHERE sex = '男');+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 101  | 3-105 |     90 || 102  | 3-105 |     91 || 104  | 3-105 |     89 || 109  | 3-105 |     76 |+------+-------+--------+</code></pre><h3 id="按等级查询"><a href="#按等级查询" class="headerlink" title="按等级查询"></a>按等级查询</h3><p>建立一个 <code>grade</code> 表代表学生的成绩等级，并插入数据：</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE grade (    low INT(3),    upp INT(3),    grade char(1));INSERT INTO grade VALUES (90, 100, 'A');INSERT INTO grade VALUES (80, 89, 'B');INSERT INTO grade VALUES (70, 79, 'C');INSERT INTO grade VALUES (60, 69, 'D');INSERT INTO grade VALUES (0, 59, 'E');SELECT * FROM grade;+------+------+-------+| low  | upp  | grade |+------+------+-------+|   90 |  100 | A     ||   80 |   89 | B     ||   70 |   79 | C     ||   60 |   69 | D     ||    0 |   59 | E     |+------+------+-------+</code></pre><p><strong>查询所有学生的 <code>s_no</code> 、<code>c_no</code> 和 <code>grade</code> 列。</strong></p><p>思路是，使用区间 ( <code>BETWEEN</code> ) 查询，判断学生的成绩 ( <code>degree</code> )  在 <code>grade</code> 表的 <code>low</code> 和 <code>upp</code> 之间。</p><pre class=" language-mysql"><code class="language-mysql">SELECT s_no, c_no, grade FROM score, grade WHERE degree BETWEEN low AND upp;+------+-------+-------+| s_no | c_no  | grade |+------+-------+-------+| 101  | 3-105 | A     || 102  | 3-105 | A     || 103  | 3-105 | A     || 103  | 3-245 | B     || 103  | 6-166 | B     || 104  | 3-105 | B     || 105  | 3-105 | B     || 105  | 3-245 | C     || 105  | 6-166 | C     || 109  | 3-105 | C     || 109  | 3-245 | D     || 109  | 6-166 | B     |+------+-------+-------+</code></pre><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>准备用于测试连接查询的数据：</p><pre class=" language-mysql"><code class="language-mysql">CREATE DATABASE testJoin;CREATE TABLE person (    id INT,    name VARCHAR(20),    cardId INT);CREATE TABLE card (    id INT,    name VARCHAR(20));INSERT INTO card VALUES (1, '饭卡'), (2, '建行卡'), (3, '农行卡'), (4, '工商卡'), (5, '邮政卡');SELECT * FROM card;+------+-----------+| id   | name      |+------+-----------+|    1 | 饭卡      ||    2 | 建行卡    ||    3 | 农行卡    ||    4 | 工商卡    ||    5 | 邮政卡    |+------+-----------+INSERT INTO person VALUES (1, '张三', 1), (2, '李四', 3), (3, '王五', 6);SELECT * FROM person;+------+--------+--------+| id   | name   | cardId |+------+--------+--------+|    1 | 张三   |      1 ||    2 | 李四   |      3 ||    3 | 王五   |      6 |+------+--------+--------+</code></pre><p>分析两张表发现，<code>person</code> 表并没有为 <code>cardId</code> 字段设置一个在 <code>card</code> 表中对应的 <code>id</code> 外键。如果设置了的话，<code>person</code> 中 <code>cardId</code> 字段值为 <code>6</code> 的行就插不进去，因为该 <code>cardId</code> 值在 <code>card</code> 表中并没有。</p><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>要查询这两张表中有关系的数据，可以使用 <code>INNER JOIN</code> ( 内连接 ) 将它们连接在一起。</p><pre class=" language-mysql"><code class="language-mysql">-- INNER JOIN: 表示为内连接，将两张表拼接在一起。-- on: 表示要执行某个条件。SELECT * FROM person INNER JOIN card on person.cardId = card.id;+------+--------+--------+------+-----------+| id   | name   | cardId | id   | name      |+------+--------+--------+------+-----------+|    1 | 张三   |      1 |    1 | 饭卡      ||    2 | 李四   |      3 |    3 | 农行卡    |+------+--------+--------+------+-----------+-- 将 INNER 关键字省略掉，结果也是一样的。-- SELECT * FROM person JOIN card on person.cardId = card.id;</code></pre><blockquote><p>注意：<code>card</code> 的整张表被连接到了右边。</p></blockquote><h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><p>完整显示左边的表 ( <code>person</code> ) ，右边的表如果符合条件就显示，不符合则补 <code>NULL</code> 。</p><pre class=" language-mysql"><code class="language-mysql">-- LEFT JOIN 也叫做 LEFT OUTER JOIN，用这两种方式的查询结果是一样的。SELECT * FROM person LEFT JOIN card on person.cardId = card.id;+------+--------+--------+------+-----------+| id   | name   | cardId | id   | name      |+------+--------+--------+------+-----------+|    1 | 张三   |      1 |    1 | 饭卡      ||    2 | 李四   |      3 |    3 | 农行卡    ||    3 | 王五   |      6 | NULL | NULL      |+------+--------+--------+------+-----------+</code></pre><h4 id="右外链接"><a href="#右外链接" class="headerlink" title="右外链接"></a>右外链接</h4><p>完整显示右边的表 ( <code>card</code> ) ，左边的表如果符合条件就显示，不符合则补 <code>NULL</code> 。</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM person RIGHT JOIN card on person.cardId = card.id;+------+--------+--------+------+-----------+| id   | name   | cardId | id   | name      |+------+--------+--------+------+-----------+|    1 | 张三   |      1 |    1 | 饭卡      ||    2 | 李四   |      3 |    3 | 农行卡    || NULL | NULL   |   NULL |    2 | 建行卡    || NULL | NULL   |   NULL |    4 | 工商卡    || NULL | NULL   |   NULL |    5 | 邮政卡    |+------+--------+--------+------+-----------+</code></pre><h4 id="全外链接"><a href="#全外链接" class="headerlink" title="全外链接"></a>全外链接</h4><p>完整显示两张表的全部数据。</p><pre class=" language-mysql"><code class="language-mysql">-- MySQL 不支持这种语法的全外连接-- SELECT * FROM person FULL JOIN card on person.cardId = card.id;-- 出现错误：-- ERROR 1054 (42S22): Unknown column 'person.cardId' in 'on clause'-- MySQL全连接语法，使用 UNION 将两张表合并在一起。SELECT * FROM person LEFT JOIN card on person.cardId = card.idUNIONSELECT * FROM person RIGHT JOIN card on person.cardId = card.id;+------+--------+--------+------+-----------+| id   | name   | cardId | id   | name      |+------+--------+--------+------+-----------+|    1 | 张三   |      1 |    1 | 饭卡      ||    2 | 李四   |      3 |    3 | 农行卡    ||    3 | 王五   |      6 | NULL | NULL      || NULL | NULL   |   NULL |    2 | 建行卡    || NULL | NULL   |   NULL |    4 | 工商卡    || NULL | NULL   |   NULL |    5 | 邮政卡    |+------+--------+--------+------+-----------+</code></pre><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>在 MySQL 中，事务其实是一个最小的不可分割的工作单元。事务能够<strong>保证一个业务的完整性</strong>。</p><p>比如我们的银行转账：</p><pre class=" language-mysql"><code class="language-mysql">-- a -> -100UPDATE user set money = money - 100 WHERE name = 'a';-- b -> +100UPDATE user set money = money + 100 WHERE name = 'b';</code></pre><p>在实际项目中，假设只有一条 SQL 语句执行成功，而另外一条执行失败了，就会出现数据前后不一致。</p><p>因此，在执行多条有关联 SQL 语句时，<strong>事务</strong>可能会要求这些 SQL 语句要么同时执行成功，要么就都执行失败。</p><h3 id="如何控制事务-COMMIT-ROLLBACK"><a href="#如何控制事务-COMMIT-ROLLBACK" class="headerlink" title="如何控制事务 - COMMIT / ROLLBACK"></a>如何控制事务 - COMMIT / ROLLBACK</h3><p>在 MySQL 中，事务的<strong>自动提交</strong>状态默认是开启的。</p><pre class=" language-mysql"><code class="language-mysql">-- 查询事务的自动提交状态SELECT @@AUTOCOMMIT;+--------------+| @@AUTOCOMMIT |+--------------+|            1 |+--------------+</code></pre><p><strong>自动提交的作用</strong>：当我们执行一条 SQL 语句的时候，其产生的效果就会立即体现出来，且不能<strong>回滚</strong>。</p><p>什么是回滚？举个例子：</p><pre class=" language-mysql"><code class="language-mysql">CREATE DATABASE bank;USE bank;CREATE TABLE user (    id INT PRIMARY KEY,    name VARCHAR(20),    money INT);INSERT INTO user VALUES (1, 'a', 1000);SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 |+----+------+-------+</code></pre><p>可以看到，在执行插入语句后数据立刻生效，原因是 MySQL 中的事务自动将它<strong>提交</strong>到了数据库中。那么所谓<strong>回滚</strong>的意思就是，撤销执行过的所有 SQL 语句，使其回滚到<strong>最后一次提交</strong>数据时的状态。</p><p>在 MySQL 中使用 <code>ROLLBACK</code> 执行回滚：</p><pre class=" language-mysql"><code class="language-mysql">-- 回滚到最后一次提交ROLLBACK;SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 |+----+------+-------+</code></pre><p>由于所有执行过的 SQL 语句都已经被提交过了，所以数据并没有发生回滚。那如何让数据可以发生回滚？</p><pre class=" language-mysql"><code class="language-mysql">-- 关闭自动提交SET AUTOCOMMIT = 0;-- 查询自动提交状态SELECT @@AUTOCOMMIT;+--------------+| @@AUTOCOMMIT |+--------------+|            0 |+--------------+</code></pre><p>将自动提交关闭后，测试数据回滚：</p><pre class=" language-mysql"><code class="language-mysql">INSERT INTO user VALUES (2, 'b', 1000);-- 关闭 AUTOCOMMIT 后，数据的变化是在一张虚拟的临时数据表中展示，-- 发生变化的数据并没有真正插入到数据表中。SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 ||  2 | b    |  1000 |+----+------+-------+-- 数据表中的真实数据其实还是：+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 |+----+------+-------+-- 由于数据还没有真正提交，可以使用回滚ROLLBACK;-- 再次查询SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 |+----+------+-------+</code></pre><p>那如何将虚拟的数据真正提交到数据库中？使用 <code>COMMIT</code> : </p><pre class=" language-mysql"><code class="language-mysql">INSERT INTO user VALUES (2, 'b', 1000);-- 手动提交数据（持久性），-- 将数据真正提交到数据库中，执行后不能再回滚提交过的数据。COMMIT;-- 提交后测试回滚ROLLBACK;-- 再次查询（回滚无效了）SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 ||  2 | b    |  1000 |+----+------+-------+</code></pre><blockquote><p><strong>总结</strong></p><ol><li><p><strong>自动提交</strong></p><ul><li><p>查看自动提交状态：<code>SELECT @@AUTOCOMMIT</code> ；</p></li><li><p>设置自动提交状态：<code>SET AUTOCOMMIT = 0</code> 。</p></li></ul></li><li><p><strong>手动提交</strong></p><p><code>@@AUTOCOMMIT = 0</code> 时，使用 <code>COMMIT</code> 命令提交事务。</p></li><li><p><strong>事务回滚</strong></p><p><code>@@AUTOCOMMIT = 0</code> 时，使用 <code>ROLLBACK</code> 命令回滚事务。</p></li></ol></blockquote><p><strong>事务的实际应用</strong>，让我们再回到银行转账项目：</p><pre class=" language-mysql"><code class="language-mysql">-- 转账UPDATE user set money = money - 100 WHERE name = 'a';-- 到账UPDATE user set money = money + 100 WHERE name = 'b';SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |   900 ||  2 | b    |  1100 |+----+------+-------+</code></pre><p>这时假设在转账时发生了意外，就可以使用 <code>ROLLBACK</code> 回滚到最后一次提交的状态：</p><pre class=" language-mysql"><code class="language-mysql">-- 假设转账发生了意外，需要回滚。ROLLBACK;SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 ||  2 | b    |  1000 |+----+------+-------+</code></pre><p>这时我们又回到了发生意外之前的状态，也就是说，事务给我们提供了一个可以反悔的机会。假设数据没有发生意外，这时可以手动将数据真正提交到数据表中：<code>COMMIT</code> 。</p><h3 id="手动开启事务-BEGIN-START-TRANSACTION"><a href="#手动开启事务-BEGIN-START-TRANSACTION" class="headerlink" title="手动开启事务 - BEGIN / START TRANSACTION"></a>手动开启事务 - BEGIN / START TRANSACTION</h3><p>事务的默认提交被开启 ( <code>@@AUTOCOMMIT = 1</code> ) 后，此时就不能使用事务回滚了。但是我们还可以手动开启一个事务处理事件，使其可以发生回滚：</p><pre class=" language-mysql"><code class="language-mysql">-- 使用 BEGIN 或者 START TRANSACTION 手动开启一个事务-- START TRANSACTION;BEGIN;UPDATE user set money = money - 100 WHERE name = 'a';UPDATE user set money = money + 100 WHERE name = 'b';-- 由于手动开启的事务没有开启自动提交，-- 此时发生变化的数据仍然是被保存在一张临时表中。SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |   900 ||  2 | b    |  1100 |+----+------+-------+-- 测试回滚ROLLBACK;SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 ||  2 | b    |  1000 |+----+------+-------+</code></pre><p>仍然使用 <code>COMMIT</code> 提交数据，提交后无法再发生本次事务的回滚。</p><pre class=" language-mysql"><code class="language-mysql">BEGIN;UPDATE user set money = money - 100 WHERE name = 'a';UPDATE user set money = money + 100 WHERE name = 'b';SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |   900 ||  2 | b    |  1100 |+----+------+-------+-- 提交数据COMMIT;-- 测试回滚（无效，因为表的数据已经被提交）ROLLBACK;</code></pre><h3 id="事务的-ACID-特征与使用"><a href="#事务的-ACID-特征与使用" class="headerlink" title="事务的 ACID 特征与使用"></a>事务的 ACID 特征与使用</h3><p><strong>事务的四大特征：</strong></p><ul><li><strong>A 原子性</strong>：事务是最小的单位，不可以再分割；</li><li><strong>C 一致性</strong>：要求同一事务中的 SQL 语句，必须保证同时成功或者失败；</li><li><strong>I 隔离性</strong>：事务1 和 事务2 之间是具有隔离性的；</li><li><strong>D 持久性</strong>：事务一旦结束 ( <code>COMMIT</code> ) ，就不可以再返回了 ( <code>ROLLBACK</code> ) 。</li></ul><h3 id="事务的隔离性"><a href="#事务的隔离性" class="headerlink" title="事务的隔离性"></a>事务的隔离性</h3><p><strong>事务的隔离性可分为四种 ( 性能从低到高 )</strong> ：</p><ol><li><p><strong>READ UNCOMMITTED ( 读取未提交 )</strong></p><p>如果有多个事务，那么任意事务都可以看见其他事务的<strong>未提交数据</strong>。</p></li><li><p><strong>READ COMMITTED ( 读取已提交 )</strong></p><p>只能读取到其他事务<strong>已经提交的数据</strong>。</p></li><li><p><strong>REPEATABLE READ ( 可被重复读 )</strong></p><p>如果有多个连接都开启了事务，那么事务之间不能共享数据记录，否则只能共享已提交的记录。</p></li><li><p><strong>SERIALIZABLE ( 串行化 )</strong></p><p>所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong>。</p></li></ol><p>查看当前数据库的默认隔离级别：</p><pre class=" language-mysql"><code class="language-mysql">-- MySQL 8.x, GLOBAL 表示系统级别，不加表示会话级别。SELECT @@GLOBAL.TRANSACTION_ISOLATION;SELECT @@TRANSACTION_ISOLATION;+--------------------------------+| @@GLOBAL.TRANSACTION_ISOLATION |+--------------------------------+| REPEATABLE-READ                | -- MySQL的默认隔离级别，可以重复读。+--------------------------------+-- MySQL 5.xSELECT @@GLOBAL.TX_ISOLATION;SELECT @@TX_ISOLATION;</code></pre><p>修改隔离级别：</p><pre class=" language-mysql"><code class="language-mysql">-- 设置系统隔离级别，LEVEL 后面表示要设置的隔离级别 (READ UNCOMMITTED)。SET GLOBAL TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;-- 查询系统隔离级别，发现已经被修改。SELECT @@GLOBAL.TRANSACTION_ISOLATION;+--------------------------------+| @@GLOBAL.TRANSACTION_ISOLATION |+--------------------------------+| READ-UNCOMMITTED               |+--------------------------------+</code></pre><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>测试 <strong>READ UNCOMMITTED ( 读取未提交 )</strong> 的隔离性：</p><pre class=" language-mysql"><code class="language-mysql">INSERT INTO user VALUES (3, '小明', 1000);INSERT INTO user VALUES (4, '淘宝店', 1000);SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |  1000 ||  4 | 淘宝店    |  1000 |+----+-----------+-------+-- 开启一个事务操作数据-- 假设小明在淘宝店买了一双800块钱的鞋子：START TRANSACTION;UPDATE user SET money = money - 800 WHERE name = '小明';UPDATE user SET money = money + 800 WHERE name = '淘宝店';-- 然后淘宝店在另一方查询结果，发现钱已到账。SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |   200 ||  4 | 淘宝店    |  1800 |+----+-----------+-------+</code></pre><p>由于小明的转账是在新开启的事务上进行操作的，而该操作的结果是可以被其他事务（另一方的淘宝店）看见的，因此淘宝店的查询结果是正确的，淘宝店确认到账。但就在这时，如果小明在它所处的事务上又执行了 <code>ROLLBACK</code> 命令，会发生什么？</p><pre class=" language-mysql"><code class="language-mysql">-- 小明所处的事务ROLLBACK;-- 此时无论对方是谁，如果再去查询结果就会发现：SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |  1000 ||  4 | 淘宝店    |  1000 |+----+-----------+-------+</code></pre><p>这就是所谓的<strong>脏读</strong>，一个事务读取到另外一个事务还未提交的数据。这在实际开发中是不允许出现的。</p><h4 id="读取已提交"><a href="#读取已提交" class="headerlink" title="读取已提交"></a>读取已提交</h4><p>把隔离级别设置为 <strong>READ COMMITTED</strong> ：</p><pre class=" language-mysql"><code class="language-mysql">SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;SELECT @@GLOBAL.TRANSACTION_ISOLATION;+--------------------------------+| @@GLOBAL.TRANSACTION_ISOLATION |+--------------------------------+| READ-COMMITTED                 |+--------------------------------+</code></pre><p>这样，再有新的事务连接进来时，它们就只能查询到已经提交过的事务数据了。但是对于当前事务来说，它们看到的还是未提交的数据，例如：</p><pre class=" language-mysql"><code class="language-mysql">-- 正在操作数据事务（当前事务）START TRANSACTION;UPDATE user SET money = money - 800 WHERE name = '小明';UPDATE user SET money = money + 800 WHERE name = '淘宝店';-- 虽然隔离级别被设置为了 READ COMMITTED，但在当前事务中，-- 它看到的仍然是数据表中临时改变数据，而不是真正提交过的数据。SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |   200 ||  4 | 淘宝店    |  1800 |+----+-----------+-------+-- 假设此时在远程开启了一个新事务，连接到数据库。$ mysql -u root -p12345612-- 此时远程连接查询到的数据只能是已经提交过的SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |  1000 ||  4 | 淘宝店    |  1000 |+----+-----------+-------+</code></pre><p>但是这样还有问题，那就是假设一个事务在操作数据时，其他事务干扰了这个事务的数据。例如：</p><pre class=" language-mysql"><code class="language-mysql">-- 小张在查询数据的时候发现：SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |   200 ||  4 | 淘宝店    |  1800 |+----+-----------+-------+-- 在小张求表的 money 平均值之前，小王做了一个操作：START TRANSACTION;INSERT INTO user VALUES (5, 'c', 100);COMMIT;-- 此时表的真实数据是：SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |  1000 ||  4 | 淘宝店    |  1000 ||  5 | c         |   100 |+----+-----------+-------+-- 这时小张再求平均值的时候，就会出现计算不相符合的情况：SELECT AVG(money) FROM user;+------------+| AVG(money) |+------------+|  820.0000  |+------------+</code></pre><p>虽然 <strong>READ COMMITTED</strong> 让我们只能读取到其他事务已经提交的数据，但还是会出现问题，就是<strong>在读取同一个表的数据时，可能会发生前后不一致的情况。</strong>这被称为<strong>不可重复读现象 ( READ COMMITTED )</strong> 。</p><h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><p>将隔离级别设置为 <strong>REPEATABLE READ ( 可被重复读取 )</strong> :</p><pre class=" language-mysql"><code class="language-mysql">SET GLOBAL TRANSACTION ISOLATION LEVEL REPEATABLE READ;SELECT @@GLOBAL.TRANSACTION_ISOLATION;+--------------------------------+| @@GLOBAL.TRANSACTION_ISOLATION |+--------------------------------+| REPEATABLE-READ                |+--------------------------------+</code></pre><p>测试 <strong>REPEATABLE READ</strong> ，假设在两个不同的连接上分别执行 <code>START TRANSACTION</code> :</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 小张 - 成都</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 小王 - 北京</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 小张 - 成都</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span></code></pre><p>当前事务开启后，没提交之前，查询不到，提交后可以被查询到。但是，在提交之前其他事务被开启了，那么在这条事务线上，就不会查询到当前有操作事务的连接。相当于开辟出一条单独的线程。</p><p>无论小张是否执行过 <code>COMMIT</code> ，在小王这边，都不会查询到小张的事务记录，而是只会查询到自己所处事务的记录：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name      <span class="token operator">|</span> money <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">a</span>         <span class="token operator">|</span>   <span class="token number">900</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">b</span>         <span class="token operator">|</span>  <span class="token number">1100</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 小明      <span class="token operator">|</span>  <span class="token number">1000</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 淘宝店    <span class="token operator">|</span>  <span class="token number">1000</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> <span class="token number">c</span>         <span class="token operator">|</span>   <span class="token number">100</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+-------+</span></code></pre><p>这是<strong>因为小王在此之前开启了一个新的事务 ( <code>START TRANSACTION</code> ) **，那么</strong>在他的这条新事务的线上，跟其他事务是没有联系的**，也就是说，此时如果其他事务正在操作数据，它是不知道的。</p><p>然而事实是，在真实的数据表中，小张已经插入了一条数据。但是小王此时并不知道，也插入了同一条数据，会发生什么呢？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ERROR 1062 (23000): Duplicate entry '6' for key 'PRIMARY'</span></code></pre><p>报错了，操作被告知已存在主键为 <code>6</code> 的字段。这种现象也被称为<strong>幻读，一个事务提交的数据，不能被其他事务读取到</strong>。</p><h4 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h4><p>顾名思义，就是所有事务的<strong>写入操作</strong>全都是串行化的。什么意思？把隔离级别修改成 <strong>SERIALIZABLE</strong> :</p><pre class=" language-mysql"><code class="language-mysql">SET GLOBAL TRANSACTION ISOLATION LEVEL SERIALIZABLE;SELECT @@GLOBAL.TRANSACTION_ISOLATION;+--------------------------------+| @@GLOBAL.TRANSACTION_ISOLATION |+--------------------------------+| SERIALIZABLE                   |+--------------------------------+</code></pre><p>还是拿小张和小王来举例：</p><pre class=" language-mysql"><code class="language-mysql">-- 小张 - 成都START TRANSACTION;-- 小王 - 北京START TRANSACTION;-- 开启事务之前先查询表，准备操作数据。SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |  1000 ||  4 | 淘宝店    |  1000 ||  5 | c         |   100 ||  6 | d         |  1000 |+----+-----------+-------+-- 发现没有 7 号王小花，于是插入一条数据：INSERT INTO user VALUES (7, '王小花', 1000);</code></pre><p>此时会发生什么呢？由于现在的隔离级别是 <strong>SERIALIZABLE ( 串行化 )</strong> ，串行化的意思就是：假设把所有的事务都放在一个串行的队列中，那么所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong> ( <strong>这意味着队列中同时只能执行一个事务的写入操作</strong> ) 。</p><p>根据这个解释，小王在插入数据时，会出现等待状态，直到小张执行 <code>COMMIT</code> 结束它所处的事务，或者出现等待超时。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MYSQL&quot;&gt;&lt;a href=&quot;#MYSQL&quot; class=&quot;headerlink&quot; title=&quot;MYSQL&quot;&gt;&lt;/a&gt;MYSQL&lt;/h1&gt;&lt;h2 id=&quot;登录数据库&quot;&gt;&lt;a href=&quot;#登录数据库&quot; class=&quot;headerlink&quot; title=&quot;登录数
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>面试题64.求1+2+…+n</title>
    <link href="https://liuhuaqiang.top/2020/06/02/mian-shi-ti-64-qiu-1-2-n/"/>
    <id>https://liuhuaqiang.top/2020/06/02/mian-shi-ti-64-qiu-1-2-n/</id>
    <published>2020-06-02T01:16:05.000Z</published>
    <updated>2020-06-02T01:22:37.379Z</updated>
    
    <content type="html"><![CDATA[<h4 id="面试题64-求1-2-…-n"><a href="#面试题64-求1-2-…-n" class="headerlink" title="面试题64. 求1+2+…+n"></a><a href="https://leetcode-cn.com/problems/qiu-12n-lcof/" target="_blank" rel="noopener">面试题64. 求1+2+…+n</a></h4><pre class=" language-bash"><code class="language-bash">求 1+2+<span class="token punctuation">..</span>.+n ，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。示例 1：输入: n <span class="token operator">=</span> 3输出: 6示例 2：输入: n <span class="token operator">=</span> 9输出: 45限制： 1 <span class="token operator">&lt;=</span> n <span class="token operator">&lt;=</span> 10000</code></pre><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">quick_c</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span>  b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span>  ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans<span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">quick_c</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c">解题思路：本题在简单问题上做了许多限制，需要使用排除法一步步导向答案。<span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span>n1<span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token punctuation">(</span>n−<span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>n 的计算方法主要有三种：平均计算、迭代、递归。方法一： 平均计算问题： 此计算必须使用 乘除法 ，因此本方法不可取，直接排除。javapythonpublic <span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span>方法二： 迭代问题： 循环必须使用 whilewhile 或 forfor ，因此本方法不可取，直接排除。javapythonpublic <span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        res <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span>方法三： 递归问题： 终止条件需要使用 ifif ，因此本方法不可取。思考： 除了 ifif 和 switchswitch 等判断语句外，是否有其他方法可用来终止递归？javapythonpublic <span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    n <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">sumNums</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span>逻辑运算符的短路效应：常见的逻辑运算符有三种，即 “与 \<span class="token operator">&amp;</span>\<span class="token operator">&amp;&amp;</span><span class="token operator">&amp;</span> ”，“或 <span class="token operator">||</span>∣∣ ”，“非 <span class="token operator">!</span><span class="token operator">!</span> ” ；而其有重要的短路效应，如下所示：<span class="token keyword">if</span><span class="token punctuation">(</span>A <span class="token operator">&amp;&amp;</span> B<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 若 A 为 false ，则 B 的判断不会执行（即短路），直接判定 A &amp;&amp; B 为 false</span><span class="token keyword">if</span><span class="token punctuation">(</span>A <span class="token operator">||</span> B<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 若 A 为 true ，则 B 的判断不会执行（即短路），直接判定 A || B 为 true</span>本题需要实现 “当 n <span class="token operator">=</span> 1n<span class="token operator">=</span><span class="token number">1</span> 时终止递归” 的需求，可通过短路效应实现。n <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sumNums</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当 n = 1 时 n > 1 不成立 ，此时 “短路” ，终止后续递归</span>复杂度分析：时间复杂度 <span class="token function">O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token function">O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> ： 计算 n <span class="token operator">+</span> <span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> 1n<span class="token operator">+</span><span class="token punctuation">(</span>n−<span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span> 需要开启 nn 个递归函数。空间复杂度 <span class="token function">O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token function">O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> ： 递归深度达到 nn ，系统使用 <span class="token function">O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token function">O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> 大小的额外空间。代码：Java 中，为构成语句，需加一个辅助布尔量 xx ，否则会报错；Java 中，开启递归函数需改写为 <span class="token function">sumNums</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> ，此整体作为一个布尔量输出，否则会报错；初始化变量 resres 记录结果。（ Java 可使用第二栏的简洁写法，不用借助变量 resres ）。javajavapythonclass Solution <span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    public <span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        boolean x <span class="token operator">=</span> n <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sumNums</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>        res <span class="token operator">+</span><span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c">方法二：快速乘思路和算法考虑 A 和 B 两数相乘的时候我们如何利用加法和位运算来模拟，其实就是将 B 二进制展开，如果 B 的二进制表示下第 ii 位为 <span class="token number">1</span>，那么这一位对最后结果的贡献就是 A<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span>A∗<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span> ，即 A<span class="token operator">&lt;&lt;</span>iA<span class="token operator">&lt;&lt;</span>i。我们遍历 B 二进制展开下的每一位，将所有贡献累加起来就是最后的答案，这个方法也被称作「俄罗斯农民乘法」，感兴趣的读者可以自行网上搜索相关资料。这个方法经常被用于两数相乘取模的场景，如果两数相乘已经超过数据范围，但取模后不会超过，我们就可以利用这个方法来拆位取模计算贡献，保证每次运算都在数据范围内。下面给出这个算法的 C<span class="token operator">++</span> 实现：<span class="token keyword">int</span> <span class="token function">quickMulti</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> B<span class="token punctuation">;</span> B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span>回到本题，由等差数列求和公式我们可以知道 <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> \cdots <span class="token operator">+</span> n1<span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span>⋯<span class="token operator">+</span>n 等价于 \frac<span class="token punctuation">{</span><span class="token function">n</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span> <span class="token number">2</span><span class="token function">n</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>​     ，对于除以 <span class="token number">22</span> 我们可以用右移操作符来模拟，那么等式变成了 <span class="token function">n</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token function">1n</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span>，剩下不符合题目要求的部分即为 <span class="token function">n</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">n</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>，根据上文提及的快速乘，我们可以将两个数相乘用加法和位运算来模拟，但是可以看到上面的 C<span class="token operator">++</span> 实现里我们还是需要循环语句，有没有办法去掉这个循环语句呢？答案是有的，那就是自己手动展开，因为题目数据范围 nn 为 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">]</span>，所以 nn 二进制展开最多不会超过 <span class="token number">1414</span> 位，我们手动展开 <span class="token number">1414</span> 层代替循环即可，至此满足了题目的要求，具体实现可以参考下面给出的代码。C<span class="token operator">++</span>JavaTypeScriptGolangclass Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> A <span class="token operator">=</span> n<span class="token punctuation">,</span> B <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>复杂度分析时间复杂度：<span class="token function">O</span><span class="token punctuation">(</span>\log n<span class="token punctuation">)</span><span class="token function">O</span><span class="token punctuation">(</span>logn<span class="token punctuation">)</span>。快速乘需要的时间复杂度为 <span class="token function">O</span><span class="token punctuation">(</span>\log n<span class="token punctuation">)</span><span class="token function">O</span><span class="token punctuation">(</span>logn<span class="token punctuation">)</span>。空间复杂度：<span class="token function">O</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">O</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>。只需要常数空间存放若干变量</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;面试题64-求1-2-…-n&quot;&gt;&lt;a href=&quot;#面试题64-求1-2-…-n&quot; class=&quot;headerlink&quot; title=&quot;面试题64. 求1+2+…+n&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/q
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
      <category term="面试题" scheme="https://liuhuaqiang.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>974.和可被整除的子数组</title>
    <link href="https://liuhuaqiang.top/2020/05/27/974.he-ke-bei-k-zheng-chu-de-zi-shu-zu/"/>
    <id>https://liuhuaqiang.top/2020/05/27/974.he-ke-bei-k-zheng-chu-de-zi-shu-zu/</id>
    <published>2020-05-27T01:50:35.000Z</published>
    <updated>2020-05-27T02:20:03.552Z</updated>
    
    <content type="html"><![CDATA[<h4 id="974-和可被-K-整除的子数组"><a href="#974-和可被-K-整除的子数组" class="headerlink" title="974. 和可被 K 整除的子数组"></a><a href="https://leetcode-cn.com/problems/subarray-sums-divisible-by-k/" target="_blank" rel="noopener">974. 和可被 K 整除的子数组</a></h4><p>难度中等80</p><p>给定一个整数数组 <code>A</code>，返回其中元素之和可被 <code>K</code> 整除的（连续、非空）子数组的数目。</p><p><strong>示例：</strong></p><pre><code>输入：A = [4,5,0,-2,-3,1], K = 5输出：7解释：有 7 个子数组满足其元素之和可被 K = 5 整除：[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]</code></pre><p><strong>提示：</strong></p><ol><li><code>1 &lt;= A.length &lt;= 30000</code></li><li><code>-10000 &lt;= A[i] &lt;= 10000</code></li><li><code>2 &lt;= K &lt;= 10000</code></li></ol><p><img src="https://i.imgur.com/9ohUg6u.png" alt="Imgur"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">subarraysDivByK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> K<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> modulus <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">%</span> K <span class="token operator">+</span> K<span class="token punctuation">)</span> <span class="token operator">%</span> K<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>modulus<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>modulus<span class="token punctuation">)</span><span class="token punctuation">;</span>                ret<span class="token operator">+=</span>temp<span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>modulus<span class="token punctuation">,</span> temp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>modulus<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;974-和可被-K-整除的子数组&quot;&gt;&lt;a href=&quot;#974-和可被-K-整除的子数组&quot; class=&quot;headerlink&quot; title=&quot;974. 和可被 K 整除的子数组&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/prob
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
      <category term="前缀和" scheme="https://liuhuaqiang.top/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>287.寻找重复数</title>
    <link href="https://liuhuaqiang.top/2020/05/26/287-xun-zhao-chong-fu-shu/"/>
    <id>https://liuhuaqiang.top/2020/05/26/287-xun-zhao-chong-fu-shu/</id>
    <published>2020-05-26T02:24:52.000Z</published>
    <updated>2020-05-26T02:27:29.904Z</updated>
    
    <content type="html"><![CDATA[<h4 id="287-寻找重复数"><a href="#287-寻找重复数" class="headerlink" title="287. 寻找重复数"></a><a href="https://leetcode-cn.com/problems/find-the-duplicate-number/" target="_blank" rel="noopener">287. 寻找重复数</a></h4><p>难度中等597</p><p>给定一个包含 <em>n</em> + 1 个整数的数组 <em>nums*，其数字都在 1 到 *n</em> 之间（包括 1 和 <em>n</em>），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。</p><p><strong>示例 1:</strong></p><pre><code>输入: [1,3,4,2,2]输出: 2</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: [3,1,3,4,2]输出: 3</code></pre><p><strong>说明：</strong></p><ol><li><p><strong>不能</strong>更改原数组（假设数组是只读的）。</p></li><li><p>只能使用额外的 <em>O</em>(1) 的空间。</p></li><li><p>时间复杂度小于 <em>O</em>(<em>n</em>2) 。</p></li><li><p>数组中只有一个重复的数字，但它可能不止重复出现一次。</p><p><img src="https://i.imgur.com/qN1YXyt.gif" alt></p><p><img src="https://i.imgur.com/1fhtLG9.png" alt="Imgur"></p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>            ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token punctuation">{</span>                    ans<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">></span>mid<span class="token punctuation">)</span><span class="token punctuation">{</span>                r <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                l <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;287-寻找重复数&quot;&gt;&lt;a href=&quot;#287-寻找重复数&quot; class=&quot;headerlink&quot; title=&quot;287. 寻找重复数&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/find-the-duplica
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>python里调用js代码</title>
    <link href="https://liuhuaqiang.top/2020/05/23/python-li-diao-yong-js-dai-ma/"/>
    <id>https://liuhuaqiang.top/2020/05/23/python-li-diao-yong-js-dai-ma/</id>
    <published>2020-05-23T07:50:37.000Z</published>
    <updated>2020-06-24T02:40:59.034Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h1><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> execjs</code></pre><h2 id="直接调用"><a href="#直接调用" class="headerlink" title="直接调用"></a>直接调用</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> execjsjs <span class="token operator">=</span> <span class="token triple-quoted-string string">"""add = function(a,b){    return a+b;}"""</span>ctx <span class="token operator">=</span> execjs<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  第一个参数为js代码里面的函数名字<span class="token punctuation">,</span>后面的参数是函数参数</code></pre><h2 id="调用js文件"><a href="#调用js文件" class="headerlink" title="调用js文件"></a>调用js文件</h2><pre class=" language-python"><code class="language-python">js<span class="token punctuation">:</span><span class="token triple-quoted-string string">"""add = function(a,b){    return a+b;}"""</span><span class="token keyword">import</span> execjsjs_str <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"add.js"</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>    js_str <span class="token operator">+=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>js_str<span class="token punctuation">)</span>a <span class="token operator">=</span> execjs<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>js_str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token number">545</span><span class="token punctuation">,</span> <span class="token number">4545</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装包&quot;&gt;&lt;a href=&quot;#安装包&quot; class=&quot;headerlink&quot; title=&quot;安装包&quot;&gt;&lt;/a&gt;安装包&lt;/h1&gt;&lt;pre class=&quot; language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;pip &lt;span cla
      
    
    </summary>
    
    
    
      <category term="python学习" scheme="https://liuhuaqiang.top/tags/python%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Pycharm连接到远程服务器</title>
    <link href="https://liuhuaqiang.top/2020/05/22/pycharm-lian-jie-dao-yuan-cheng-fu-wu-qi/"/>
    <id>https://liuhuaqiang.top/2020/05/22/pycharm-lian-jie-dao-yuan-cheng-fu-wu-qi/</id>
    <published>2020-05-22T01:31:36.000Z</published>
    <updated>2020-06-24T02:41:14.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="连接到SSH"><a href="#连接到SSH" class="headerlink" title="连接到SSH"></a>连接到SSH</h1><p><img src="https://i.imgur.com/krG8K0e.png" alt="Imgur"></p><p><img src="https://i.imgur.com/1YVJFlH.png" alt="Imgur"></p><p>输入对的Ip端口,账号密码就可以连接了,</p><p>需要改一下ssh中文,编码</p><p><img src="https://i.imgur.com/FlJK6Nm.png" alt="Imgur"></p><p>这样就可以正常显示中文了</p><h1 id="远程连接文件夹项目"><a href="#远程连接文件夹项目" class="headerlink" title="远程连接文件夹项目"></a>远程连接文件夹项目</h1><p>在本地我新建了一个名字叫做linux的文件夹,来储存服务器上的</p><p>然后点击如图所示</p><p><img src="https://i.imgur.com/W596AfF.png" alt></p><p>这里选择SFTP</p><p>这里的Root path 是你确定服务器上哪个文件夹当作根目录来使用(当时用/root),</p><p><img src="https://i.imgur.com/Cot9znr.png" alt="Imgur"></p><p>选择保存到的本地地址,和服务器上的哪个文件夹</p><p><img src="https://i.imgur.com/wVDCmKT.png" alt="Imgur"></p><p>下载上传就不用说了,勾选自动上传</p><p><img src="https://i.imgur.com/Buxq2Wh.png" alt="Imgur"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;连接到SSH&quot;&gt;&lt;a href=&quot;#连接到SSH&quot; class=&quot;headerlink&quot; title=&quot;连接到SSH&quot;&gt;&lt;/a&gt;连接到SSH&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/krG8K0e.png&quot; alt=&quot;Imgur&quot;
      
    
    </summary>
    
    
    
      <category term="python学习" scheme="https://liuhuaqiang.top/tags/python%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="linux" scheme="https://liuhuaqiang.top/tags/linux/"/>
    
      <category term="学习小技巧" scheme="https://liuhuaqiang.top/tags/%E5%AD%A6%E4%B9%A0%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>在python里调用c语言代码</title>
    <link href="https://liuhuaqiang.top/2020/05/21/zai-python-li-diao-yong-c-yu-yan-dai-ma/"/>
    <id>https://liuhuaqiang.top/2020/05/21/zai-python-li-diao-yong-c-yu-yan-dai-ma/</id>
    <published>2020-05-21T13:27:30.000Z</published>
    <updated>2020-06-24T02:41:34.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p>c语言代码</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    sum<span class="token operator">+</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>需要用gcc 编译</p><p>此c语言的文件名为cName</p><p>编程成的so文件的名字为xName</p><pre class=" language-bash"><code class="language-bash">gcc -shared -Wl,-soname,xName -o Xname.so -fPIC cName</code></pre><p>编译命令我写了个python脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osfile_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"输入你要转换的c语言的文件名:"</span><span class="token punctuation">)</span>file_name2 <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"编译成的so文件的名字:"</span><span class="token punctuation">)</span>shell <span class="token operator">=</span> f<span class="token string">"gcc -shared -Wl,-soname,{file_name2} -o {file_name2}.dll -fPIC {file_name}"</span><span class="token keyword">print</span><span class="token punctuation">(</span>shell<span class="token punctuation">)</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>shell<span class="token punctuation">)</span></code></pre><p>编译成.so文件后</p><p>写python代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> ctypesresult <span class="token operator">=</span> ctypes<span class="token punctuation">.</span>cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'./add.so'</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">*</span><span class="token number">705082704</span><span class="token number">705082704</span><span class="token operator">*</span><span class="token operator">/</span></code></pre><h1 id="Win"><a href="#Win" class="headerlink" title="Win"></a>Win</h1><p>编译命令的.so改为.dll</p><pre class=" language-bash"><code class="language-bash">gcc -shared -Wl,-soname,xName -o Xname.dll -fPIC cName</code></pre><p>会报错</p><p>原因: 此.dll文件也需要.dll依赖,,所以</p><p>Win 安装cygwin ,这是一个软件,</p><p>输入命令查看差哪些依赖</p><pre class=" language-c"><code class="language-c">ldd add<span class="token punctuation">.</span>dll<span class="token comment" spellcheck="true">/*ldd add.dll        ntdll.dll => /cygdrive/c/Windows/SYSTEM32/ntdll.dll (0x7ffe68360000)        KERNEL32.DLL => /cygdrive/c/Windows/System32/KERNEL32.DLL (0x7ffe66d20000)        KERNELBASE.dll => /cygdrive/c/Windows/System32/KERNELBASE.dll (0x7ffe652f0000)        apphelp.dll => /cygdrive/c/Windows/SYSTEM32/apphelp.dll (0x7ffe62fe0000)        add.dll => /cygdrive/e/python/cTopython/add.dll (0x71140000)*/</span></code></pre><p>PS: 我现在没成功</p><h1 id="放大招Cython"><a href="#放大招Cython" class="headerlink" title="放大招Cython"></a>放大招Cython</h1><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> Cpython  //Anaconda自带</code></pre><p>首先Win要安装vs2019,安装下面两个</p><p><img src="https://i.imgur.com/nYDQHnu.png" alt="Imgur"></p><p>准备工作就完成了</p><p>首先新建一个fib.pyx文件,这个格式是c语言和python公共的格式</p><p>cpdef c和python公用函数</p><p>cdef c语言用函数</p><p>def python语言函数</p><pre class=" language-c"><code class="language-c">cpdef <span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span></code></pre><p>新建setup.py文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> distutils<span class="token punctuation">.</span>core <span class="token keyword">import</span> setup<span class="token keyword">from</span> distutils<span class="token punctuation">.</span>extension <span class="token keyword">import</span> Extension<span class="token keyword">from</span> Cython<span class="token punctuation">.</span>Distutils <span class="token keyword">import</span> build_extfilename <span class="token operator">=</span> <span class="token string">'fib'</span>  <span class="token comment" spellcheck="true"># 源文件名 编译后的名字</span>full_filename <span class="token operator">=</span> <span class="token string">'fib.pyx'</span>  <span class="token comment" spellcheck="true"># 包含后缀的源文件名   编译前名字</span>setup<span class="token punctuation">(</span>    cmdclass<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'build_ext'</span><span class="token punctuation">:</span> build_ext<span class="token punctuation">}</span><span class="token punctuation">,</span>    ext_modules<span class="token operator">=</span><span class="token punctuation">[</span>Extension<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token punctuation">[</span>full_filename<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 配置需要cython编译的源文件</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#  python setup.py build_ext --inplace</span></code></pre><hr><p>分割线</p><p>还可以用第二种方法,推荐第二种</p><p>直接纯用c语言写代码</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>保存为<span class="token punctuation">.</span>h文件</code></pre><p>再写一个.pyx文件</p><pre class=" language-python"><code class="language-python">cdef extern <span class="token keyword">from</span> <span class="token string">"fib.h"</span><span class="token punctuation">:</span>    cdef int fib<span class="token punctuation">(</span>int n<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fib_py</span><span class="token punctuation">(</span>int n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> fib<span class="token punctuation">(</span>n<span class="token punctuation">)</span></code></pre><p>分割线结束</p><hr><p>然后在命令行里面</p><pre class=" language-bash"><code class="language-bash"> python setup.py build_ext --inplace</code></pre><p>会生成build文件夹和fib.cp37-win_amd64.pyd文件,</p><p><img src="https://i.imgur.com/D7z8CRB.png" alt="Imgur"></p><p>我们只需要导入fib包就可以使用了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> fib<span class="token keyword">import</span> timet1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>fib<span class="token punctuation">.</span>fib<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t2<span class="token operator">-</span>t1<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">return</span> fib<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span>fib<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span>t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>fib<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t2<span class="token operator">-</span>t1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">*</span><span class="token number">0.726057767868042</span><span class="token number">51.39848494529724</span><span class="token operator">*</span><span class="token operator">/</span><span class="token comment" spellcheck="true"># 你可以看看差距有点大,太大了</span></code></pre><p>至此,,骚操作都完成了</p><p>PS : linux下用这个一定要装python-dev和gcc,当然python必须的</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Centos</span>yum <span class="token function">install</span> python3-devel<span class="token comment" spellcheck="true"># Ubuntu</span><span class="token function">apt-get</span> <span class="token function">install</span> python3-dev</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux&quot;&gt;&lt;a href=&quot;#Linux&quot; class=&quot;headerlink&quot; title=&quot;Linux&quot;&gt;&lt;/a&gt;Linux&lt;/h1&gt;&lt;p&gt;c语言代码&lt;/p&gt;
&lt;pre class=&quot; language-c&quot;&gt;&lt;code class=&quot;language-c
      
    
    </summary>
    
    
    
      <category term="python学习" scheme="https://liuhuaqiang.top/tags/python%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="linux" scheme="https://liuhuaqiang.top/tags/linux/"/>
    
      <category term="学习小技巧" scheme="https://liuhuaqiang.top/tags/%E5%AD%A6%E4%B9%A0%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>1371.每个元音包含偶数次的最长子字符串</title>
    <link href="https://liuhuaqiang.top/2020/05/20/1371-mei-ge-yuan-yin-bao-han-ou-shu-ci-de-zui-chang-zi-zi-fu-chuan/"/>
    <id>https://liuhuaqiang.top/2020/05/20/1371-mei-ge-yuan-yin-bao-han-ou-shu-ci-de-zui-chang-zi-zi-fu-chuan/</id>
    <published>2020-05-20T01:27:41.000Z</published>
    <updated>2020-05-20T01:32:21.142Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1371-每个元音包含偶数次的最长子字符串"><a href="#1371-每个元音包含偶数次的最长子字符串" class="headerlink" title="1371. 每个元音包含偶数次的最长子字符串"></a><a href="https://leetcode-cn.com/problems/find-the-longest-substring-containing-vowels-in-even-counts/" target="_blank" rel="noopener">1371. 每个元音包含偶数次的最长子字符串</a></h4><pre class=" language-bash"><code class="language-bash">给你一个字符串 s ，请你返回满足以下条件的最长子字符串的长度：每个元音字母，即 <span class="token string">'a'</span>，<span class="token string">'e'</span>，<span class="token string">'i'</span>，<span class="token string">'o'</span>，<span class="token string">'u'</span> ，在子字符串中都恰好出现了偶数次。示例 1：输入：s <span class="token operator">=</span> <span class="token string">"eleetminicoworoep"</span>输出：13解释：最长子字符串是 <span class="token string">"leetminicowor"</span> ，它包含 e，i，o 各 2 个，以及 0 个 a，u 。示例 2：输入：s <span class="token operator">=</span> <span class="token string">"leetcodeisgreat"</span>输出：5解释：最长子字符串是 <span class="token string">"leetc"</span> ，其中包含 2 个 e 。示例 3：输入：s <span class="token operator">=</span> <span class="token string">"bcbcbc"</span>输出：6解释：这个示例中，字符串 <span class="token string">"bcbcbc"</span> 本身就是最长的，因为所有的元音 a，e，i，o，u 都出现了 0 次。来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/find-the-longest-substring-containing-vowels-in-even-counts著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><p><img src="https://i.imgur.com/mIWool9.png" alt></p><p><img src="https://i.imgur.com/D8TXcM8.png" alt></p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">findTheLongestSubstring</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vis</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'u'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">==</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">{</span>                vis<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span>i<span class="token operator">-</span>vis<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1371-每个元音包含偶数次的最长子字符串&quot;&gt;&lt;a href=&quot;#1371-每个元音包含偶数次的最长子字符串&quot; class=&quot;headerlink&quot; title=&quot;1371. 每个元音包含偶数次的最长子字符串&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetc
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
      <category term="hard" scheme="https://liuhuaqiang.top/tags/hard/"/>
    
  </entry>
  
  <entry>
    <title>Docker 学习</title>
    <link href="https://liuhuaqiang.top/2020/05/20/docker-xue-xi/"/>
    <id>https://liuhuaqiang.top/2020/05/20/docker-xue-xi/</id>
    <published>2020-05-19T16:00:00.000Z</published>
    <updated>2020-06-02T07:26:09.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-学习"><a href="#Docker-学习" class="headerlink" title="Docker 学习"></a>Docker 学习</h1><h2 id="开启Docker服务"><a href="#开启Docker服务" class="headerlink" title="开启Docker服务"></a>开启Docker服务</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> docker startsystemctl daemon-reloadsystemctl restart docker.service</code></pre><h2 id="镜像开始运行"><a href="#镜像开始运行" class="headerlink" title="镜像开始运行"></a>镜像开始运行</h2><pre class=" language-bash"><code class="language-bash">docker start <span class="token function">id</span></code></pre><h2 id="进入镜像"><a href="#进入镜像" class="headerlink" title="进入镜像"></a>进入镜像</h2><pre class=" language-bash"><code class="language-bash">docker attach <span class="token function">id</span></code></pre><h2 id="重启镜像"><a href="#重启镜像" class="headerlink" title="重启镜像"></a>重启镜像</h2><pre class=" language-bash"><code class="language-bash">docker restart <span class="token function">id</span></code></pre><h2 id="停止镜像"><a href="#停止镜像" class="headerlink" title="停止镜像"></a>停止镜像</h2><pre class=" language-bash"><code class="language-bash">docker stop <span class="token function">id</span></code></pre><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><pre class=" language-bash"><code class="language-bash">docker rmi <span class="token function">id</span>可能要先删除容器docker <span class="token function">rm</span> <span class="token function">id</span>不能删除的话就强制删除docker rmi -f <span class="token function">id</span></code></pre><h2 id="最常用的镜像"><a href="#最常用的镜像" class="headerlink" title="最常用的镜像"></a>最常用的镜像</h2><pre class=" language-bash"><code class="language-bash">docker pull ubuntudocker run -it -v ~/docker-ubuntu:/root/docker-ubuntu --name ubuntu ubuntudocker run -it -v  本机目录挂载   到   docker目录       --name 新的命名 打开的镜像名字-p 8080:8888  把主机上的8080端口,转发到docker上的8888端口-d 后台运行</code></pre><h2 id="保存镜像文件"><a href="#保存镜像文件" class="headerlink" title="保存镜像文件"></a>保存镜像文件</h2><pre class=" language-bash"><code class="language-bash">由于容器内的修改不会自动保存，所以需要对容器进行一个保存。使用docker <span class="token function">ps</span> -a 查看容器id并使用docker commit 保存镜像docker commit <span class="token function">id</span> name</code></pre><h1 id="查看当前的镜像"><a href="#查看当前的镜像" class="headerlink" title="查看当前的镜像"></a>查看当前的镜像</h1><pre class=" language-bash"><code class="language-bash">docker images</code></pre><h2 id="查看当前的运行的容器"><a href="#查看当前的运行的容器" class="headerlink" title="查看当前的运行的容器"></a>查看当前的运行的容器</h2><pre class=" language-bash"><code class="language-bash">docker <span class="token function">ps</span>查看所以容器docker <span class="token function">ps</span> -a</code></pre><h2 id="开机自启docker服务"><a href="#开机自启docker服务" class="headerlink" title="开机自启docker服务"></a>开机自启docker服务</h2><pre class=" language-bash"><code class="language-bash">systemctl <span class="token function">enable</span> docker</code></pre><h2 id="docker-启动时-总是自启动容器"><a href="#docker-启动时-总是自启动容器" class="headerlink" title="docker 启动时,总是自启动容器"></a>docker 启动时,总是自启动容器</h2><pre class=" language-bash"><code class="language-bash">--restart<span class="token operator">=</span>always</code></pre><p>解决ubuntu中文问题</p><p><a href="https://blog.csdn.net/yiwanxingchena/article/details/83900284" target="_blank" rel="noopener">https://blog.csdn.net/yiwanxingchena/article/details/83900284</a></p><pre class=" language-bash"><code class="language-bash">方法一：     <span class="token punctuation">(</span>0<span class="token punctuation">)</span>.查看容器语言环境         $ locale         LANG<span class="token operator">=</span>         LANGUAGE<span class="token operator">=</span>         LC_CTYPE<span class="token operator">=</span><span class="token string">"POSIX"</span>         <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>     <span class="token punctuation">(</span>1<span class="token punctuation">)</span>.查看容器支持的语言         $ locale -a          C          C.UTF-8          POSIX     <span class="token punctuation">(</span>2<span class="token punctuation">)</span>.修改 /etc/profile         $ <span class="token function">vi</span> /etc/profile            在最后添加 <span class="token function">export</span>  LANG<span class="token operator">=</span>C.UTF-8     <span class="token punctuation">(</span>3<span class="token punctuation">)</span>.重新加载环境变量         $ <span class="token function">source</span> /etc/profile     <span class="token punctuation">(</span>4<span class="token punctuation">)</span>.再次查看         $ locale         LANG<span class="token operator">=</span>C.UTF-8         LANGUAGE<span class="token operator">=</span>         LC_CTYPE<span class="token operator">=</span><span class="token string">"C.UTF-8"</span>         <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> 方法二：      在Dockerfile中添加 ENV LANG C.UTF-8 重新制作镜像————————————————版权声明：本文为CSDN博主「GO小胖」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/yiwanxingchena/java/article/details/83900284</code></pre><h1 id="安装可视化界面的docker管理"><a href="#安装可视化界面的docker管理" class="headerlink" title="安装可视化界面的docker管理"></a>安装可视化界面的docker管理</h1><p>为了更好的观察Docker运行状态，我们采用Portainer工具进行可视化，下面是部署过程总结：</p><p>环境：</p><p>Liunx:CentOS Linux release 7.6.1810 (Core)</p><p>Docker:19.03.5（备注：默认版本存在问题，升级可参考<a href="https://www.cnblogs.com/Bug-Hunter/p/12022491.html" target="_blank" rel="noopener">docker升级步骤及注意事项</a>）</p><p>部署步骤：</p><p>1、查询当前Portainer镜像，选择start值比较高的</p><p>命令：</p><p>docker search portainer</p><p>2、下载指定portainer镜像</p><p>命令：</p><p>docker pull portainer/portainer</p><p>3、本次只部署单机版，命令如下</p><p>docker run -d -p 9000:9000 –restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data –name prtainer-test portainer/portainer</p><p>如下图：</p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211153203115-79465651.png" alt="img"></p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211152823762-1999879810.png" alt="img"></p><p>参数说明：<br>-d：容器在后台运行；<br>-p 9000:9000 ：宿主机9000端口映射容器中的9000端口<br>–restart 标志会检查容器的退出代码，并据此来决定是否要重启容器，默认是不会重启。</p><p>–restart=always：自动重启该容器<br>-v /var/run/docker.sock:/var/run/docker.sock ：把宿主机的Docker守护进程(Docker daemon)默认监听的Unix域套接字挂载到容器中<br>-v portainer_data:/data ：把宿主机portainer_data数据卷挂载到容器/data目录<br>–name prtainer-test ： 给容器起名为portainer-test</p><p>4、使用docker ps查看进程，如下所示：</p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211153234806-1638544994.png" alt="img"></p><p> 如果需要汉化，可以下载<a href="https://pan.baidu.com/s/1BLXMSmJFcgESeNMhQL26Mg&shfl=sharepset" target="_blank" rel="noopener">汉化包</a>（提取码：6vjr）<a href="https://liuhuaqiang.lanzous.com/icu3qwd，之后解压，并将解压后的public文件夹上传到centos系统的根目录下，如下图所示：" target="_blank" rel="noopener">https://liuhuaqiang.lanzous.com/icu3qwd，之后解压，并将解压后的public文件夹上传到centos系统的根目录下，如下图所示：</a></p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211154002659-629104571.png" alt="img"></p><p>然后执行以下命令：</p><p>docker run -d -p 9000:9000 –restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data -v /public:/public –name prtainer-test portainer/portainer（如果已部署，需要将之前的容器删除）</p><p>5、Portainer的web页面登录</p><p>在浏览器输入部署服务器的IP:9000，回车，显示如下界面：</p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211154735320-1919071871.png" alt="img"></p><p> 由于是本地docker，所有选择local</p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211155241808-1937877821.png" alt="img"></p><p> 之后点击“Connect”，成功后跳转到主页界面（汉化后），如下图：</p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211154943016-14709007.png" alt="img"></p><p> 点击“local”，进入该docker内，展示相关容器、堆栈、镜像等信息，如下图所示：</p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211155743452-2143259224.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker-学习&quot;&gt;&lt;a href=&quot;#Docker-学习&quot; class=&quot;headerlink&quot; title=&quot;Docker 学习&quot;&gt;&lt;/a&gt;Docker 学习&lt;/h1&gt;&lt;h2 id=&quot;开启Docker服务&quot;&gt;&lt;a href=&quot;#开启Docker服务&quot; cla
      
    
    </summary>
    
    
    
      <category term="linux" scheme="https://liuhuaqiang.top/tags/linux/"/>
    
      <category term="docker" scheme="https://liuhuaqiang.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>152.乘积最大子数组</title>
    <link href="https://liuhuaqiang.top/2020/05/18/152-cheng-ji-zui-da-zi-shu-zu/"/>
    <id>https://liuhuaqiang.top/2020/05/18/152-cheng-ji-zui-da-zi-shu-zu/</id>
    <published>2020-05-18T01:08:10.000Z</published>
    <updated>2020-05-18T01:10:55.318Z</updated>
    
    <content type="html"><![CDATA[<h4 id="152-乘积最大子数组"><a href="#152-乘积最大子数组" class="headerlink" title="152. 乘积最大子数组"></a><a href="https://leetcode-cn.com/problems/maximum-product-subarray/" target="_blank" rel="noopener">152. 乘积最大子数组</a></h4><p>难度中等505</p><p>给你一个整数数组 <code>nums</code> ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p><p><strong>示例 1:</strong></p><pre class=" language-bash"><code class="language-bash">输入: <span class="token punctuation">[</span>2,3,-2,4<span class="token punctuation">]</span>输出: 6解释: 子数组 <span class="token punctuation">[</span>2,3<span class="token punctuation">]</span> 有最大乘积 6。</code></pre><p><strong>示例 2:</strong></p><pre class=" language-bash"><code class="language-bash">输入: <span class="token punctuation">[</span>-2,0,-1<span class="token punctuation">]</span>输出: 0解释: 结果不能为 2, 因为 <span class="token punctuation">[</span>-2,-1<span class="token punctuation">]</span> 不是子数组。</code></pre><p><img src="https://i.imgur.com/j53CzRh.png" alt></p><pre class=" language-c"><code class="language-c">我们可以根据正负性进行分类讨论。考虑当前位置如果是一个负数的话， 那么我们希望以它前一个位置结尾的某个段的积也是个负数，这样就可以负负得正，組我们希望这个积尽可能<span class="token punctuation">[</span> 负得更多，即尽可能小。如果当前位置是一个正数的话<span class="token punctuation">,</span>我们更希望以它前一个位置结尾的某个段的积也是个正数<span class="token punctuation">,</span>粗希望它尽可能地大。于是这里我们可以再维护<span class="token operator">-</span>一个<span class="token function">fmin</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> 它表示以第i个元素结尾的乘积最小子数组的乘积，那么我们可以得到这样的动态规划转移方程<span class="token punctuation">:</span>它代表第i个元素结尾的乘积最大子数组的乘积<span class="token function">fmax</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>可以考虑把a<span class="token punctuation">;</span>加入第i <span class="token operator">-</span> <span class="token number">1</span>个元素结尾的乘积最大或最小的子数组的乘积中，二者加上a<span class="token punctuation">;</span><span class="token punctuation">,</span>三者取大<span class="token punctuation">,</span>就是第i个元素结尾的乘积最大子数组的乘积。第i个元素结尾的乘积最小子数组的乘积<span class="token function">fmin</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>同理。不难给出这样的实现<span class="token punctuation">:</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n  <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minn <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>maxx <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> ma <span class="token operator">=</span> maxx<span class="token punctuation">;</span>            <span class="token keyword">int</span> mm <span class="token operator">=</span> minn<span class="token punctuation">;</span>            maxx <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxx<span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>mm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            minn <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>minn<span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>ma<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span>maxx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;152-乘积最大子数组&quot;&gt;&lt;a href=&quot;#152-乘积最大子数组&quot; class=&quot;headerlink&quot; title=&quot;152. 乘积最大子数组&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/maximum-pr
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>课程表</title>
    <link href="https://liuhuaqiang.top/2020/05/17/ke-cheng-biao/"/>
    <id>https://liuhuaqiang.top/2020/05/17/ke-cheng-biao/</id>
    <published>2020-05-17T02:05:57.000Z</published>
    <updated>2020-05-17T02:08:07.448Z</updated>
    
    <content type="html"><![CDATA[<h4 id="207-课程表"><a href="#207-课程表" class="headerlink" title="207. 课程表"></a><a href="https://leetcode-cn.com/problems/course-schedule/" target="_blank" rel="noopener">207. 课程表</a></h4><p>难度中等328</p><p>你这个学期必须选修 <code>numCourse</code> 门课程，记为 <code>0</code> 到 <code>numCourse-1</code> 。</p><p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们：<code>[0,1]</code></p><p>给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？</p><p><strong>示例 1:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 2, <span class="token punctuation">[</span><span class="token punctuation">[</span>1,0<span class="token punctuation">]</span><span class="token punctuation">]</span> 输出: <span class="token boolean">true</span>解释: 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。</code></pre><p><strong>示例 2:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 2, <span class="token punctuation">[</span><span class="token punctuation">[</span>1,0<span class="token punctuation">]</span>,<span class="token punctuation">[</span>0,1<span class="token punctuation">]</span><span class="token punctuation">]</span>输出: <span class="token boolean">false</span>解释: 总共有 2 门课程。学习课程 1 之前，你需要先完成课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。</code></pre><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> viss<span class="token punctuation">[</span><span class="token number">100050</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> edge<span class="token punctuation">[</span><span class="token number">100050</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    bool <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        viss<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        bool ret <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token punctuation">:</span>edge<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>viss<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>viss<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token operator">==</span>true <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ret <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                ret <span class="token operator">=</span> false<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        viss<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    bool <span class="token function">canFinish</span><span class="token punctuation">(</span><span class="token keyword">int</span> numCourses<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numCourses<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            viss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token punctuation">:</span>prerequisites<span class="token punctuation">)</span><span class="token punctuation">{</span>            edge<span class="token punctuation">[</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        bool ret <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numCourses<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>viss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> ret <span class="token operator">=</span> ret <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="210-课程表-II"><a href="#210-课程表-II" class="headerlink" title="210. 课程表 II"></a><a href="https://leetcode-cn.com/problems/course-schedule-ii/" target="_blank" rel="noopener">210. 课程表 II</a></h4><p>难度中等141</p><p>现在你总共有 <em>n</em> 门课需要选，记为 <code>0</code> 到 <code>n-1</code>。</p><p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: <code>[0,1]</code></p><p>给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。</p><p>可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。</p><p><strong>示例 1:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 2, <span class="token punctuation">[</span><span class="token punctuation">[</span>1,0<span class="token punctuation">]</span><span class="token punctuation">]</span> 输出: <span class="token punctuation">[</span>0,1<span class="token punctuation">]</span>解释: 总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 <span class="token punctuation">[</span>0,1<span class="token punctuation">]</span> 。</code></pre><p><strong>示例 2:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 4, <span class="token punctuation">[</span><span class="token punctuation">[</span>1,0<span class="token punctuation">]</span>,<span class="token punctuation">[</span>2,0<span class="token punctuation">]</span>,<span class="token punctuation">[</span>3,1<span class="token punctuation">]</span>,<span class="token punctuation">[</span>3,2<span class="token punctuation">]</span><span class="token punctuation">]</span>输出: <span class="token punctuation">[</span>0,1,2,3<span class="token punctuation">]</span> or <span class="token punctuation">[</span>0,2,1,3<span class="token punctuation">]</span>解释: 总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。     因此，一个正确的课程顺序是 <span class="token punctuation">[</span>0,1,2,3<span class="token punctuation">]</span> 。另一个正确的排序是 <span class="token punctuation">[</span>0,2,1,3<span class="token punctuation">]</span> 。</code></pre><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>private<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// 存储有向图</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> edges<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 标记每个节点的状态：0=未搜索，1=搜索中，2=已完成</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> visited<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用数组来模拟栈，下标 0 为栈底，n-1 为栈顶</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> result<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断有向图中是否有环</span>    bool invalid<span class="token punctuation">;</span>public<span class="token punctuation">:</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将节点标记为「搜索中」</span>        visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 搜索其相邻节点</span>        <span class="token comment" spellcheck="true">// 只要发现有环，立刻停止搜索</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">:</span> edges<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果「未搜索」那么搜索相邻节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>invalid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果「搜索中」说明找到了环</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                invalid <span class="token operator">=</span> true<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将节点标记为「已完成」</span>        visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将节点入栈</span>        result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>u<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">findOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span> numCourses<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">{</span>        edges<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>numCourses<span class="token punctuation">)</span><span class="token punctuation">;</span>        visited<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>numCourses<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> info<span class="token punctuation">:</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">{</span>            edges<span class="token punctuation">[</span>info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 每次挑选一个「未搜索」的节点，开始进行深度优先搜索</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numCourses <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>invalid<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>invalid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果没有环，那么就有拓扑排序</span>        <span class="token comment" spellcheck="true">// 注意下标 0 为栈底，因此需要将数组反序输出</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;207-课程表&quot;&gt;&lt;a href=&quot;#207-课程表&quot; class=&quot;headerlink&quot; title=&quot;207. 课程表&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/course-schedule/&quot; targ
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>反转链表</title>
    <link href="https://liuhuaqiang.top/2020/05/16/fan-zhuan-lian-biao/"/>
    <id>https://liuhuaqiang.top/2020/05/16/fan-zhuan-lian-biao/</id>
    <published>2020-05-16T02:48:12.000Z</published>
    <updated>2020-06-02T01:23:34.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><p>●定义两个指针: pre和cur ; pre在前cur在后。<br>●每次让pre的next指向cur，实现-次局部反转<br>●局部反转完成之后，pre和cur同时往后移动-一个位置<br>●循环上述过程，直至pre到达链表尾部</p><p><img src="https://i.imgur.com/dYHzv5N.gif" alt></p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>pre <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pre <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListNode<span class="token operator">*</span> t <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span>            pre<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>简洁的递归<br>●使用递归函数,一直递归到链表的最后-个结点,该结点就是反转后的头结点，记作ret .<br>●此后，每次函数在返回的过程中，让当前结点的下一个结点的next指针指向当前节点。<br>●同时让当前结点的next指针指向NULL，从而实现从链表尾部开始的局部反转<br>●当递归函数全部出栈后，链表反转完成。</p><p><img src="https://i.imgur.com/e9cyL2J.gif" alt></p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> head<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ListNode<span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;反转链表&quot;&gt;&lt;a href=&quot;#反转链表&quot; class=&quot;headerlink&quot; title=&quot;反转链表&quot;&gt;&lt;/a&gt;反转链表&lt;/h1&gt;&lt;p&gt;●定义两个指针: pre和cur ; pre在前cur在后。&lt;br&gt;●每次让pre的next指向cur，实现-次局部反转&lt;b
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
      <category term="面试题" scheme="https://liuhuaqiang.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>560.和为K的子数组</title>
    <link href="https://liuhuaqiang.top/2020/05/15/560-he-wei-k-de-zi-shu-zu/"/>
    <id>https://liuhuaqiang.top/2020/05/15/560-he-wei-k-de-zi-shu-zu/</id>
    <published>2020-05-15T09:41:22.000Z</published>
    <updated>2020-05-27T02:20:26.875Z</updated>
    
    <content type="html"><![CDATA[<h4 id="560-和为K的子数组"><a href="#560-和为K的子数组" class="headerlink" title="560. 和为K的子数组"></a><a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/" target="_blank" rel="noopener">560. 和为K的子数组</a></h4><p>给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。</p><p>示例 1 :</p><p>输入:nums = [1,1,1], k = 2<br>输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。<br>说明 :</p><p>数组的长度为 [1, 20,000]。<br>数组中元素的范围是 [-1000, 1000] ，且整数 k 的范围是 [-1e7, 1e7]</p><p><img src="https://i.imgur.com/NXZJujY.png" alt></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*我们可以基于方法一利用数据结构进行进一步的优化，我们知道方法一的瓶颈在于对每个 ii，我们需要枚举所有的 jj 来判断是否符合条件，这一步是否可以优化呢？答案是可以的。我们定义preli为0..2]里所有数的和，则prei可以由preli- 1] 递推而来，即:pre[i]= pre[i- 1] + nums[i]那么[j..i] 这个子数组和为k」这个条件我们可以转化为pre[i]- pre[j- 1]==k简单移项可得符合条件的下标j需要满足pre[j- 1]== pre[i] - k:所以我们考虑以i结尾的和为ke的连续子数组个数时只要统计有多少个前缀和为pre[i]- k的pre[j]即可。我们建立哈希表mp,以和为键,出现次数为对应的值,记录pre[i]出现的次数,从左往右边更新mp边计算答案,那么以i结尾的答案mp[pre[]一k]即可在0(1)时间内得到。后的答案即为所有下标结尾的和为k的子数组个数之和。需要注意的是，从左往右边更新边计算的时候已经保证了mp[pre[i] - k] 里记录的pre[j] 的下标范围是0≤j≤i.同时，由于pre[i] 的计算只与前一项的答案有关,因此我们可以不用建立pre数组，直接用pre量来记录pre[i - 1] 的答案即可。*/</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">subarraySum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        mp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token operator">+</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>ans<span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token operator">!=</span>mp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ret<span class="token operator">+</span><span class="token operator">=</span>mp<span class="token punctuation">[</span>ans<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mp<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;560-和为K的子数组&quot;&gt;&lt;a href=&quot;#560-和为K的子数组&quot; class=&quot;headerlink&quot; title=&quot;560. 和为K的子数组&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/subarray-s
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
      <category term="前缀和" scheme="https://liuhuaqiang.top/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>50.pow(x,n)</title>
    <link href="https://liuhuaqiang.top/2020/05/11/50-pow-x-n/"/>
    <id>https://liuhuaqiang.top/2020/05/11/50-pow-x-n/</id>
    <published>2020-05-11T02:22:28.000Z</published>
    <updated>2020-06-02T01:24:13.727Z</updated>
    
    <content type="html"><![CDATA[<h4 id="50-Pow-x-n"><a href="#50-Pow-x-n" class="headerlink" title="50. Pow(x, n)"></a><a href="https://leetcode-cn.com/problems/powx-n/" target="_blank" rel="noopener">50. Pow(x, n)</a></h4><p>难度中等333</p><p>实现 <a href="https://www.cplusplus.com/reference/valarray/pow/" target="_blank" rel="noopener">pow(<em>x</em>, <em>n</em>)</a> ，即计算 x 的 n 次幂函数。</p><p><strong>示例 1:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 2.00000, 10输出: 1024.00000</code></pre><p><strong>示例 2:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 2.10000, 3输出: 9.26100</code></pre><p><strong>示例 3:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 2.00000, -2输出: 0.25000解释: 2-2 <span class="token operator">=</span> 1/22 <span class="token operator">=</span> 1/4 <span class="token operator">=</span> 0.25</code></pre><p>思路描述：因为不用考虑大数问题，所以只需要循环地去计算就可以了，但是单纯的循环去算，比如：</p><p>for(int i = 1; i &lt; n; i ++)<br>    x *= x;<br>是会超时的。</p><p>所以我们可以考虑比如我们计算 x^8，就是 x^2 * x^2 * x^2 * x^2，当我们计算出来 x^2 之后就可以只进行三次乘法就可以了，相对于之前的 7 次乘法，时间大大减少了。</p><p>也就是 x^n 可以分解成若干个 x^i 的乘积</p><p>我们这里使用快速幂进行求解。我们看一下 n 的二进制形式一定是若干个 1 和 0 构成</p><p>所以我们可以看出来，每次乘的值都是前一个值的2倍，当 n 对应位为0时跳过</p><p>负数幂和正数幂相同，因为除以一个数就相当于乘这个数的倒数。</p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> x<span class="token operator">==</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> num <span class="token operator">=</span>n<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            num<span class="token operator">=</span><span class="token operator">-</span>num<span class="token punctuation">;</span>            x<span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">double</span> ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> ret<span class="token operator">*</span><span class="token operator">=</span>x<span class="token punctuation">;</span>            x<span class="token operator">*</span><span class="token operator">=</span>x<span class="token punctuation">;</span>            num<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c">ll <span class="token function">quick_pow</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ll ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans<span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span>b是可以为<span class="token keyword">double</span>的<span class="token punctuation">,</span></code></pre><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">double</span>  <span class="token function">quick_pow</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span>  b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans<span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token punctuation">;</span>            b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> x<span class="token operator">==</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> num <span class="token operator">=</span>n<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            num<span class="token operator">=</span><span class="token operator">-</span>num<span class="token punctuation">;</span>            x<span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">quick_pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;50-Pow-x-n&quot;&gt;&lt;a href=&quot;#50-Pow-x-n&quot; class=&quot;headerlink&quot; title=&quot;50. Pow(x, n)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/powx-n/&quot; ta
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
      <category term="面试题" scheme="https://liuhuaqiang.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>236. 二叉树的最近公共祖先</title>
    <link href="https://liuhuaqiang.top/2020/05/10/236.er-cha-shu-de-zui-jin-gong-gong-zu-xian/"/>
    <id>https://liuhuaqiang.top/2020/05/10/236.er-cha-shu-de-zui-jin-gong-gong-zu-xian/</id>
    <published>2020-05-10T03:16:27.000Z</published>
    <updated>2020-05-10T03:50:07.983Z</updated>
    
    <content type="html"><![CDATA[<h4 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236. 二叉树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="noopener">236. 二叉树的最近公共祖先</a></h4><p>难度中等504</p><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p><a href="https://baike.baidu.com/item/最近公共祖先/8918834?fr=aladdin" target="_blank" rel="noopener">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p><p>例如，给定如下二叉树: root = [3,5,1,6,2,0,8,null,null,7,4]</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/binarytree.png" alt="img"></p><p><strong>示例 1:</strong></p><pre><code>输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1输出: 3解释: 节点 5 和节点 1 的最近公共祖先是节点 3。</code></pre><p><strong>示例 2:</strong></p><pre class=" language-bash"><code class="language-bash">输入: root <span class="token operator">=</span> <span class="token punctuation">[</span>3,5,1,6,2,0,8,null,null,7,4<span class="token punctuation">]</span>, p <span class="token operator">=</span> 5, q <span class="token operator">=</span> 4输出: 5解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。</code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*方法二：存储父节点思路我们可以用哈希表存储所有节点的父节点，然后我们就可以利用节点的父节点信息从 p 结点开始不断往上跳，并记录已经访问过的节点，再从 q 节点开始不断往上跳，如果碰到已经访问过的节点，那么这个节点就是我们要找的最近公共祖先。算法从根节点开始遍历整棵二叉树，用哈希表记录每个节点的父节点指针。从 p 节点开始不断往它的祖先移动，并用数据结构记录已经访问过的祖先节点。同样，我们再从 q 节点开始不断往它的祖先移动，如果有祖先已经被访问过，即意味着这是 p 和 q 的深度最深的公共祖先，即 LCA 节点。作者：LeetCode-Solution链接：https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/er-cha-shu-de-zui-jin-gong-gong-zu-xian-by-leetc-2/来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。*/</span><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>TreeNode<span class="token operator">*</span> <span class="token operator">></span> fa<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>bool<span class="token operator">></span> vis<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fa<span class="token punctuation">[</span>root<span class="token operator">-></span>left<span class="token operator">-></span>val<span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fa<span class="token punctuation">[</span>root<span class="token operator">-></span>right<span class="token operator">-></span>val<span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fa<span class="token punctuation">[</span>root<span class="token operator">-></span>val<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            vis<span class="token punctuation">[</span>p<span class="token operator">-></span>val<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>            p <span class="token operator">=</span> fa<span class="token punctuation">[</span>p<span class="token operator">-></span>val<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>q<span class="token operator">-></span>val<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> q<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            q <span class="token operator">=</span> fa<span class="token punctuation">[</span>q<span class="token operator">-></span>val<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;236-二叉树的最近公共祖先&quot;&gt;&lt;a href=&quot;#236-二叉树的最近公共祖先&quot; class=&quot;headerlink&quot; title=&quot;236. 二叉树的最近公共祖先&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/l
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://liuhuaqiang.top/tags/leetcode/"/>
    
      <category term="算法题" scheme="https://liuhuaqiang.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
