<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>238.除自身以外数组的乘积</title>
      <link href="/2020/06/04/238-chu-zi-shen-yi-wai-shu-zu-de-cheng-ji/"/>
      <url>/2020/06/04/238-chu-zi-shen-yi-wai-shu-zu-de-cheng-ji/</url>
      
        <content type="html"><![CDATA[<h4 id="238-除自身以外数组的乘积"><a href="#238-除自身以外数组的乘积" class="headerlink" title="238. 除自身以外数组的乘积"></a><a href="https://leetcode-cn.com/problems/product-of-array-except-self/" target="_blank" rel="noopener">238. 除自身以外数组的乘积</a></h4><pre class=" language-bash"><code class="language-bash">给你一个长度为 n 的整数数组 nums，其中 n <span class="token operator">></span> 1，返回输出数组 output ，其中 output<span class="token punctuation">[</span>i<span class="token punctuation">]</span> 等于 nums 中除 nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> 之外其余各元素的乘积。示例:输入: <span class="token punctuation">[</span>1,2,3,4<span class="token punctuation">]</span>输出: <span class="token punctuation">[</span>24,12,8,6<span class="token punctuation">]</span>提示：题目数据保证数组之中任意元素的全部前缀元素和后缀（甚至是整个数组）的乘积都在 32 位整数范围内。说明: 请不要使用除法，且在 O<span class="token punctuation">(</span>n<span class="token punctuation">)</span> 时间复杂度内完成此题。进阶：你可以在常数空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组不被视为额外空间。）</code></pre><pre class=" language-c"><code class="language-c">用前后缀和可解决    class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">productExceptSelf</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">pre</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">next</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ret<span class="token punctuation">;</span>        pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span>n<span class="token number">-2</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>next<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>n<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">*</span>next<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>进阶</p><p>思路</p><p>尽管上面的方法已经能够很好的解决这个问题，但是空间复杂度并不为常数。</p><p>由于输出数组不算在空间复杂度内，那么我们可以将 L 或 R 数组用输出数组来计算。先把输出数组当作 L 数组来计算，然后再动态构造 R 数组得到结果。让我们来看看基于这个思想的算法。</p><p>算法</p><p>初始化 answer 数组，对于给定索引 i，answer[i] 代表的是 i 左侧所有数字的乘积。<br>构造方式与之前相同，只是我们试图节省空间，先把 answer 作为方法一的 L 数组。<br>这种方法的唯一变化就是我们没有构造 R 数组。而是用一个遍历来跟踪右边元素的乘积。并更新数组 answer[i]=answer[i]<em>Ranswer[i]=answer[i]∗R。然后 RR 更新为 R=R</em>nums[i]R=R∗nums[i]，其中变量 RR 表示的就是索引右侧数字的乘积。</p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">productExceptSelf</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ret</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ret<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>ret<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ret<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">*</span>sum<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sum <span class="token operator">*</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/06/03/mysql-bi-ji/"/>
      <url>/2020/06/03/mysql-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><h2 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h2><pre class=" language-sql"><code class="language-sql">mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p </code></pre><h2 id="显示数据库表"><a href="#显示数据库表" class="headerlink" title="显示数据库表"></a>显示数据库表</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span></code></pre><h2 id="选中一个数据库"><a href="#选中一个数据库" class="headerlink" title="选中一个数据库"></a>选中一个数据库</h2><pre class=" language-bash"><code class="language-bash">use 数据库的名字</code></pre><h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> admin<span class="token punctuation">;</span></code></pre><h2 id="退出数据库"><a href="#退出数据库" class="headerlink" title="退出数据库"></a>退出数据库</h2><pre class=" language-bash"><code class="language-bash"><span class="token keyword">exit</span></code></pre><h2 id="创建一个数据库"><a href="#创建一个数据库" class="headerlink" title="创建一个数据库"></a>创建一个数据库</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> test<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">TABLE</span> pet<span class="token punctuation">(</span>                   name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   owner <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   specise <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   sex CHAR<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   brith <span class="token keyword">DATE</span><span class="token punctuation">,</span>                   death <span class="token keyword">DATE</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="查看数据库中的数据表"><a href="#查看数据库中的数据表" class="headerlink" title="查看数据库中的数据表"></a>查看数据库中的数据表</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span></code></pre><h2 id="查看表的结构"><a href="#查看表的结构" class="headerlink" title="查看表的结构"></a>查看表的结构</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">desc</span> pet</code></pre><h2 id="往数据表中添加记录"><a href="#往数据表中添加记录" class="headerlink" title="往数据表中添加记录"></a>往数据表中添加记录</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> pet<span class="token punctuation">(</span>name<span class="token punctuation">,</span>owner<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'xx'</span><span class="token punctuation">,</span><span class="token string">'cc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> pet <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">"小黄"</span><span class="token punctuation">,</span><span class="token string">"刘华强"</span><span class="token punctuation">,</span><span class="token string">"xx"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="MySql常用数据类型"><a href="#MySql常用数据类型" class="headerlink" title="MySql常用数据类型"></a>MySql常用数据类型</h1><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">范围（有符号）</th><th align="left">范围（无符号）</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">1 byte</td><td align="left">(-128，127)</td><td align="left">(0，255)</td><td align="left">小整数值</td></tr><tr><td align="left">SMALLINT</td><td align="left">2 bytes</td><td align="left">(-32 768，32 767)</td><td align="left">(0，65 535)</td><td align="left">大整数值</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3 bytes</td><td align="left">(-8 388 608，8 388 607)</td><td align="left">(0，16 777 215)</td><td align="left">大整数值</td></tr><tr><td align="left">INT或INTEGER</td><td align="left">4 bytes</td><td align="left">(-2 147 483 648，2 147 483 647)</td><td align="left">(0，4 294 967 295)</td><td align="left">大整数值</td></tr><tr><td align="left">BIGINT</td><td align="left">8 bytes</td><td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td align="left">(0，18 446 744 073 709 551 615)</td><td align="left">极大整数值</td></tr><tr><td align="left">FLOAT</td><td align="left">4 bytes</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td align="left">单精度 浮点数值</td></tr><tr><td align="left">DOUBLE</td><td align="left">8 bytes</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">双精度 浮点数值</td></tr><tr><td align="left">DECIMAL</td><td align="left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td align="left">依赖于M和D的值</td><td align="left">依赖于M和D的值</td><td align="left">小数值</td></tr></tbody></table><table><thead><tr><th align="left">类型</th><th align="left">大小 ( bytes)</th><th align="left">范围</th><th align="left">格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">DATE</td><td align="left">3</td><td align="left">1000-01-01/9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">TIME</td><td align="left">3</td><td align="left">‘-838:59:59’/‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left">YEAR</td><td align="left">1</td><td align="left">1901/2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">DATETIME</td><td align="left">8</td><td align="left">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td align="left">YYYY-MM-DD HH:MM:SS</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">4</td><td align="left">1970-01-01 00:00:00/2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="left">YYYYMMDD HHMMSS</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><table><thead><tr><th>CHAR</th><th>0-255 bytes</th><th>定长字符串</th></tr></thead><tbody><tr><td>VARCHAR</td><td>0-65535 bytes</td><td>变长字符串</td></tr><tr><td>TINYBLOB</td><td>0-255 bytes</td><td>不超过 255 个字符的二进制字符串</td></tr><tr><td>TINYTEXT</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535 bytes</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16 777 215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16 777 215 bytes</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4 294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据:"></a>修改数据:</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> tableName <span class="token keyword">SET</span> 字段<span class="token number">1</span><span class="token operator">=</span>值<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token operator">=</span>值<span class="token number">2</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">WHERE</span> 条件<span class="token punctuation">;</span></code></pre><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 条件</code></pre><h1 id="约束条件"><a href="#约束条件" class="headerlink" title="约束条件"></a>约束条件</h1><h2 id="1-主键约束"><a href="#1-主键约束" class="headerlink" title="1.主键约束:"></a><strong>1.主键约束:</strong></h2><p>它能够<strong>唯一确定</strong>一张表中的一条记录,增加主键约束之后,就可以使得字段不重复而且不为空  </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span><span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 张三 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span>运行<span class="token keyword">DESCRIBE</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span>发现 id是不可以为<span class="token boolean">null</span> 而且 <span class="token keyword">key</span>的值 也变为:PRI<span class="token punctuation">(</span><span class="token keyword">primary</span><span class="token punctuation">)</span></code></pre><h2 id="2-复合主键"><a href="#2-复合主键" class="headerlink" title="2.复合主键:"></a>2.复合主键:</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> user2<span class="token punctuation">(</span>    id <span class="token keyword">INT</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    password <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>运行<span class="token keyword">DESCRIBE</span> user2<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field    <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> id       <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> name     <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> password <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------+-----+---------+-------+</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user2 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'老王'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user2 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'老王'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+----------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span> password <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+----------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 老王 <span class="token operator">|</span> <span class="token number">123456</span>   <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 老王 <span class="token operator">|</span> <span class="token number">123456</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+----------+</span>说明了复合主键只要所有的字段都不是相同的情况下可以允许其中的字段重复:<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user2 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'老李'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user2<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+----------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span> password <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+----------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 老李 <span class="token operator">|</span> <span class="token number">123456</span>   <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 老王 <span class="token operator">|</span> <span class="token number">123456</span>   <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 老王 <span class="token operator">|</span> <span class="token number">123456</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+----------+</span>场景:表中有班级号以及学生座位号<span class="token punctuation">,</span>我们可以用班级号<span class="token operator">+</span>学生的座位号可以准确的定位一个学生<span class="token punctuation">,</span>如:<span class="token punctuation">(</span><span class="token number">1</span>班<span class="token number">5</span>号可以准确的确定一个学生<span class="token punctuation">)</span></code></pre><h2 id="3-自增约束"><a href="#3-自增约束" class="headerlink" title="3.自增约束:"></a>3.自增约束:</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> user3<span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>运行<span class="token keyword">DESCRIBE</span> user3<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user3<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user3<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 张三 <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 李四 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span>没有自定义id值 但是自动生成了id</code></pre><h2 id="4-唯一约束"><a href="#4-唯一约束" class="headerlink" title="4.唯一约束:"></a>4.唯一约束:</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> user5<span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>运行 <span class="token keyword">DESCRIBE</span> user5<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span>新增name为唯一约束:<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user5 <span class="token keyword">ADD</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>运行 <span class="token keyword">DESCRIBE</span> user5<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span> UNI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span>测试:插入数据<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user5<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'cc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>运行 <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user5<span class="token punctuation">;</span> 查看结果:<span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">cc</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span>再次插入<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user5<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'cc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>出现:ERROR <span class="token number">1062</span> <span class="token punctuation">(</span><span class="token number">23000</span><span class="token punctuation">)</span>: Duplicate entry <span class="token string">'cc'</span> <span class="token keyword">for</span> <span class="token keyword">key</span> <span class="token string">'name'</span>换个试试 <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user5<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>运行 <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user5<span class="token punctuation">;</span> 查看结果:<span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">aa</span>   <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">cc</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span>总结一下:    主键约束<span class="token punctuation">(</span><span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">)</span>中包含了唯一约束场景:业务需求:设计一张用户注册表<span class="token punctuation">,</span>用户姓名必须要用手机号来注册<span class="token punctuation">,</span>而且手机号和用户名称都不能为空<span class="token punctuation">,</span>那么:<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> user_test<span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span><span class="token string">'主键id'</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span><span class="token string">'用户姓名,不能为空'</span><span class="token punctuation">,</span>    phone_number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span><span class="token string">'用户手机,不能重复且不能为空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>运行 <span class="token keyword">DESCRIBE</span> user_test<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field        <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> id           <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> name         <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> phone_number <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> UNI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------+-------------+------+-----+---------+----------------+</span>这样的话就达到了每一个手机号都只能出现一次<span class="token punctuation">,</span>达到了每个手机号只能被注册一次<span class="token punctuation">.</span>用户姓名可以重复<span class="token punctuation">,</span>但是手机号码却不能重复<span class="token punctuation">,</span>复合正常的逻辑需求</code></pre><h2 id="5-非空约束"><a href="#5-非空约束" class="headerlink" title="5.非空约束:"></a>5.非空约束:</h2><pre class=" language-sql"><code class="language-sql">在上面的蓝字中已经添加了非空约束: <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>name和phone_number都设置了非空<span class="token punctuation">,</span>先只设置name参数不设置phone_number参数试一试<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user_test <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>会出现Field <span class="token string">'phone_number'</span> doesn<span class="token string">'t have a default value两个非空参数一起设置:INSERT INTO user_test (name,phone_number) VALUES ('</span>张三<span class="token string">','</span><span class="token number">12345678901</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span> phone_number <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 张三 <span class="token operator">|</span> <span class="token number">12345678901</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+</span></code></pre><h2 id="6-默认约束"><a href="#6-默认约束" class="headerlink" title="6.默认约束"></a>6.默认约束</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> user6<span class="token punctuation">(</span>   id <span class="token keyword">int</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span><span class="token string">'主键id'</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span><span class="token string">'用户姓名不能为空'</span><span class="token punctuation">,</span>    phone_number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span><span class="token string">'用户手机号,不能为空'</span><span class="token punctuation">,</span>    <span class="token keyword">status</span> <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span><span class="token string">'用户状态0:启用 1:禁封 默认:0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>运行<span class="token keyword">DESCRIBE</span> user6<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field        <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> id           <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> name         <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> phone_number <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">status</span>       <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token number">0</span>       <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------+-------------+------+-----+---------+----------------+</span>插入数据:<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user6<span class="token punctuation">(</span>name<span class="token punctuation">,</span>phone_number<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user6<span class="token punctuation">(</span>name<span class="token punctuation">,</span>phone_number<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'bb'</span><span class="token punctuation">,</span><span class="token string">'1234'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user6<span class="token punctuation">(</span>name<span class="token punctuation">,</span>phone_number<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'cc'</span><span class="token punctuation">,</span><span class="token string">'1263456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>查看数据:<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user6<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+--------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span> phone_number <span class="token operator">|</span> <span class="token keyword">status</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+--------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">aa</span>   <span class="token operator">|</span> <span class="token number">123</span>          <span class="token operator">|</span>      <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">bb</span>   <span class="token operator">|</span> <span class="token number">1234</span>         <span class="token operator">|</span>      <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">cc</span>   <span class="token operator">|</span> <span class="token number">1263456</span>      <span class="token operator">|</span>      <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+--------+</span>我们没有设置<span class="token keyword">status</span>的值<span class="token punctuation">,</span>但是给我们创建了默认值 <span class="token number">0</span><span class="token punctuation">.</span>应用场景:业务需求:找正常的用户<span class="token punctuation">,</span>对这些正常用户进行发放优惠卷或者积分之类的东西<span class="token punctuation">,</span>而被禁封的用户我们不让其参加多动<span class="token punctuation">.</span>我们想要封用户只要将<span class="token keyword">status</span>的值从<span class="token number">0</span>改为<span class="token number">1</span>就行了<span class="token punctuation">,</span>当然我们取用户的时候必须要先判断<span class="token keyword">status</span>是否是<span class="token number">0</span><span class="token punctuation">.</span>若是<span class="token number">1</span><span class="token punctuation">.</span>说明该用户已经被禁封<span class="token punctuation">.</span>先封手机号为<span class="token string">'1234'</span>的用户:<span class="token keyword">UPDATE</span> user6 <span class="token keyword">SET</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">WHERE</span> phone_number<span class="token operator">=</span> <span class="token string">'1234'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user6<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+--------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span> phone_number <span class="token operator">|</span> <span class="token keyword">status</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+--------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">aa</span>   <span class="token operator">|</span> <span class="token number">123</span>          <span class="token operator">|</span>      <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">bb</span>   <span class="token operator">|</span> <span class="token number">1234</span>         <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">cc</span>   <span class="token operator">|</span> <span class="token number">1263456</span>      <span class="token operator">|</span>      <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+--------+</span><span class="token keyword">status</span>为<span class="token number">1</span><span class="token punctuation">,</span>说明用户已经被封<span class="token punctuation">,</span>该用户不可以参加活动我们取用户的时候加上<span class="token keyword">status</span>的判断<span class="token punctuation">,</span>如:<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user6 <span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+--------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span> phone_number <span class="token operator">|</span> <span class="token keyword">status</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+--------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">aa</span>   <span class="token operator">|</span> <span class="token number">123</span>          <span class="token operator">|</span>      <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">cc</span>   <span class="token operator">|</span> <span class="token number">1263456</span>      <span class="token operator">|</span>      <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+--------------+--------+</span></code></pre><h2 id="7-外键约束"><a href="#7-外键约束" class="headerlink" title="7.外键约束"></a>7.外键约束</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> classes<span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span><span class="token string">'班级表id'</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span><span class="token string">'班级名称'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>运行<span class="token keyword">DESCRIBE</span> classes<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span>   id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span><span class="token string">'学生表id'</span><span class="token punctuation">,</span>   name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span><span class="token string">'学生姓名'</span><span class="token punctuation">,</span>    class_id <span class="token keyword">int</span> <span class="token keyword">COMMENT</span><span class="token string">'教室id,这张表中的class_id是classes表中id的值'</span><span class="token punctuation">,</span>    <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>class_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> classes<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//FOREIGN :外来  REFERENCES:应用,参考</span>运行<span class="token keyword">DESCRIBE</span> student<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field    <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> id       <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> name     <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> class_id <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> YES  <span class="token operator">|</span> MUL <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------+-----+---------+----------------+</span>班级插入数据:<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> CLASSES <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'一班'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> CLASSES <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'二班'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> CLASSES <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'三班'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> CLASSES <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'四班'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>查看数据 <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> classes<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 一班 <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 二班 <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 三班 <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 四班 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span>学生插入数据:<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>name<span class="token punctuation">,</span>class_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'小赵'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>name<span class="token punctuation">,</span>class_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'小钱'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>name<span class="token punctuation">,</span>class_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'小孙'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>name<span class="token punctuation">,</span>class_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'小李'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>查看数据 <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+----------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span> class_id <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+----------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 小赵 <span class="token operator">|</span>        <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 小钱 <span class="token operator">|</span>        <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 小孙 <span class="token operator">|</span>        <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 小李 <span class="token operator">|</span>        <span class="token number">4</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+----------+</span>若是像插入班级为<span class="token number">5</span>的数据 如:<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>name<span class="token punctuation">,</span>class_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'小周'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>报错: Cannot <span class="token keyword">add</span> <span class="token operator">or</span> <span class="token keyword">update</span> <span class="token number">a</span> child <span class="token keyword">row</span>我们删除正在被学生表引用的<span class="token string">'四班'</span>试试:<span class="token keyword">DELETE</span> classes <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'四班'</span><span class="token punctuation">;</span>出现:Cannot <span class="token keyword">delete</span> <span class="token operator">or</span> <span class="token keyword">update</span> <span class="token number">a</span> parent <span class="token keyword">row</span>:不能删除主表中的行我们先删除学生表中的 <span class="token string">'小李'</span>从而解除班级中<span class="token string">'四班'</span>的外键约束<span class="token punctuation">,</span>再来删除<span class="token string">'四班'</span><span class="token punctuation">(</span>因为小李引用了四班<span class="token punctuation">)</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'小李'</span><span class="token punctuation">;</span>再次删除classes表中的<span class="token string">'四班'</span><span class="token punctuation">;</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> classes <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'四班'</span><span class="token punctuation">;</span>最后: <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> classes<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 一班 <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 二班 <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 三班 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token string">'四班'</span>被成功删除<span class="token operator">!</span>总结:<span class="token number">1</span><span class="token punctuation">.</span>主表中没有的数据<span class="token punctuation">,</span>在附表中<span class="token punctuation">,</span>是不可以使用的<span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>主表中记录的数据现在正在被附表所引用<span class="token punctuation">,</span>那么主表中正在被引用的数据不可以被删除<span class="token number">3</span><span class="token punctuation">.</span>若要想删除<span class="token punctuation">,</span>先将附表中的数据删除在删除主表数据<span class="token number">4</span><span class="token punctuation">.</span>对于外键约束大家可以联想 省<span class="token punctuation">,</span>市 来进行联想 <span class="token punctuation">(</span>市必须要依赖于省<span class="token punctuation">,</span>只要省还有一个市在引用<span class="token punctuation">,</span>那么就不可以删除省<span class="token punctuation">,</span>要不然市就没有省了<span class="token punctuation">.</span> 那么我们想删除省<span class="token punctuation">,</span>必须要将该省下所有的市全部删除之后<span class="token punctuation">,</span>才可以删除这个省<span class="token punctuation">)</span></code></pre><h2 id="8-如何建表之后添加主键约束"><a href="#8-如何建表之后添加主键约束" class="headerlink" title="8.如何建表之后添加主键约束"></a>8.如何建表之后添加主键约束</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> user4<span class="token punctuation">(</span>    id <span class="token keyword">INT</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>运行<span class="token keyword">DESCRIBE</span> user4<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span>加入主键约束:<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user4 <span class="token keyword">add</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>再次运行<span class="token keyword">DESCRIBE</span> user4<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span>删除主键约束:ALERT <span class="token keyword">TABLE</span> user4 <span class="token keyword">DROP</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">;</span>运行<span class="token keyword">DESCRIBE</span> user4查看表结构:<span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span>使用<span class="token keyword">modify</span> 修改字段<span class="token punctuation">.</span>添加约束:<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user4 <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">key</span><span class="token punctuation">;</span>使用<span class="token keyword">DESCRIBE</span> user4 查看表结构:<span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span>给主键设置自增长:<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user4 <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">;</span>运行 <span class="token keyword">DESCRIBE</span> user4 查看表结构:<span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+----------------+</span></code></pre><h1 id="MySQL学习笔记"><a href="#MySQL学习笔记" class="headerlink" title="MySQL学习笔记"></a>MySQL学习笔记</h1><h2 id="登录和退出MySQL服务器"><a href="#登录和退出MySQL服务器" class="headerlink" title="登录和退出MySQL服务器"></a>登录和退出MySQL服务器</h2><pre class=" language-shell"><code class="language-shell"># 登录MySQL$ mysql -u root -p12345612# 退出MySQL数据库服务器exit;</code></pre><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><pre class=" language-mysql"><code class="language-mysql">-- 显示所有数据库show databases;-- 创建数据库CREATE DATABASE test;-- 切换数据库use test;-- 显示数据库中的所有表show tables;-- 创建数据表CREATE TABLE pet (    name VARCHAR(20),    owner VARCHAR(20),    species VARCHAR(20),    sex CHAR(1),    birth DATE,    death DATE);-- 查看数据表结构-- describe pet;desc pet;-- 查询表SELECT * from pet;-- 插入数据INSERT INTO pet VALUES ('puffball', 'Diane', 'hamster', 'f', '1990-03-30', NULL);-- 修改数据UPDATE pet SET name = 'squirrel' where owner = 'Diane';-- 删除数据DELETE FROM pet where name = 'squirrel';-- 删除表DROP TABLE myorder;</code></pre><h2 id="建表约束"><a href="#建表约束" class="headerlink" title="建表约束"></a>建表约束</h2><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><pre class=" language-mysql"><code class="language-mysql">-- 主键约束-- 使某个字段不重复且不得为空，确保表内所有数据的唯一性。CREATE TABLE user (    id INT PRIMARY KEY,    name VARCHAR(20));-- 联合主键-- 联合主键中的每个字段都不能为空，并且加起来不能和已设置的联合主键重复。CREATE TABLE user (    id INT,    name VARCHAR(20),    password VARCHAR(20),    PRIMARY KEY(id, name));-- 自增约束-- 自增约束的主键由系统自动递增分配。CREATE TABLE user (    id INT PRIMARY KEY AUTO_INCREMENT,    name VARCHAR(20));-- 添加主键约束-- 如果忘记设置主键，还可以通过SQL语句设置（两种方式）：ALTER TABLE user ADD PRIMARY KEY(id);ALTER TABLE user MODIFY id INT PRIMARY KEY;-- 删除主键ALTER TABLE user drop PRIMARY KEY;</code></pre><h3 id="唯一主键"><a href="#唯一主键" class="headerlink" title="唯一主键"></a>唯一主键</h3><pre class=" language-mysql"><code class="language-mysql">-- 建表时创建唯一主键CREATE TABLE user (    id INT,    name VARCHAR(20),    UNIQUE(name));-- 添加唯一主键-- 如果建表时没有设置唯一建，还可以通过SQL语句设置（两种方式）：ALTER TABLE user ADD UNIQUE(name);ALTER TABLE user MODIFY name VARCHAR(20) UNIQUE;-- 删除唯一主键ALTER TABLE user DROP INDEX name;</code></pre><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><pre class=" language-mysql"><code class="language-mysql">-- 建表时添加非空约束-- 约束某个字段不能为空CREATE TABLE user (    id INT,    name VARCHAR(20) NOT NULL);-- 移除非空约束ALTER TABLE user MODIFY name VARCHAR(20);</code></pre><h3 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h3><pre class=" language-mysql"><code class="language-mysql">-- 建表时添加默认约束-- 约束某个字段的默认值CREATE TABLE user2 (    id INT,    name VARCHAR(20),    age INT DEFAULT 10);-- 移除非空约束ALTER TABLE user MODIFY age INT;</code></pre><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><pre class=" language-mysql"><code class="language-mysql">-- 班级CREATE TABLE classes (    id INT PRIMARY KEY,    name VARCHAR(20));-- 学生表CREATE TABLE students (    id INT PRIMARY KEY,    name VARCHAR(20),    -- 这里的 class_id 要和 classes 中的 id 字段相关联    class_id INT,    -- 表示 class_id 的值必须来自于 classes 中的 id 字段值    FOREIGN KEY(class_id) REFERENCES classes(id));-- 1. 主表（父表）classes 中没有的数据值，在副表（子表）students 中，是不可以使用的；-- 2. 主表中的记录被副表引用时，主表不可以被删除。</code></pre><h2 id="数据库的三大设计范式"><a href="#数据库的三大设计范式" class="headerlink" title="数据库的三大设计范式"></a>数据库的三大设计范式</h2><h3 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h3><p>只要字段值还可以继续拆分，就不满足第一范式。</p><p>范式设计得越详细，对某些实际操作可能会更好，但并非都有好处，需要对项目的实际情况进行设定。</p><h3 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h3><p>在满足第一范式的前提下，其他列都必须完全依赖于主键列。如果出现不完全依赖，只可能发生在联合主键的情况下：</p><pre class=" language-mysql"><code class="language-mysql">-- 订单表CREATE TABLE myorder (    product_id INT,    customer_id INT,    product_name VARCHAR(20),    customer_name VARCHAR(20),    PRIMARY KEY (product_id, customer_id));</code></pre><p>实际上，在这张订单表中，<code>product_name</code> 只依赖于 <code>product_id</code> ，<code>customer_name</code> 只依赖于 <code>customer_id</code> 。也就是说，<code>product_name</code> 和 <code>customer_id</code> 是没用关系的，<code>customer_name</code> 和 <code>product_id</code> 也是没有关系的。</p><p>这就不满足第二范式：其他列都必须完全依赖于主键列！</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE myorder (    order_id INT PRIMARY KEY,    product_id INT,    customer_id INT);CREATE TABLE product (    id INT PRIMARY KEY,    name VARCHAR(20));CREATE TABLE customer (    id INT PRIMARY KEY,    name VARCHAR(20));</code></pre><p>拆分之后，<code>myorder</code> 表中的 <code>product_id</code> 和 <code>customer_id</code> 完全依赖于 <code>order_id</code> 主键，而 <code>product</code> 和 <code>customer</code> 表中的其他字段又完全依赖于主键。满足了第二范式的设计！</p><h3 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h3><p>在满足第二范式的前提下，除了主键列之外，其他列之间不能有传递依赖关系。</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE myorder (    order_id INT PRIMARY KEY,    product_id INT,    customer_id INT,    customer_phone VARCHAR(15));</code></pre><p>表中的 <code>customer_phone</code> 有可能依赖于 <code>order_id</code> 、 <code>customer_id</code> 两列，也就不满足了第三范式的设计：其他列之间不能有传递依赖关系。</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE myorder (    order_id INT PRIMARY KEY,    product_id INT,    customer_id INT);CREATE TABLE customer (    id INT PRIMARY KEY,    name VARCHAR(20),    phone VARCHAR(15));</code></pre><p>修改后就不存在其他列之间的传递依赖关系，其他列都只依赖于主键列，满足了第三范式的设计！</p><h2 id="查询练习"><a href="#查询练习" class="headerlink" title="查询练习"></a>查询练习</h2><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><pre class=" language-mysql"><code class="language-mysql">-- 创建数据库CREATE DATABASE select_test;-- 切换数据库USE select_test;-- 创建学生表CREATE TABLE student (    no VARCHAR(20) PRIMARY KEY,    name VARCHAR(20) NOT NULL,    sex VARCHAR(10) NOT NULL,    birthday DATE, -- 生日    class VARCHAR(20) -- 所在班级);-- 创建教师表CREATE TABLE teacher (    no VARCHAR(20) PRIMARY KEY,    name VARCHAR(20) NOT NULL,    sex VARCHAR(10) NOT NULL,    birthday DATE,    profession VARCHAR(20) NOT NULL, -- 职称    department VARCHAR(20) NOT NULL -- 部门);-- 创建课程表CREATE TABLE course (    no VARCHAR(20) PRIMARY KEY,    name VARCHAR(20) NOT NULL,    t_no VARCHAR(20) NOT NULL, -- 教师编号    -- 表示该 tno 来自于 teacher 表中的 no 字段值    FOREIGN KEY(t_no) REFERENCES teacher(no) );-- 成绩表CREATE TABLE score (    s_no VARCHAR(20) NOT NULL, -- 学生编号    c_no VARCHAR(20) NOT NULL, -- 课程号    degree DECIMAL,    -- 成绩    -- 表示该 s_no, c_no 分别来自于 student, course 表中的 no 字段值    FOREIGN KEY(s_no) REFERENCES student(no),        FOREIGN KEY(c_no) REFERENCES course(no),    -- 设置 s_no, c_no 为联合主键    PRIMARY KEY(s_no, c_no));-- 查看所有表SHOW TABLES;-- 添加学生表数据INSERT INTO student VALUES('101', '曾华', '男', '1977-09-01', '95033');INSERT INTO student VALUES('102', '匡明', '男', '1975-10-02', '95031');INSERT INTO student VALUES('103', '王丽', '女', '1976-01-23', '95033');INSERT INTO student VALUES('104', '李军', '男', '1976-02-20', '95033');INSERT INTO student VALUES('105', '王芳', '女', '1975-02-10', '95031');INSERT INTO student VALUES('106', '陆军', '男', '1974-06-03', '95031');INSERT INTO student VALUES('107', '王尼玛', '男', '1976-02-20', '95033');INSERT INTO student VALUES('108', '张全蛋', '男', '1975-02-10', '95031');INSERT INTO student VALUES('109', '赵铁柱', '男', '1974-06-03', '95031');-- 添加教师表数据INSERT INTO teacher VALUES('804', '李诚', '男', '1958-12-02', '副教授', '计算机系');INSERT INTO teacher VALUES('856', '张旭', '男', '1969-03-12', '讲师', '电子工程系');INSERT INTO teacher VALUES('825', '王萍', '女', '1972-05-05', '助教', '计算机系');INSERT INTO teacher VALUES('831', '刘冰', '女', '1977-08-14', '助教', '电子工程系');-- 添加课程表数据INSERT INTO course VALUES('3-105', '计算机导论', '825');INSERT INTO course VALUES('3-245', '操作系统', '804');INSERT INTO course VALUES('6-166', '数字电路', '856');INSERT INTO course VALUES('9-888', '高等数学', '831');-- 添加添加成绩表数据INSERT INTO score VALUES('103', '3-105', '92');INSERT INTO score VALUES('103', '3-245', '86');INSERT INTO score VALUES('103', '6-166', '85');INSERT INTO score VALUES('105', '3-105', '88');INSERT INTO score VALUES('105', '3-245', '75');INSERT INTO score VALUES('105', '6-166', '79');INSERT INTO score VALUES('109', '3-105', '76');INSERT INTO score VALUES('109', '3-245', '68');INSERT INTO score VALUES('109', '6-166', '81');-- 查看表结构SELECT * FROM course;SELECT * FROM score;SELECT * FROM student;SELECT * FROM teacher;</code></pre><h3 id="1-到-10"><a href="#1-到-10" class="headerlink" title="1 到 10"></a>1 到 10</h3><pre class=" language-mysql"><code class="language-mysql">-- 查询 student 表的所有行SELECT * FROM student;-- 查询 student 表中的 name、sex 和 class 字段的所有行SELECT name, sex, class FROM student;-- 查询 teacher 表中不重复的 department 列-- department: 去重查询SELECT DISTINCT department FROM teacher;-- 查询 score 表中成绩在60-80之间的所有行（区间查询和运算符查询）-- BETWEEN xx AND xx: 查询区间, AND 表示 "并且"SELECT * FROM score WHERE degree BETWEEN 60 AND 80;SELECT * FROM score WHERE degree > 60 AND degree < 80;-- 查询 score 表中成绩为 85, 86 或 88 的行-- IN: 查询规定中的多个值SELECT * FROM score WHERE degree IN (85, 86, 88);-- 查询 student 表中 '95031' 班或性别为 '女' 的所有行-- or: 表示或者关系SELECT * FROM student WHERE class = '95031' or sex = '女';-- 以 class 降序的方式查询 student 表的所有行-- DESC: 降序，从高到低-- ASC（默认）: 升序，从低到高SELECT * FROM student ORDER BY class DESC;SELECT * FROM student ORDER BY class ASC;-- 以 c_no 升序、degree 降序查询 score 表的所有行SELECT * FROM score ORDER BY c_no ASC, degree DESC;-- 查询 "95031" 班的学生人数-- COUNT: 统计SELECT COUNT(*) FROM student WHERE class = '95031';-- 查询 score 表中的最高分的学生学号和课程编号（子查询或排序查询）。-- (SELECT MAX(degree) FROM score): 子查询，算出最高分SELECT s_no, c_no FROM score WHERE degree = (SELECT MAX(degree) FROM score);--  排序查询-- LIMIT r, n: 表示从第r行开始，查询n条数据SELECT s_no, c_no, degree FROM score ORDER BY degree DESC LIMIT 0, 1;</code></pre><h3 id="分组计算平均成绩"><a href="#分组计算平均成绩" class="headerlink" title="分组计算平均成绩"></a>分组计算平均成绩</h3><p><strong>查询每门课的平均成绩。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- AVG: 平均值SELECT AVG(degree) FROM score WHERE c_no = '3-105';SELECT AVG(degree) FROM score WHERE c_no = '3-245';SELECT AVG(degree) FROM score WHERE c_no = '6-166';-- GROUP BY: 分组查询SELECT c_no, AVG(degree) FROM score GROUP BY c_no;</code></pre><h3 id="分组条件与模糊查询"><a href="#分组条件与模糊查询" class="headerlink" title="分组条件与模糊查询"></a>分组条件与模糊查询</h3><p><strong>查询 <code>score</code> 表中至少有 2 名学生选修，并以 3 开头的课程的平均分数。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score;-- c_no 课程编号+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 || 103  | 3-245 |     86 || 103  | 6-166 |     85 || 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><p>分析表发现，至少有 2 名学生选修的课程是 <code>3-105</code> 、<code>3-245</code> 、<code>6-166</code> ，以 3 开头的课程是 <code>3-105</code> 、<code>3-245</code> 。也就是说，我们要查询所有 <code>3-105</code> 和 <code>3-245</code> 的 <code>degree</code> 平均分。</p><pre class=" language-mysql"><code class="language-mysql">-- 首先把 c_no, AVG(degree) 通过分组查询出来SELECT c_no, AVG(degree) FROM score GROUP BY c_no+-------+-------------+| c_no  | AVG(degree) |+-------+-------------+| 3-105 |     85.3333 || 3-245 |     76.3333 || 6-166 |     81.6667 |+-------+-------------+-- 再查询出至少有 2 名学生选修的课程-- HAVING: 表示持有HAVING COUNT(c_no) >= 2-- 并且是以 3 开头的课程-- LIKE 表示模糊查询，"%" 是一个通配符，匹配 "3" 后面的任意字符。AND c_no LIKE '3%';-- 把前面的SQL语句拼接起来，-- 后面加上一个 COUNT(*)，表示将每个分组的个数也查询出来。SELECT c_no, AVG(degree), COUNT(*) FROM score GROUP BY c_noHAVING COUNT(c_no) >= 2 AND c_no LIKE '3%';+-------+-------------+----------+| c_no  | AVG(degree) | COUNT(*) |+-------+-------------+----------+| 3-105 |     85.3333 |        3 || 3-245 |     76.3333 |        3 |+-------+-------------+----------+</code></pre><h3 id="多表查询-1"><a href="#多表查询-1" class="headerlink" title="多表查询 - 1"></a>多表查询 - 1</h3><p><strong>查询所有学生的 <code>name</code>，以及该学生在 <code>score</code> 表中对应的 <code>c_no</code> 和 <code>degree</code> 。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT no, name FROM student;+-----+-----------+| no  | name      |+-----+-----------+| 101 | 曾华      || 102 | 匡明      || 103 | 王丽      || 104 | 李军      || 105 | 王芳      || 106 | 陆军      || 107 | 王尼玛    || 108 | 张全蛋    || 109 | 赵铁柱    |+-----+-----------+SELECT s_no, c_no, degree FROM score;+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 || 103  | 3-245 |     86 || 103  | 6-166 |     85 || 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><p>通过分析可以发现，只要把 <code>score</code> 表中的 <code>s_no</code> 字段值替换成 <code>student</code> 表中对应的 <code>name</code> 字段值就可以了，如何做呢？</p><pre class=" language-mysql"><code class="language-mysql">-- FROM...: 表示从 student, score 表中查询-- WHERE 的条件表示为，只有在 student.no 和 score.s_no 相等时才显示出来。SELECT name, c_no, degree FROM student, score WHERE student.no = score.s_no;+-----------+-------+--------+| name      | c_no  | degree |+-----------+-------+--------+| 王丽      | 3-105 |     92 || 王丽      | 3-245 |     86 || 王丽      | 6-166 |     85 || 王芳      | 3-105 |     88 || 王芳      | 3-245 |     75 || 王芳      | 6-166 |     79 || 赵铁柱    | 3-105 |     76 || 赵铁柱    | 3-245 |     68 || 赵铁柱    | 6-166 |     81 |+-----------+-------+--------+</code></pre><h3 id="多表查询-2"><a href="#多表查询-2" class="headerlink" title="多表查询 - 2"></a>多表查询 - 2</h3><p><strong>查询所有学生的 <code>no</code> 、课程名称 ( <code>course</code> 表中的 <code>name</code> ) 和成绩 ( <code>score</code> 表中的 <code>degree</code> ) 列。</strong></p><p>只有 <code>score</code> 关联学生的 <code>no</code> ，因此只要查询 <code>score</code> 表，就能找出所有和学生相关的 <code>no</code> 和 <code>degree</code> ：</p><pre class=" language-mysql"><code class="language-mysql">SELECT s_no, c_no, degree FROM score;+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 || 103  | 3-245 |     86 || 103  | 6-166 |     85 || 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><p>然后查询 <code>course</code> 表：</p><pre class=" language-mysql"><code class="language-mysql">+-------+-----------------+| no    | name            |+-------+-----------------+| 3-105 | 计算机导论      || 3-245 | 操作系统        || 6-166 | 数字电路        || 9-888 | 高等数学        |+-------+-----------------+</code></pre><p>只要把 <code>score</code> 表中的 <code>c_no</code> 替换成 <code>course</code> 表中对应的 <code>name</code> 字段值就可以了。</p><pre class=" language-mysql"><code class="language-mysql">-- 增加一个查询字段 name，分别从 score、course 这两个表中查询。-- as 表示取一个该字段的别名。SELECT s_no, name as c_name, degree FROM score, courseWHERE score.c_no = course.no;+------+-----------------+--------+| s_no | c_name          | degree |+------+-----------------+--------+| 103  | 计算机导论      |     92 || 105  | 计算机导论      |     88 || 109  | 计算机导论      |     76 || 103  | 操作系统        |     86 || 105  | 操作系统        |     75 || 109  | 操作系统        |     68 || 103  | 数字电路        |     85 || 105  | 数字电路        |     79 || 109  | 数字电路        |     81 |+------+-----------------+--------+</code></pre><h3 id="三表关联查询"><a href="#三表关联查询" class="headerlink" title="三表关联查询"></a>三表关联查询</h3><p><strong>查询所有学生的 <code>name</code> 、课程名 ( <code>course</code> 表中的 <code>name</code> ) 和 <code>degree</code> 。</strong></p><p>只有 <code>score</code> 表中关联学生的学号和课堂号，我们只要围绕着 <code>score</code> 这张表查询就好了。</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score;+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 || 103  | 3-245 |     86 || 103  | 6-166 |     85 || 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><p>只要把 <code>s_no</code> 和 <code>c_no</code> 替换成 <code>student</code> 和 <code>srouse</code> 表中对应的 <code>name</code> 字段值就好了。</p><p>首先把 <code>s_no</code> 替换成 <code>student</code> 表中的 <code>name</code> 字段：</p><pre class=" language-mysql"><code class="language-mysql">SELECT name, c_no, degree FROM student, score WHERE student.no = score.s_no;+-----------+-------+--------+| name      | c_no  | degree |+-----------+-------+--------+| 王丽      | 3-105 |     92 || 王丽      | 3-245 |     86 || 王丽      | 6-166 |     85 || 王芳      | 3-105 |     88 || 王芳      | 3-245 |     75 || 王芳      | 6-166 |     79 || 赵铁柱    | 3-105 |     76 || 赵铁柱    | 3-245 |     68 || 赵铁柱    | 6-166 |     81 |+-----------+-------+--------+</code></pre><p>再把 <code>c_no</code> 替换成 <code>course</code> 表中的 <code>name</code> 字段：</p><pre class=" language-mysql"><code class="language-mysql">-- 课程表SELECT no, name FROM course;+-------+-----------------+| no    | name            |+-------+-----------------+| 3-105 | 计算机导论      || 3-245 | 操作系统        || 6-166 | 数字电路        || 9-888 | 高等数学        |+-------+-----------------+-- 由于字段名存在重复，使用 "表名.字段名 as 别名" 代替。SELECT student.name as s_name, course.name as c_name, degree FROM student, score, courseWHERE student.NO = score.s_noAND score.c_no = course.no;</code></pre><h3 id="子查询加分组求平均分"><a href="#子查询加分组求平均分" class="headerlink" title="子查询加分组求平均分"></a>子查询加分组求平均分</h3><p><strong>查询 <code>95031</code> 班学生每门课程的平均成绩。</strong></p><p>在 <code>score</code> 表中根据 <code>student</code>  表的学生编号筛选出学生的课堂号和成绩：</p><pre class=" language-mysql"><code class="language-mysql">-- IN (..): 将筛选出的学生号当做 s_no 的条件查询SELECT s_no, c_no, degree FROM scoreWHERE s_no IN (SELECT no FROM student WHERE class = '95031');+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><p>这时只要将 <code>c_no</code> 分组一下就能得出 <code>95031</code> 班学生每门课的平均成绩：</p><pre class=" language-mysql"><code class="language-mysql">SELECT c_no, AVG(degree) FROM scoreWHERE s_no IN (SELECT no FROM student WHERE class = '95031')GROUP BY c_no;+-------+-------------+| c_no  | AVG(degree) |+-------+-------------+| 3-105 |     82.0000 || 3-245 |     71.5000 || 6-166 |     80.0000 |+-------+-------------+</code></pre><h3 id="子查询-1"><a href="#子查询-1" class="headerlink" title="子查询 - 1"></a>子查询 - 1</h3><p><strong>查询在 <code>3-105</code> 课程中，所有成绩高于 <code>109</code> 号同学的记录。</strong></p><p>首先筛选出课堂号为 <code>3-105</code> ，在找出所有成绩高于 <code>109</code> 号同学的的行。</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score WHERE c_no = '3-105'AND degree > (SELECT degree FROM score WHERE s_no = '109' AND c_no = '3-105');</code></pre><h3 id="子查询-2"><a href="#子查询-2" class="headerlink" title="子查询 - 2"></a>子查询 - 2</h3><p><strong>查询所有成绩高于 <code>109</code> 号同学的 <code>3-105</code> 课程成绩记录。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 不限制课程号，只要成绩大于109号同学的3-105课程成绩就可以。SELECT * FROM scoreWHERE degree > (SELECT degree FROM score WHERE s_no = '109' AND c_no = '3-105');</code></pre><h3 id="YEAR-函数与带-IN-关键字查询"><a href="#YEAR-函数与带-IN-关键字查询" class="headerlink" title="YEAR 函数与带 IN 关键字查询"></a>YEAR 函数与带 IN 关键字查询</h3><p><strong>查询所有和 <code>101</code> 、<code>108</code> 号学生同年出生的 <code>no</code> 、<code>name</code> 、<code>birthday</code> 列。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- YEAR(..): 取出日期中的年份SELECT no, name, birthday FROM studentWHERE YEAR(birthday) IN (SELECT YEAR(birthday) FROM student WHERE no IN (101, 108));</code></pre><h3 id="多层嵌套子查询"><a href="#多层嵌套子查询" class="headerlink" title="多层嵌套子查询"></a>多层嵌套子查询</h3><p><strong>查询 <code>&#39;张旭&#39;</code> 教师任课的学生成绩表。</strong></p><p>首先找到教师编号：</p><pre class=" language-mysql"><code class="language-mysql">SELECT NO FROM teacher WHERE NAME = '张旭'</code></pre><p>通过 <code>sourse</code> 表找到该教师课程号：</p><pre class=" language-mysql"><code class="language-mysql">SELECT NO FROM course WHERE t_no = ( SELECT NO FROM teacher WHERE NAME = '张旭' );</code></pre><p>通过筛选出的课程号查询成绩表：</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score WHERE c_no = (    SELECT no FROM course WHERE t_no = (         SELECT no FROM teacher WHERE NAME = '张旭'     ));</code></pre><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p><strong>查询某选修课程多于5个同学的教师姓名。</strong></p><p>首先在 <code>teacher</code> 表中，根据 <code>no</code> 字段来判断该教师的同一门课程是否有至少5名学员选修：</p><pre class=" language-mysql"><code class="language-mysql">-- 查询 teacher 表SELECT no, name FROM teacher;+-----+--------+| no  | name   |+-----+--------+| 804 | 李诚   || 825 | 王萍   || 831 | 刘冰   || 856 | 张旭   |+-----+--------+SELECT name FROM teacher WHERE no IN (    -- 在这里找到对应的条件);</code></pre><p>查看和教师编号有有关的表的信息：</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM course;-- t_no: 教师编号+-------+-----------------+------+| no    | name            | t_no |+-------+-----------------+------+| 3-105 | 计算机导论      | 825  || 3-245 | 操作系统        | 804  || 6-166 | 数字电路        | 856  || 9-888 | 高等数学        | 831  |+-------+-----------------+------+</code></pre><p>我们已经找到和教师编号有关的字段就在 <code>course</code> 表中，但是还无法知道哪门课程至少有5名学生选修，所以还需要根据 <code>score</code> 表来查询：</p><pre class=" language-mysql"><code class="language-mysql">-- 在此之前向 score 插入一些数据，以便丰富查询条件。INSERT INTO score VALUES ('101', '3-105', '90');INSERT INTO score VALUES ('102', '3-105', '91');INSERT INTO score VALUES ('104', '3-105', '89');-- 查询 score 表SELECT * FROM score;+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 101  | 3-105 |     90 || 102  | 3-105 |     91 || 103  | 3-105 |     92 || 103  | 3-245 |     86 || 103  | 6-166 |     85 || 104  | 3-105 |     89 || 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+-- 在 score 表中将 c_no 作为分组，并且限制 c_no 持有至少 5 条数据。SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) > 5;+-------+| c_no  |+-------+| 3-105 |+-------+</code></pre><p>根据筛选出来的课程号，找出在某课程中，拥有至少5名学员的教师编号：</p><pre class=" language-mysql"><code class="language-mysql">SELECT t_no FROM course WHERE no IN (    SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) > 5);+------+| t_no |+------+| 825  |+------+</code></pre><p>在 <code>teacher</code> 表中，根据筛选出来的教师编号找到教师姓名：</p><pre class=" language-mysql"><code class="language-mysql">SELECT name FROM teacher WHERE no IN (    -- 最终条件    SELECT t_no FROM course WHERE no IN (        SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) > 5    ));</code></pre><h3 id="子查询-3"><a href="#子查询-3" class="headerlink" title="子查询 - 3"></a>子查询 - 3</h3><p><strong>查询 “计算机系” 课程的成绩表。</strong></p><p>思路是，先找出 <code>course</code> 表中所有 <code>计算机系</code> 课程的编号，然后根据这个编号查询 <code>score</code> 表。</p><pre class=" language-mysql"><code class="language-mysql">-- 通过 teacher 表查询所有 `计算机系` 的教师编号SELECT no, name, department FROM teacher WHERE department = '计算机系'+-----+--------+--------------+| no  | name   | department   |+-----+--------+--------------+| 804 | 李诚   | 计算机系     || 825 | 王萍   | 计算机系     |+-----+--------+--------------+-- 通过 course 表查询该教师的课程编号SELECT no FROM course WHERE t_no IN (    SELECT no FROM teacher WHERE department = '计算机系');+-------+| no    |+-------+| 3-245 || 3-105 |+-------+-- 根据筛选出来的课程号查询成绩表SELECT * FROM score WHERE c_no IN (    SELECT no FROM course WHERE t_no IN (        SELECT no FROM teacher WHERE department = '计算机系'    ));+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-245 |     86 || 105  | 3-245 |     75 || 109  | 3-245 |     68 || 101  | 3-105 |     90 || 102  | 3-105 |     91 || 103  | 3-105 |     92 || 104  | 3-105 |     89 || 105  | 3-105 |     88 || 109  | 3-105 |     76 |+------+-------+--------+</code></pre><h3 id="UNION-和-NOTIN-的使用"><a href="#UNION-和-NOTIN-的使用" class="headerlink" title="UNION 和 NOTIN 的使用"></a>UNION 和 NOTIN 的使用</h3><p><strong>查询 <code>计算机系</code> 与 <code>电子工程系</code> 中的不同职称的教师。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- NOT: 代表逻辑非SELECT * FROM teacher WHERE department = '计算机系' AND profession NOT IN (    SELECT profession FROM teacher WHERE department = '电子工程系')-- 合并两个集UNIONSELECT * FROM teacher WHERE department = '电子工程系' AND profession NOT IN (    SELECT profession FROM teacher WHERE department = '计算机系');</code></pre><h3 id="ANY-表示至少一个-DESC-降序"><a href="#ANY-表示至少一个-DESC-降序" class="headerlink" title="ANY 表示至少一个 - DESC ( 降序 )"></a>ANY 表示至少一个 - DESC ( 降序 )</h3><p><strong>查询课程 <code>3-105</code> 且成绩 <u>至少</u> 高于 <code>3-245</code> 的 <code>score</code> 表。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score WHERE c_no = '3-105';+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 101  | 3-105 |     90 || 102  | 3-105 |     91 || 103  | 3-105 |     92 || 104  | 3-105 |     89 || 105  | 3-105 |     88 || 109  | 3-105 |     76 |+------+-------+--------+SELECT * FROM score WHERE c_no = '3-245';+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-245 |     86 || 105  | 3-245 |     75 || 109  | 3-245 |     68 |+------+-------+--------+-- ANY: 符合SQL语句中的任意条件。-- 也就是说，在 3-105 成绩中，只要有一个大于从 3-245 筛选出来的任意行就符合条件，-- 最后根据降序查询结果。SELECT * FROM score WHERE c_no = '3-105' AND degree > ANY(    SELECT degree FROM score WHERE c_no = '3-245') ORDER BY degree DESC;+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 || 102  | 3-105 |     91 || 101  | 3-105 |     90 || 104  | 3-105 |     89 || 105  | 3-105 |     88 || 109  | 3-105 |     76 |+------+-------+--------+</code></pre><h3 id="表示所有的-ALL"><a href="#表示所有的-ALL" class="headerlink" title="表示所有的 ALL"></a>表示所有的 ALL</h3><p><strong>查询课程 <code>3-105</code> 且成绩高于 <code>3-245</code> 的 <code>score</code> 表。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 只需对上一道题稍作修改。-- ALL: 符合SQL语句中的所有条件。-- 也就是说，在 3-105 每一行成绩中，都要大于从 3-245 筛选出来全部行才算符合条件。SELECT * FROM score WHERE c_no = '3-105' AND degree > ALL(    SELECT degree FROM score WHERE c_no = '3-245');+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 101  | 3-105 |     90 || 102  | 3-105 |     91 || 103  | 3-105 |     92 || 104  | 3-105 |     89 || 105  | 3-105 |     88 |+------+-------+--------+</code></pre><h3 id="复制表的数据作为条件查询"><a href="#复制表的数据作为条件查询" class="headerlink" title="复制表的数据作为条件查询"></a>复制表的数据作为条件查询</h3><p><strong>查询某课程成绩比该课程平均成绩低的 <code>score</code> 表。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 查询平均分SELECT c_no, AVG(degree) FROM score GROUP BY c_no;+-------+-------------+| c_no  | AVG(degree) |+-------+-------------+| 3-105 |     87.6667 || 3-245 |     76.3333 || 6-166 |     81.6667 |+-------+-------------+-- 查询 score 表SELECT degree FROM score;+--------+| degree |+--------+|     90 ||     91 ||     92 ||     86 ||     85 ||     89 ||     88 ||     75 ||     79 ||     76 ||     68 ||     81 |+--------+-- 将表 b 作用于表 a 中查询数据-- score a (b): 将表声明为 a (b)，-- 如此就能用 a.c_no = b.c_no 作为条件执行查询了。SELECT * FROM score a WHERE degree < (    (SELECT AVG(degree) FROM score b WHERE a.c_no = b.c_no));+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><h3 id="子查询-4"><a href="#子查询-4" class="headerlink" title="子查询 - 4"></a>子查询 - 4</h3><p><strong>查询所有任课 ( 在 <code>course</code> 表里有课程 ) 教师的 <code>name</code> 和 <code>department</code></strong> 。</p><pre class=" language-mysql"><code class="language-mysql">SELECT name, department FROM teacher WHERE no IN (SELECT t_no FROM course);+--------+-----------------+| name   | department      |+--------+-----------------+| 李诚   | 计算机系        || 王萍   | 计算机系        || 刘冰   | 电子工程系      || 张旭   | 电子工程系      |+--------+-----------------+</code></pre><h3 id="条件加组筛选"><a href="#条件加组筛选" class="headerlink" title="条件加组筛选"></a>条件加组筛选</h3><p><strong>查询 <code>student</code> 表中至少有 2 名男生的 <code>class</code> 。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 查看学生表信息SELECT * FROM student;+-----+-----------+-----+------------+-------+| no  | name      | sex | birthday   | class |+-----+-----------+-----+------------+-------+| 101 | 曾华      | 男  | 1977-09-01 | 95033 || 102 | 匡明      | 男  | 1975-10-02 | 95031 || 103 | 王丽      | 女  | 1976-01-23 | 95033 || 104 | 李军      | 男  | 1976-02-20 | 95033 || 105 | 王芳      | 女  | 1975-02-10 | 95031 || 106 | 陆军      | 男  | 1974-06-03 | 95031 || 107 | 王尼玛    | 男  | 1976-02-20 | 95033 || 108 | 张全蛋    | 男  | 1975-02-10 | 95031 || 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 || 110 | 张飞      | 男  | 1974-06-03 | 95038 |+-----+-----------+-----+------------+-------+-- 只查询性别为男，然后按 class 分组，并限制 class 行大于 1。SELECT class FROM student WHERE sex = '男' GROUP BY class HAVING COUNT(*) > 1;+-------+| class |+-------+| 95033 || 95031 |+-------+</code></pre><h3 id="NOTLIKE-模糊查询取反"><a href="#NOTLIKE-模糊查询取反" class="headerlink" title="NOTLIKE 模糊查询取反"></a>NOTLIKE 模糊查询取反</h3><p><strong>查询 <code>student</code> 表中不姓 “王” 的同学记录。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- NOT: 取反-- LIKE: 模糊查询mysql> SELECT * FROM student WHERE name NOT LIKE '王%';+-----+-----------+-----+------------+-------+| no  | name      | sex | birthday   | class |+-----+-----------+-----+------------+-------+| 101 | 曾华      | 男  | 1977-09-01 | 95033 || 102 | 匡明      | 男  | 1975-10-02 | 95031 || 104 | 李军      | 男  | 1976-02-20 | 95033 || 106 | 陆军      | 男  | 1974-06-03 | 95031 || 108 | 张全蛋    | 男  | 1975-02-10 | 95031 || 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 || 110 | 张飞      | 男  | 1974-06-03 | 95038 |+-----+-----------+-----+------------+-------+</code></pre><h3 id="YEAR-与-NOW-函数"><a href="#YEAR-与-NOW-函数" class="headerlink" title="YEAR 与 NOW 函数"></a>YEAR 与 NOW 函数</h3><p><strong>查询 <code>student</code> 表中每个学生的姓名和年龄。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 使用函数 YEAR(NOW()) 计算出当前年份，减去出生年份后得出年龄。SELECT name, YEAR(NOW()) - YEAR(birthday) as age FROM student;+-----------+------+| name      | age  |+-----------+------+| 曾华      |   42 || 匡明      |   44 || 王丽      |   43 || 李军      |   43 || 王芳      |   44 || 陆军      |   45 || 王尼玛    |   43 || 张全蛋    |   44 || 赵铁柱    |   45 || 张飞      |   45 |+-----------+------+</code></pre><h3 id="MAX-与-MIN-函数"><a href="#MAX-与-MIN-函数" class="headerlink" title="MAX 与 MIN 函数"></a>MAX 与 MIN 函数</h3><p><strong>查询 <code>student</code> 表中最大和最小的 <code>birthday</code> 值。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT MAX(birthday), MIN(birthday) FROM student;+---------------+---------------+| MAX(birthday) | MIN(birthday) |+---------------+---------------+| 1977-09-01    | 1974-06-03    |+---------------+---------------+</code></pre><h3 id="多段排序"><a href="#多段排序" class="headerlink" title="多段排序"></a>多段排序</h3><p><strong>以 <code>class</code> 和 <code>birthday</code> 从大到小的顺序查询 <code>student</code> 表。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM student ORDER BY class DESC, birthday;+-----+-----------+-----+------------+-------+| no  | name      | sex | birthday   | class |+-----+-----------+-----+------------+-------+| 110 | 张飞      | 男  | 1974-06-03 | 95038 || 103 | 王丽      | 女  | 1976-01-23 | 95033 || 104 | 李军      | 男  | 1976-02-20 | 95033 || 107 | 王尼玛    | 男  | 1976-02-20 | 95033 || 101 | 曾华      | 男  | 1977-09-01 | 95033 || 106 | 陆军      | 男  | 1974-06-03 | 95031 || 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 || 105 | 王芳      | 女  | 1975-02-10 | 95031 || 108 | 张全蛋    | 男  | 1975-02-10 | 95031 || 102 | 匡明      | 男  | 1975-10-02 | 95031 |+-----+-----------+-----+------------+-------+</code></pre><h3 id="子查询-5"><a href="#子查询-5" class="headerlink" title="子查询 - 5"></a>子查询 - 5</h3><p><strong>查询 “男” 教师及其所上的课程。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM course WHERE t_no in (SELECT no FROM teacher WHERE sex = '男');+-------+--------------+------+| no    | name         | t_no |+-------+--------------+------+| 3-245 | 操作系统     | 804  || 6-166 | 数字电路     | 856  |+-------+--------------+------+</code></pre><h3 id="MAX-函数与子查询"><a href="#MAX-函数与子查询" class="headerlink" title="MAX 函数与子查询"></a>MAX 函数与子查询</h3><p><strong>查询最高分同学的 <code>score</code> 表。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 找出最高成绩（该查询只能有一个结果）SELECT MAX(degree) FROM score;-- 根据上面的条件筛选出所有最高成绩表，-- 该查询可能有多个结果，假设 degree 值多次符合条件。SELECT * FROM score WHERE degree = (SELECT MAX(degree) FROM score);+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 |+------+-------+--------+</code></pre><h3 id="子查询-6"><a href="#子查询-6" class="headerlink" title="子查询 - 6"></a>子查询 - 6</h3><p><strong>查询和 “李军” 同性别的所有同学 <code>name</code> 。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 首先将李军的性别作为条件取出来SELECT sex FROM student WHERE name = '李军';+-----+| sex |+-----+| 男  |+-----+-- 根据性别查询 name 和 sexSELECT name, sex FROM student WHERE sex = (    SELECT sex FROM student WHERE name = '李军');+-----------+-----+| name      | sex |+-----------+-----+| 曾华      | 男  || 匡明      | 男  || 李军      | 男  || 陆军      | 男  || 王尼玛    | 男  || 张全蛋    | 男  || 赵铁柱    | 男  || 张飞      | 男  |+-----------+-----+</code></pre><h3 id="子查询-7"><a href="#子查询-7" class="headerlink" title="子查询 - 7"></a>子查询 - 7</h3><p><strong>查询和 “李军” 同性别且同班的同学 <code>name</code> 。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT name, sex, class FROM student WHERE sex = (    SELECT sex FROM student WHERE name = '李军') AND class = (    SELECT class FROM student WHERE name = '李军');+-----------+-----+-------+| name      | sex | class |+-----------+-----+-------+| 曾华      | 男  | 95033 || 李军      | 男  | 95033 || 王尼玛    | 男  | 95033 |+-----------+-----+-------+</code></pre><h3 id="子查询-8"><a href="#子查询-8" class="headerlink" title="子查询 - 8"></a>子查询 - 8</h3><p><strong>查询所有选修 “计算机导论” 课程的 “男” 同学成绩表。</strong></p><p>需要的 “计算机导论” 和性别为 “男” 的编号可以在 <code>course</code> 和 <code>student</code> 表中找到。</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score WHERE c_no = (    SELECT no FROM course WHERE name = '计算机导论') AND s_no IN (    SELECT no FROM student WHERE sex = '男');+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 101  | 3-105 |     90 || 102  | 3-105 |     91 || 104  | 3-105 |     89 || 109  | 3-105 |     76 |+------+-------+--------+</code></pre><h3 id="按等级查询"><a href="#按等级查询" class="headerlink" title="按等级查询"></a>按等级查询</h3><p>建立一个 <code>grade</code> 表代表学生的成绩等级，并插入数据：</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE grade (    low INT(3),    upp INT(3),    grade char(1));INSERT INTO grade VALUES (90, 100, 'A');INSERT INTO grade VALUES (80, 89, 'B');INSERT INTO grade VALUES (70, 79, 'C');INSERT INTO grade VALUES (60, 69, 'D');INSERT INTO grade VALUES (0, 59, 'E');SELECT * FROM grade;+------+------+-------+| low  | upp  | grade |+------+------+-------+|   90 |  100 | A     ||   80 |   89 | B     ||   70 |   79 | C     ||   60 |   69 | D     ||    0 |   59 | E     |+------+------+-------+</code></pre><p><strong>查询所有学生的 <code>s_no</code> 、<code>c_no</code> 和 <code>grade</code> 列。</strong></p><p>思路是，使用区间 ( <code>BETWEEN</code> ) 查询，判断学生的成绩 ( <code>degree</code> )  在 <code>grade</code> 表的 <code>low</code> 和 <code>upp</code> 之间。</p><pre class=" language-mysql"><code class="language-mysql">SELECT s_no, c_no, grade FROM score, grade WHERE degree BETWEEN low AND upp;+------+-------+-------+| s_no | c_no  | grade |+------+-------+-------+| 101  | 3-105 | A     || 102  | 3-105 | A     || 103  | 3-105 | A     || 103  | 3-245 | B     || 103  | 6-166 | B     || 104  | 3-105 | B     || 105  | 3-105 | B     || 105  | 3-245 | C     || 105  | 6-166 | C     || 109  | 3-105 | C     || 109  | 3-245 | D     || 109  | 6-166 | B     |+------+-------+-------+</code></pre><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>准备用于测试连接查询的数据：</p><pre class=" language-mysql"><code class="language-mysql">CREATE DATABASE testJoin;CREATE TABLE person (    id INT,    name VARCHAR(20),    cardId INT);CREATE TABLE card (    id INT,    name VARCHAR(20));INSERT INTO card VALUES (1, '饭卡'), (2, '建行卡'), (3, '农行卡'), (4, '工商卡'), (5, '邮政卡');SELECT * FROM card;+------+-----------+| id   | name      |+------+-----------+|    1 | 饭卡      ||    2 | 建行卡    ||    3 | 农行卡    ||    4 | 工商卡    ||    5 | 邮政卡    |+------+-----------+INSERT INTO person VALUES (1, '张三', 1), (2, '李四', 3), (3, '王五', 6);SELECT * FROM person;+------+--------+--------+| id   | name   | cardId |+------+--------+--------+|    1 | 张三   |      1 ||    2 | 李四   |      3 ||    3 | 王五   |      6 |+------+--------+--------+</code></pre><p>分析两张表发现，<code>person</code> 表并没有为 <code>cardId</code> 字段设置一个在 <code>card</code> 表中对应的 <code>id</code> 外键。如果设置了的话，<code>person</code> 中 <code>cardId</code> 字段值为 <code>6</code> 的行就插不进去，因为该 <code>cardId</code> 值在 <code>card</code> 表中并没有。</p><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>要查询这两张表中有关系的数据，可以使用 <code>INNER JOIN</code> ( 内连接 ) 将它们连接在一起。</p><pre class=" language-mysql"><code class="language-mysql">-- INNER JOIN: 表示为内连接，将两张表拼接在一起。-- on: 表示要执行某个条件。SELECT * FROM person INNER JOIN card on person.cardId = card.id;+------+--------+--------+------+-----------+| id   | name   | cardId | id   | name      |+------+--------+--------+------+-----------+|    1 | 张三   |      1 |    1 | 饭卡      ||    2 | 李四   |      3 |    3 | 农行卡    |+------+--------+--------+------+-----------+-- 将 INNER 关键字省略掉，结果也是一样的。-- SELECT * FROM person JOIN card on person.cardId = card.id;</code></pre><blockquote><p>注意：<code>card</code> 的整张表被连接到了右边。</p></blockquote><h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><p>完整显示左边的表 ( <code>person</code> ) ，右边的表如果符合条件就显示，不符合则补 <code>NULL</code> 。</p><pre class=" language-mysql"><code class="language-mysql">-- LEFT JOIN 也叫做 LEFT OUTER JOIN，用这两种方式的查询结果是一样的。SELECT * FROM person LEFT JOIN card on person.cardId = card.id;+------+--------+--------+------+-----------+| id   | name   | cardId | id   | name      |+------+--------+--------+------+-----------+|    1 | 张三   |      1 |    1 | 饭卡      ||    2 | 李四   |      3 |    3 | 农行卡    ||    3 | 王五   |      6 | NULL | NULL      |+------+--------+--------+------+-----------+</code></pre><h4 id="右外链接"><a href="#右外链接" class="headerlink" title="右外链接"></a>右外链接</h4><p>完整显示右边的表 ( <code>card</code> ) ，左边的表如果符合条件就显示，不符合则补 <code>NULL</code> 。</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM person RIGHT JOIN card on person.cardId = card.id;+------+--------+--------+------+-----------+| id   | name   | cardId | id   | name      |+------+--------+--------+------+-----------+|    1 | 张三   |      1 |    1 | 饭卡      ||    2 | 李四   |      3 |    3 | 农行卡    || NULL | NULL   |   NULL |    2 | 建行卡    || NULL | NULL   |   NULL |    4 | 工商卡    || NULL | NULL   |   NULL |    5 | 邮政卡    |+------+--------+--------+------+-----------+</code></pre><h4 id="全外链接"><a href="#全外链接" class="headerlink" title="全外链接"></a>全外链接</h4><p>完整显示两张表的全部数据。</p><pre class=" language-mysql"><code class="language-mysql">-- MySQL 不支持这种语法的全外连接-- SELECT * FROM person FULL JOIN card on person.cardId = card.id;-- 出现错误：-- ERROR 1054 (42S22): Unknown column 'person.cardId' in 'on clause'-- MySQL全连接语法，使用 UNION 将两张表合并在一起。SELECT * FROM person LEFT JOIN card on person.cardId = card.idUNIONSELECT * FROM person RIGHT JOIN card on person.cardId = card.id;+------+--------+--------+------+-----------+| id   | name   | cardId | id   | name      |+------+--------+--------+------+-----------+|    1 | 张三   |      1 |    1 | 饭卡      ||    2 | 李四   |      3 |    3 | 农行卡    ||    3 | 王五   |      6 | NULL | NULL      || NULL | NULL   |   NULL |    2 | 建行卡    || NULL | NULL   |   NULL |    4 | 工商卡    || NULL | NULL   |   NULL |    5 | 邮政卡    |+------+--------+--------+------+-----------+</code></pre><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>在 MySQL 中，事务其实是一个最小的不可分割的工作单元。事务能够<strong>保证一个业务的完整性</strong>。</p><p>比如我们的银行转账：</p><pre class=" language-mysql"><code class="language-mysql">-- a -> -100UPDATE user set money = money - 100 WHERE name = 'a';-- b -> +100UPDATE user set money = money + 100 WHERE name = 'b';</code></pre><p>在实际项目中，假设只有一条 SQL 语句执行成功，而另外一条执行失败了，就会出现数据前后不一致。</p><p>因此，在执行多条有关联 SQL 语句时，<strong>事务</strong>可能会要求这些 SQL 语句要么同时执行成功，要么就都执行失败。</p><h3 id="如何控制事务-COMMIT-ROLLBACK"><a href="#如何控制事务-COMMIT-ROLLBACK" class="headerlink" title="如何控制事务 - COMMIT / ROLLBACK"></a>如何控制事务 - COMMIT / ROLLBACK</h3><p>在 MySQL 中，事务的<strong>自动提交</strong>状态默认是开启的。</p><pre class=" language-mysql"><code class="language-mysql">-- 查询事务的自动提交状态SELECT @@AUTOCOMMIT;+--------------+| @@AUTOCOMMIT |+--------------+|            1 |+--------------+</code></pre><p><strong>自动提交的作用</strong>：当我们执行一条 SQL 语句的时候，其产生的效果就会立即体现出来，且不能<strong>回滚</strong>。</p><p>什么是回滚？举个例子：</p><pre class=" language-mysql"><code class="language-mysql">CREATE DATABASE bank;USE bank;CREATE TABLE user (    id INT PRIMARY KEY,    name VARCHAR(20),    money INT);INSERT INTO user VALUES (1, 'a', 1000);SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 |+----+------+-------+</code></pre><p>可以看到，在执行插入语句后数据立刻生效，原因是 MySQL 中的事务自动将它<strong>提交</strong>到了数据库中。那么所谓<strong>回滚</strong>的意思就是，撤销执行过的所有 SQL 语句，使其回滚到<strong>最后一次提交</strong>数据时的状态。</p><p>在 MySQL 中使用 <code>ROLLBACK</code> 执行回滚：</p><pre class=" language-mysql"><code class="language-mysql">-- 回滚到最后一次提交ROLLBACK;SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 |+----+------+-------+</code></pre><p>由于所有执行过的 SQL 语句都已经被提交过了，所以数据并没有发生回滚。那如何让数据可以发生回滚？</p><pre class=" language-mysql"><code class="language-mysql">-- 关闭自动提交SET AUTOCOMMIT = 0;-- 查询自动提交状态SELECT @@AUTOCOMMIT;+--------------+| @@AUTOCOMMIT |+--------------+|            0 |+--------------+</code></pre><p>将自动提交关闭后，测试数据回滚：</p><pre class=" language-mysql"><code class="language-mysql">INSERT INTO user VALUES (2, 'b', 1000);-- 关闭 AUTOCOMMIT 后，数据的变化是在一张虚拟的临时数据表中展示，-- 发生变化的数据并没有真正插入到数据表中。SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 ||  2 | b    |  1000 |+----+------+-------+-- 数据表中的真实数据其实还是：+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 |+----+------+-------+-- 由于数据还没有真正提交，可以使用回滚ROLLBACK;-- 再次查询SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 |+----+------+-------+</code></pre><p>那如何将虚拟的数据真正提交到数据库中？使用 <code>COMMIT</code> : </p><pre class=" language-mysql"><code class="language-mysql">INSERT INTO user VALUES (2, 'b', 1000);-- 手动提交数据（持久性），-- 将数据真正提交到数据库中，执行后不能再回滚提交过的数据。COMMIT;-- 提交后测试回滚ROLLBACK;-- 再次查询（回滚无效了）SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 ||  2 | b    |  1000 |+----+------+-------+</code></pre><blockquote><p><strong>总结</strong></p><ol><li><p><strong>自动提交</strong></p><ul><li><p>查看自动提交状态：<code>SELECT @@AUTOCOMMIT</code> ；</p></li><li><p>设置自动提交状态：<code>SET AUTOCOMMIT = 0</code> 。</p></li></ul></li><li><p><strong>手动提交</strong></p><p><code>@@AUTOCOMMIT = 0</code> 时，使用 <code>COMMIT</code> 命令提交事务。</p></li><li><p><strong>事务回滚</strong></p><p><code>@@AUTOCOMMIT = 0</code> 时，使用 <code>ROLLBACK</code> 命令回滚事务。</p></li></ol></blockquote><p><strong>事务的实际应用</strong>，让我们再回到银行转账项目：</p><pre class=" language-mysql"><code class="language-mysql">-- 转账UPDATE user set money = money - 100 WHERE name = 'a';-- 到账UPDATE user set money = money + 100 WHERE name = 'b';SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |   900 ||  2 | b    |  1100 |+----+------+-------+</code></pre><p>这时假设在转账时发生了意外，就可以使用 <code>ROLLBACK</code> 回滚到最后一次提交的状态：</p><pre class=" language-mysql"><code class="language-mysql">-- 假设转账发生了意外，需要回滚。ROLLBACK;SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 ||  2 | b    |  1000 |+----+------+-------+</code></pre><p>这时我们又回到了发生意外之前的状态，也就是说，事务给我们提供了一个可以反悔的机会。假设数据没有发生意外，这时可以手动将数据真正提交到数据表中：<code>COMMIT</code> 。</p><h3 id="手动开启事务-BEGIN-START-TRANSACTION"><a href="#手动开启事务-BEGIN-START-TRANSACTION" class="headerlink" title="手动开启事务 - BEGIN / START TRANSACTION"></a>手动开启事务 - BEGIN / START TRANSACTION</h3><p>事务的默认提交被开启 ( <code>@@AUTOCOMMIT = 1</code> ) 后，此时就不能使用事务回滚了。但是我们还可以手动开启一个事务处理事件，使其可以发生回滚：</p><pre class=" language-mysql"><code class="language-mysql">-- 使用 BEGIN 或者 START TRANSACTION 手动开启一个事务-- START TRANSACTION;BEGIN;UPDATE user set money = money - 100 WHERE name = 'a';UPDATE user set money = money + 100 WHERE name = 'b';-- 由于手动开启的事务没有开启自动提交，-- 此时发生变化的数据仍然是被保存在一张临时表中。SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |   900 ||  2 | b    |  1100 |+----+------+-------+-- 测试回滚ROLLBACK;SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 ||  2 | b    |  1000 |+----+------+-------+</code></pre><p>仍然使用 <code>COMMIT</code> 提交数据，提交后无法再发生本次事务的回滚。</p><pre class=" language-mysql"><code class="language-mysql">BEGIN;UPDATE user set money = money - 100 WHERE name = 'a';UPDATE user set money = money + 100 WHERE name = 'b';SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |   900 ||  2 | b    |  1100 |+----+------+-------+-- 提交数据COMMIT;-- 测试回滚（无效，因为表的数据已经被提交）ROLLBACK;</code></pre><h3 id="事务的-ACID-特征与使用"><a href="#事务的-ACID-特征与使用" class="headerlink" title="事务的 ACID 特征与使用"></a>事务的 ACID 特征与使用</h3><p><strong>事务的四大特征：</strong></p><ul><li><strong>A 原子性</strong>：事务是最小的单位，不可以再分割；</li><li><strong>C 一致性</strong>：要求同一事务中的 SQL 语句，必须保证同时成功或者失败；</li><li><strong>I 隔离性</strong>：事务1 和 事务2 之间是具有隔离性的；</li><li><strong>D 持久性</strong>：事务一旦结束 ( <code>COMMIT</code> ) ，就不可以再返回了 ( <code>ROLLBACK</code> ) 。</li></ul><h3 id="事务的隔离性"><a href="#事务的隔离性" class="headerlink" title="事务的隔离性"></a>事务的隔离性</h3><p><strong>事务的隔离性可分为四种 ( 性能从低到高 )</strong> ：</p><ol><li><p><strong>READ UNCOMMITTED ( 读取未提交 )</strong></p><p>如果有多个事务，那么任意事务都可以看见其他事务的<strong>未提交数据</strong>。</p></li><li><p><strong>READ COMMITTED ( 读取已提交 )</strong></p><p>只能读取到其他事务<strong>已经提交的数据</strong>。</p></li><li><p><strong>REPEATABLE READ ( 可被重复读 )</strong></p><p>如果有多个连接都开启了事务，那么事务之间不能共享数据记录，否则只能共享已提交的记录。</p></li><li><p><strong>SERIALIZABLE ( 串行化 )</strong></p><p>所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong>。</p></li></ol><p>查看当前数据库的默认隔离级别：</p><pre class=" language-mysql"><code class="language-mysql">-- MySQL 8.x, GLOBAL 表示系统级别，不加表示会话级别。SELECT @@GLOBAL.TRANSACTION_ISOLATION;SELECT @@TRANSACTION_ISOLATION;+--------------------------------+| @@GLOBAL.TRANSACTION_ISOLATION |+--------------------------------+| REPEATABLE-READ                | -- MySQL的默认隔离级别，可以重复读。+--------------------------------+-- MySQL 5.xSELECT @@GLOBAL.TX_ISOLATION;SELECT @@TX_ISOLATION;</code></pre><p>修改隔离级别：</p><pre class=" language-mysql"><code class="language-mysql">-- 设置系统隔离级别，LEVEL 后面表示要设置的隔离级别 (READ UNCOMMITTED)。SET GLOBAL TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;-- 查询系统隔离级别，发现已经被修改。SELECT @@GLOBAL.TRANSACTION_ISOLATION;+--------------------------------+| @@GLOBAL.TRANSACTION_ISOLATION |+--------------------------------+| READ-UNCOMMITTED               |+--------------------------------+</code></pre><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>测试 <strong>READ UNCOMMITTED ( 读取未提交 )</strong> 的隔离性：</p><pre class=" language-mysql"><code class="language-mysql">INSERT INTO user VALUES (3, '小明', 1000);INSERT INTO user VALUES (4, '淘宝店', 1000);SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |  1000 ||  4 | 淘宝店    |  1000 |+----+-----------+-------+-- 开启一个事务操作数据-- 假设小明在淘宝店买了一双800块钱的鞋子：START TRANSACTION;UPDATE user SET money = money - 800 WHERE name = '小明';UPDATE user SET money = money + 800 WHERE name = '淘宝店';-- 然后淘宝店在另一方查询结果，发现钱已到账。SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |   200 ||  4 | 淘宝店    |  1800 |+----+-----------+-------+</code></pre><p>由于小明的转账是在新开启的事务上进行操作的，而该操作的结果是可以被其他事务（另一方的淘宝店）看见的，因此淘宝店的查询结果是正确的，淘宝店确认到账。但就在这时，如果小明在它所处的事务上又执行了 <code>ROLLBACK</code> 命令，会发生什么？</p><pre class=" language-mysql"><code class="language-mysql">-- 小明所处的事务ROLLBACK;-- 此时无论对方是谁，如果再去查询结果就会发现：SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |  1000 ||  4 | 淘宝店    |  1000 |+----+-----------+-------+</code></pre><p>这就是所谓的<strong>脏读</strong>，一个事务读取到另外一个事务还未提交的数据。这在实际开发中是不允许出现的。</p><h4 id="读取已提交"><a href="#读取已提交" class="headerlink" title="读取已提交"></a>读取已提交</h4><p>把隔离级别设置为 <strong>READ COMMITTED</strong> ：</p><pre class=" language-mysql"><code class="language-mysql">SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;SELECT @@GLOBAL.TRANSACTION_ISOLATION;+--------------------------------+| @@GLOBAL.TRANSACTION_ISOLATION |+--------------------------------+| READ-COMMITTED                 |+--------------------------------+</code></pre><p>这样，再有新的事务连接进来时，它们就只能查询到已经提交过的事务数据了。但是对于当前事务来说，它们看到的还是未提交的数据，例如：</p><pre class=" language-mysql"><code class="language-mysql">-- 正在操作数据事务（当前事务）START TRANSACTION;UPDATE user SET money = money - 800 WHERE name = '小明';UPDATE user SET money = money + 800 WHERE name = '淘宝店';-- 虽然隔离级别被设置为了 READ COMMITTED，但在当前事务中，-- 它看到的仍然是数据表中临时改变数据，而不是真正提交过的数据。SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |   200 ||  4 | 淘宝店    |  1800 |+----+-----------+-------+-- 假设此时在远程开启了一个新事务，连接到数据库。$ mysql -u root -p12345612-- 此时远程连接查询到的数据只能是已经提交过的SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |  1000 ||  4 | 淘宝店    |  1000 |+----+-----------+-------+</code></pre><p>但是这样还有问题，那就是假设一个事务在操作数据时，其他事务干扰了这个事务的数据。例如：</p><pre class=" language-mysql"><code class="language-mysql">-- 小张在查询数据的时候发现：SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |   200 ||  4 | 淘宝店    |  1800 |+----+-----------+-------+-- 在小张求表的 money 平均值之前，小王做了一个操作：START TRANSACTION;INSERT INTO user VALUES (5, 'c', 100);COMMIT;-- 此时表的真实数据是：SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |  1000 ||  4 | 淘宝店    |  1000 ||  5 | c         |   100 |+----+-----------+-------+-- 这时小张再求平均值的时候，就会出现计算不相符合的情况：SELECT AVG(money) FROM user;+------------+| AVG(money) |+------------+|  820.0000  |+------------+</code></pre><p>虽然 <strong>READ COMMITTED</strong> 让我们只能读取到其他事务已经提交的数据，但还是会出现问题，就是<strong>在读取同一个表的数据时，可能会发生前后不一致的情况。</strong>这被称为<strong>不可重复读现象 ( READ COMMITTED )</strong> 。</p><h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><p>将隔离级别设置为 <strong>REPEATABLE READ ( 可被重复读取 )</strong> :</p><pre class=" language-mysql"><code class="language-mysql">SET GLOBAL TRANSACTION ISOLATION LEVEL REPEATABLE READ;SELECT @@GLOBAL.TRANSACTION_ISOLATION;+--------------------------------+| @@GLOBAL.TRANSACTION_ISOLATION |+--------------------------------+| REPEATABLE-READ                |+--------------------------------+</code></pre><p>测试 <strong>REPEATABLE READ</strong> ，假设在两个不同的连接上分别执行 <code>START TRANSACTION</code> :</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 小张 - 成都</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 小王 - 北京</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 小张 - 成都</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span></code></pre><p>当前事务开启后，没提交之前，查询不到，提交后可以被查询到。但是，在提交之前其他事务被开启了，那么在这条事务线上，就不会查询到当前有操作事务的连接。相当于开辟出一条单独的线程。</p><p>无论小张是否执行过 <code>COMMIT</code> ，在小王这边，都不会查询到小张的事务记录，而是只会查询到自己所处事务的记录：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name      <span class="token operator">|</span> money <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">a</span>         <span class="token operator">|</span>   <span class="token number">900</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">b</span>         <span class="token operator">|</span>  <span class="token number">1100</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 小明      <span class="token operator">|</span>  <span class="token number">1000</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 淘宝店    <span class="token operator">|</span>  <span class="token number">1000</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> <span class="token number">c</span>         <span class="token operator">|</span>   <span class="token number">100</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+-------+</span></code></pre><p>这是<strong>因为小王在此之前开启了一个新的事务 ( <code>START TRANSACTION</code> ) **，那么</strong>在他的这条新事务的线上，跟其他事务是没有联系的**，也就是说，此时如果其他事务正在操作数据，它是不知道的。</p><p>然而事实是，在真实的数据表中，小张已经插入了一条数据。但是小王此时并不知道，也插入了同一条数据，会发生什么呢？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ERROR 1062 (23000): Duplicate entry '6' for key 'PRIMARY'</span></code></pre><p>报错了，操作被告知已存在主键为 <code>6</code> 的字段。这种现象也被称为<strong>幻读，一个事务提交的数据，不能被其他事务读取到</strong>。</p><h4 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h4><p>顾名思义，就是所有事务的<strong>写入操作</strong>全都是串行化的。什么意思？把隔离级别修改成 <strong>SERIALIZABLE</strong> :</p><pre class=" language-mysql"><code class="language-mysql">SET GLOBAL TRANSACTION ISOLATION LEVEL SERIALIZABLE;SELECT @@GLOBAL.TRANSACTION_ISOLATION;+--------------------------------+| @@GLOBAL.TRANSACTION_ISOLATION |+--------------------------------+| SERIALIZABLE                   |+--------------------------------+</code></pre><p>还是拿小张和小王来举例：</p><pre class=" language-mysql"><code class="language-mysql">-- 小张 - 成都START TRANSACTION;-- 小王 - 北京START TRANSACTION;-- 开启事务之前先查询表，准备操作数据。SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |  1000 ||  4 | 淘宝店    |  1000 ||  5 | c         |   100 ||  6 | d         |  1000 |+----+-----------+-------+-- 发现没有 7 号王小花，于是插入一条数据：INSERT INTO user VALUES (7, '王小花', 1000);</code></pre><p>此时会发生什么呢？由于现在的隔离级别是 <strong>SERIALIZABLE ( 串行化 )</strong> ，串行化的意思就是：假设把所有的事务都放在一个串行的队列中，那么所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong> ( <strong>这意味着队列中同时只能执行一个事务的写入操作</strong> ) 。</p><p>根据这个解释，小王在插入数据时，会出现等待状态，直到小张执行 <code>COMMIT</code> 结束它所处的事务，或者出现等待超时。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题64.求1+2+…+n</title>
      <link href="/2020/06/02/mian-shi-ti-64-qiu-1-2-n/"/>
      <url>/2020/06/02/mian-shi-ti-64-qiu-1-2-n/</url>
      
        <content type="html"><![CDATA[<h4 id="面试题64-求1-2-…-n"><a href="#面试题64-求1-2-…-n" class="headerlink" title="面试题64. 求1+2+…+n"></a><a href="https://leetcode-cn.com/problems/qiu-12n-lcof/" target="_blank" rel="noopener">面试题64. 求1+2+…+n</a></h4><pre class=" language-bash"><code class="language-bash">求 1+2+<span class="token punctuation">..</span>.+n ，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。示例 1：输入: n <span class="token operator">=</span> 3输出: 6示例 2：输入: n <span class="token operator">=</span> 9输出: 45限制： 1 <span class="token operator">&lt;=</span> n <span class="token operator">&lt;=</span> 10000</code></pre><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">quick_c</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span>  b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span>  ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans<span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">quick_c</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c">解题思路：本题在简单问题上做了许多限制，需要使用排除法一步步导向答案。<span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span>n1<span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token punctuation">(</span>n−<span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>n 的计算方法主要有三种：平均计算、迭代、递归。方法一： 平均计算问题： 此计算必须使用 乘除法 ，因此本方法不可取，直接排除。javapythonpublic <span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span>方法二： 迭代问题： 循环必须使用 whilewhile 或 forfor ，因此本方法不可取，直接排除。javapythonpublic <span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        res <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span>方法三： 递归问题： 终止条件需要使用 ifif ，因此本方法不可取。思考： 除了 ifif 和 switchswitch 等判断语句外，是否有其他方法可用来终止递归？javapythonpublic <span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    n <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">sumNums</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span>逻辑运算符的短路效应：常见的逻辑运算符有三种，即 “与 \<span class="token operator">&amp;</span>\<span class="token operator">&amp;&amp;</span><span class="token operator">&amp;</span> ”，“或 <span class="token operator">||</span>∣∣ ”，“非 <span class="token operator">!</span><span class="token operator">!</span> ” ；而其有重要的短路效应，如下所示：<span class="token keyword">if</span><span class="token punctuation">(</span>A <span class="token operator">&amp;&amp;</span> B<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 若 A 为 false ，则 B 的判断不会执行（即短路），直接判定 A &amp;&amp; B 为 false</span><span class="token keyword">if</span><span class="token punctuation">(</span>A <span class="token operator">||</span> B<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 若 A 为 true ，则 B 的判断不会执行（即短路），直接判定 A || B 为 true</span>本题需要实现 “当 n <span class="token operator">=</span> 1n<span class="token operator">=</span><span class="token number">1</span> 时终止递归” 的需求，可通过短路效应实现。n <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sumNums</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当 n = 1 时 n > 1 不成立 ，此时 “短路” ，终止后续递归</span>复杂度分析：时间复杂度 <span class="token function">O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token function">O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> ： 计算 n <span class="token operator">+</span> <span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> 1n<span class="token operator">+</span><span class="token punctuation">(</span>n−<span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span> 需要开启 nn 个递归函数。空间复杂度 <span class="token function">O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token function">O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> ： 递归深度达到 nn ，系统使用 <span class="token function">O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token function">O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> 大小的额外空间。代码：Java 中，为构成语句，需加一个辅助布尔量 xx ，否则会报错；Java 中，开启递归函数需改写为 <span class="token function">sumNums</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> ，此整体作为一个布尔量输出，否则会报错；初始化变量 resres 记录结果。（ Java 可使用第二栏的简洁写法，不用借助变量 resres ）。javajavapythonclass Solution <span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    public <span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        boolean x <span class="token operator">=</span> n <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sumNums</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>        res <span class="token operator">+</span><span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c">方法二：快速乘思路和算法考虑 A 和 B 两数相乘的时候我们如何利用加法和位运算来模拟，其实就是将 B 二进制展开，如果 B 的二进制表示下第 ii 位为 <span class="token number">1</span>，那么这一位对最后结果的贡献就是 A<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span>A∗<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span> ，即 A<span class="token operator">&lt;&lt;</span>iA<span class="token operator">&lt;&lt;</span>i。我们遍历 B 二进制展开下的每一位，将所有贡献累加起来就是最后的答案，这个方法也被称作「俄罗斯农民乘法」，感兴趣的读者可以自行网上搜索相关资料。这个方法经常被用于两数相乘取模的场景，如果两数相乘已经超过数据范围，但取模后不会超过，我们就可以利用这个方法来拆位取模计算贡献，保证每次运算都在数据范围内。下面给出这个算法的 C<span class="token operator">++</span> 实现：<span class="token keyword">int</span> <span class="token function">quickMulti</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> B<span class="token punctuation">;</span> B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span>回到本题，由等差数列求和公式我们可以知道 <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> \cdots <span class="token operator">+</span> n1<span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span>⋯<span class="token operator">+</span>n 等价于 \frac<span class="token punctuation">{</span><span class="token function">n</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span> <span class="token number">2</span><span class="token function">n</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>​     ，对于除以 <span class="token number">22</span> 我们可以用右移操作符来模拟，那么等式变成了 <span class="token function">n</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token function">1n</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span>，剩下不符合题目要求的部分即为 <span class="token function">n</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">n</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>，根据上文提及的快速乘，我们可以将两个数相乘用加法和位运算来模拟，但是可以看到上面的 C<span class="token operator">++</span> 实现里我们还是需要循环语句，有没有办法去掉这个循环语句呢？答案是有的，那就是自己手动展开，因为题目数据范围 nn 为 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">]</span>，所以 nn 二进制展开最多不会超过 <span class="token number">1414</span> 位，我们手动展开 <span class="token number">1414</span> 层代替循环即可，至此满足了题目的要求，具体实现可以参考下面给出的代码。C<span class="token operator">++</span>JavaTypeScriptGolangclass Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> A <span class="token operator">=</span> n<span class="token punctuation">,</span> B <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>B <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        A <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        B <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>复杂度分析时间复杂度：<span class="token function">O</span><span class="token punctuation">(</span>\log n<span class="token punctuation">)</span><span class="token function">O</span><span class="token punctuation">(</span>logn<span class="token punctuation">)</span>。快速乘需要的时间复杂度为 <span class="token function">O</span><span class="token punctuation">(</span>\log n<span class="token punctuation">)</span><span class="token function">O</span><span class="token punctuation">(</span>logn<span class="token punctuation">)</span>。空间复杂度：<span class="token function">O</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">O</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>。只需要常数空间存放若干变量</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>974.和可被整除的子数组</title>
      <link href="/2020/05/27/974.he-ke-bei-k-zheng-chu-de-zi-shu-zu/"/>
      <url>/2020/05/27/974.he-ke-bei-k-zheng-chu-de-zi-shu-zu/</url>
      
        <content type="html"><![CDATA[<h4 id="974-和可被-K-整除的子数组"><a href="#974-和可被-K-整除的子数组" class="headerlink" title="974. 和可被 K 整除的子数组"></a><a href="https://leetcode-cn.com/problems/subarray-sums-divisible-by-k/" target="_blank" rel="noopener">974. 和可被 K 整除的子数组</a></h4><p>难度中等80</p><p>给定一个整数数组 <code>A</code>，返回其中元素之和可被 <code>K</code> 整除的（连续、非空）子数组的数目。</p><p><strong>示例：</strong></p><pre><code>输入：A = [4,5,0,-2,-3,1], K = 5输出：7解释：有 7 个子数组满足其元素之和可被 K = 5 整除：[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]</code></pre><p><strong>提示：</strong></p><ol><li><code>1 &lt;= A.length &lt;= 30000</code></li><li><code>-10000 &lt;= A[i] &lt;= 10000</code></li><li><code>2 &lt;= K &lt;= 10000</code></li></ol><p><img src="https://i.imgur.com/9ohUg6u.png" alt="Imgur"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">subarraysDivByK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> K<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> modulus <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">%</span> K <span class="token operator">+</span> K<span class="token punctuation">)</span> <span class="token operator">%</span> K<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>modulus<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>modulus<span class="token punctuation">)</span><span class="token punctuation">;</span>                ret<span class="token operator">+=</span>temp<span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>modulus<span class="token punctuation">,</span> temp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>modulus<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>287.寻找重复数</title>
      <link href="/2020/05/26/287-xun-zhao-chong-fu-shu/"/>
      <url>/2020/05/26/287-xun-zhao-chong-fu-shu/</url>
      
        <content type="html"><![CDATA[<h4 id="287-寻找重复数"><a href="#287-寻找重复数" class="headerlink" title="287. 寻找重复数"></a><a href="https://leetcode-cn.com/problems/find-the-duplicate-number/" target="_blank" rel="noopener">287. 寻找重复数</a></h4><p>难度中等597</p><p>给定一个包含 <em>n</em> + 1 个整数的数组 <em>nums*，其数字都在 1 到 *n</em> 之间（包括 1 和 <em>n</em>），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。</p><p><strong>示例 1:</strong></p><pre><code>输入: [1,3,4,2,2]输出: 2</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: [3,1,3,4,2]输出: 3</code></pre><p><strong>说明：</strong></p><ol><li><p><strong>不能</strong>更改原数组（假设数组是只读的）。</p></li><li><p>只能使用额外的 <em>O</em>(1) 的空间。</p></li><li><p>时间复杂度小于 <em>O</em>(<em>n</em>2) 。</p></li><li><p>数组中只有一个重复的数字，但它可能不止重复出现一次。</p><p><img src="https://i.imgur.com/qN1YXyt.gif" alt></p><p><img src="https://i.imgur.com/1fhtLG9.png" alt="Imgur"></p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>            ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token punctuation">{</span>                    ans<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">></span>mid<span class="token punctuation">)</span><span class="token punctuation">{</span>                r <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                l <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python里调用js代码</title>
      <link href="/2020/05/23/python-li-diao-yong-js-dai-ma/"/>
      <url>/2020/05/23/python-li-diao-yong-js-dai-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h1><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> execjs</code></pre><h2 id="直接调用"><a href="#直接调用" class="headerlink" title="直接调用"></a>直接调用</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> execjsjs <span class="token operator">=</span> <span class="token triple-quoted-string string">"""add = function(a,b){    return a+b;}"""</span>ctx <span class="token operator">=</span> execjs<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  第一个参数为js代码里面的函数名字<span class="token punctuation">,</span>后面的参数是函数参数</code></pre><h2 id="调用js文件"><a href="#调用js文件" class="headerlink" title="调用js文件"></a>调用js文件</h2><pre class=" language-python"><code class="language-python">js<span class="token punctuation">:</span><span class="token triple-quoted-string string">"""add = function(a,b){    return a+b;}"""</span><span class="token keyword">import</span> execjsjs_str <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"add.js"</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>    js_str <span class="token operator">+=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>js_str<span class="token punctuation">)</span>a <span class="token operator">=</span> execjs<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>js_str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token number">545</span><span class="token punctuation">,</span> <span class="token number">4545</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm连接到远程服务器</title>
      <link href="/2020/05/22/pycharm-lian-jie-dao-yuan-cheng-fu-wu-qi/"/>
      <url>/2020/05/22/pycharm-lian-jie-dao-yuan-cheng-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="连接到SSH"><a href="#连接到SSH" class="headerlink" title="连接到SSH"></a>连接到SSH</h1><p><img src="https://i.imgur.com/krG8K0e.png" alt="Imgur"></p><p><img src="https://i.imgur.com/1YVJFlH.png" alt="Imgur"></p><p>输入对的Ip端口,账号密码就可以连接了,</p><p>需要改一下ssh中文,编码</p><p><img src="https://i.imgur.com/FlJK6Nm.png" alt="Imgur"></p><p>这样就可以正常显示中文了</p><h1 id="远程连接文件夹项目"><a href="#远程连接文件夹项目" class="headerlink" title="远程连接文件夹项目"></a>远程连接文件夹项目</h1><p>在本地我新建了一个名字叫做linux的文件夹,来储存服务器上的</p><p>然后点击如图所示</p><p><img src="https://i.imgur.com/W596AfF.png" alt></p><p>这里选择SFTP</p><p>这里的Root path 是你确定服务器上哪个文件夹当作根目录来使用(当时用/root),</p><p><img src="https://i.imgur.com/Cot9znr.png" alt="Imgur"></p><p>选择保存到的本地地址,和服务器上的哪个文件夹</p><p><img src="https://i.imgur.com/wVDCmKT.png" alt="Imgur"></p><p>下载上传就不用说了,勾选自动上传</p><p><img src="https://i.imgur.com/Buxq2Wh.png" alt="Imgur"></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> python </tag>
            
            <tag> 学习小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在python里调用c语言代码</title>
      <link href="/2020/05/21/zai-python-li-diao-yong-c-yu-yan-dai-ma/"/>
      <url>/2020/05/21/zai-python-li-diao-yong-c-yu-yan-dai-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p>c语言代码</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    sum<span class="token operator">+</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>需要用gcc 编译</p><p>此c语言的文件名为cName</p><p>编程成的so文件的名字为xName</p><pre class=" language-bash"><code class="language-bash">gcc -shared -Wl,-soname,xName -o Xname.so -fPIC cName</code></pre><p>编译命令我写了个python脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osfile_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"输入你要转换的c语言的文件名:"</span><span class="token punctuation">)</span>file_name2 <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"编译成的so文件的名字:"</span><span class="token punctuation">)</span>shell <span class="token operator">=</span> f<span class="token string">"gcc -shared -Wl,-soname,{file_name2} -o {file_name2}.dll -fPIC {file_name}"</span><span class="token keyword">print</span><span class="token punctuation">(</span>shell<span class="token punctuation">)</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>shell<span class="token punctuation">)</span></code></pre><p>编译成.so文件后</p><p>写python代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> ctypesresult <span class="token operator">=</span> ctypes<span class="token punctuation">.</span>cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'./add.so'</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">*</span><span class="token number">705082704</span><span class="token number">705082704</span><span class="token operator">*</span><span class="token operator">/</span></code></pre><h1 id="Win"><a href="#Win" class="headerlink" title="Win"></a>Win</h1><p>编译命令的.so改为.dll</p><pre class=" language-bash"><code class="language-bash">gcc -shared -Wl,-soname,xName -o Xname.dll -fPIC cName</code></pre><p>会报错</p><p>原因: 此.dll文件也需要.dll依赖,,所以</p><p>Win 安装cygwin ,这是一个软件,</p><p>输入命令查看差哪些依赖</p><pre class=" language-c"><code class="language-c">ldd add<span class="token punctuation">.</span>dll<span class="token comment" spellcheck="true">/*ldd add.dll        ntdll.dll => /cygdrive/c/Windows/SYSTEM32/ntdll.dll (0x7ffe68360000)        KERNEL32.DLL => /cygdrive/c/Windows/System32/KERNEL32.DLL (0x7ffe66d20000)        KERNELBASE.dll => /cygdrive/c/Windows/System32/KERNELBASE.dll (0x7ffe652f0000)        apphelp.dll => /cygdrive/c/Windows/SYSTEM32/apphelp.dll (0x7ffe62fe0000)        add.dll => /cygdrive/e/python/cTopython/add.dll (0x71140000)*/</span></code></pre><p>PS: 我现在没成功</p><h1 id="放大招Cython"><a href="#放大招Cython" class="headerlink" title="放大招Cython"></a>放大招Cython</h1><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> Cpython  //Anaconda自带</code></pre><p>首先Win要安装vs2019,安装下面两个</p><p><img src="https://i.imgur.com/nYDQHnu.png" alt="Imgur"></p><p>准备工作就完成了</p><p>首先新建一个fib.pyx文件,这个格式是c语言和python公共的格式</p><p>cpdef c和python公用函数</p><p>cdef c语言用函数</p><p>def python语言函数</p><pre class=" language-c"><code class="language-c">cpdef <span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span></code></pre><p>新建setup.py文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> distutils<span class="token punctuation">.</span>core <span class="token keyword">import</span> setup<span class="token keyword">from</span> distutils<span class="token punctuation">.</span>extension <span class="token keyword">import</span> Extension<span class="token keyword">from</span> Cython<span class="token punctuation">.</span>Distutils <span class="token keyword">import</span> build_extfilename <span class="token operator">=</span> <span class="token string">'fib'</span>  <span class="token comment" spellcheck="true"># 源文件名 编译后的名字</span>full_filename <span class="token operator">=</span> <span class="token string">'fib.pyx'</span>  <span class="token comment" spellcheck="true"># 包含后缀的源文件名   编译前名字</span>setup<span class="token punctuation">(</span>    cmdclass<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'build_ext'</span><span class="token punctuation">:</span> build_ext<span class="token punctuation">}</span><span class="token punctuation">,</span>    ext_modules<span class="token operator">=</span><span class="token punctuation">[</span>Extension<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token punctuation">[</span>full_filename<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 配置需要cython编译的源文件</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#  python setup.py build_ext --inplace</span></code></pre><hr><p>分割线</p><p>还可以用第二种方法,推荐第二种</p><p>直接纯用c语言写代码</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>保存为<span class="token punctuation">.</span>h文件</code></pre><p>再写一个.pyx文件</p><pre class=" language-python"><code class="language-python">cdef extern <span class="token keyword">from</span> <span class="token string">"fib.h"</span><span class="token punctuation">:</span>    cdef int fib<span class="token punctuation">(</span>int n<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fib_py</span><span class="token punctuation">(</span>int n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> fib<span class="token punctuation">(</span>n<span class="token punctuation">)</span></code></pre><p>分割线结束</p><hr><p>然后在命令行里面</p><pre class=" language-bash"><code class="language-bash"> python setup.py build_ext --inplace</code></pre><p>会生成build文件夹和fib.cp37-win_amd64.pyd文件,</p><p><img src="https://i.imgur.com/D7z8CRB.png" alt="Imgur"></p><p>我们只需要导入fib包就可以使用了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> fib<span class="token keyword">import</span> timet1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>fib<span class="token punctuation">.</span>fib<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t2<span class="token operator">-</span>t1<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">return</span> fib<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span>fib<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span>t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>fib<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t2<span class="token operator">-</span>t1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">*</span><span class="token number">0.726057767868042</span><span class="token number">51.39848494529724</span><span class="token operator">*</span><span class="token operator">/</span><span class="token comment" spellcheck="true"># 你可以看看差距有点大,太大了</span></code></pre><p>至此,,骚操作都完成了</p><p>PS : linux下用这个一定要装python-dev和gcc,当然python必须的</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Centos</span>yum <span class="token function">install</span> python3-devel<span class="token comment" spellcheck="true"># Ubuntu</span><span class="token function">apt-get</span> <span class="token function">install</span> python3-dev</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> python </tag>
            
            <tag> 学习小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1371.每个元音包含偶数次的最长子字符串</title>
      <link href="/2020/05/20/1371-mei-ge-yuan-yin-bao-han-ou-shu-ci-de-zui-chang-zi-zi-fu-chuan/"/>
      <url>/2020/05/20/1371-mei-ge-yuan-yin-bao-han-ou-shu-ci-de-zui-chang-zi-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h4 id="1371-每个元音包含偶数次的最长子字符串"><a href="#1371-每个元音包含偶数次的最长子字符串" class="headerlink" title="1371. 每个元音包含偶数次的最长子字符串"></a><a href="https://leetcode-cn.com/problems/find-the-longest-substring-containing-vowels-in-even-counts/" target="_blank" rel="noopener">1371. 每个元音包含偶数次的最长子字符串</a></h4><pre class=" language-bash"><code class="language-bash">给你一个字符串 s ，请你返回满足以下条件的最长子字符串的长度：每个元音字母，即 <span class="token string">'a'</span>，<span class="token string">'e'</span>，<span class="token string">'i'</span>，<span class="token string">'o'</span>，<span class="token string">'u'</span> ，在子字符串中都恰好出现了偶数次。示例 1：输入：s <span class="token operator">=</span> <span class="token string">"eleetminicoworoep"</span>输出：13解释：最长子字符串是 <span class="token string">"leetminicowor"</span> ，它包含 e，i，o 各 2 个，以及 0 个 a，u 。示例 2：输入：s <span class="token operator">=</span> <span class="token string">"leetcodeisgreat"</span>输出：5解释：最长子字符串是 <span class="token string">"leetc"</span> ，其中包含 2 个 e 。示例 3：输入：s <span class="token operator">=</span> <span class="token string">"bcbcbc"</span>输出：6解释：这个示例中，字符串 <span class="token string">"bcbcbc"</span> 本身就是最长的，因为所有的元音 a，e，i，o，u 都出现了 0 次。来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/find-the-longest-substring-containing-vowels-in-even-counts著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><p><img src="https://i.imgur.com/mIWool9.png" alt></p><p><img src="https://i.imgur.com/D8TXcM8.png" alt></p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">findTheLongestSubstring</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vis</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'u'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">==</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">{</span>                vis<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span>i<span class="token operator">-</span>vis<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
            <tag> hard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 学习</title>
      <link href="/2020/05/20/docker-xue-xi/"/>
      <url>/2020/05/20/docker-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-学习"><a href="#Docker-学习" class="headerlink" title="Docker 学习"></a>Docker 学习</h1><h2 id="开启Docker服务"><a href="#开启Docker服务" class="headerlink" title="开启Docker服务"></a>开启Docker服务</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> docker startsystemctl daemon-reloadsystemctl restart docker.service</code></pre><h2 id="镜像开始运行"><a href="#镜像开始运行" class="headerlink" title="镜像开始运行"></a>镜像开始运行</h2><pre class=" language-bash"><code class="language-bash">docker start <span class="token function">id</span></code></pre><h2 id="进入镜像"><a href="#进入镜像" class="headerlink" title="进入镜像"></a>进入镜像</h2><pre class=" language-bash"><code class="language-bash">docker attach <span class="token function">id</span></code></pre><h2 id="重启镜像"><a href="#重启镜像" class="headerlink" title="重启镜像"></a>重启镜像</h2><pre class=" language-bash"><code class="language-bash">docker restart <span class="token function">id</span></code></pre><h2 id="停止镜像"><a href="#停止镜像" class="headerlink" title="停止镜像"></a>停止镜像</h2><pre class=" language-bash"><code class="language-bash">docker stop <span class="token function">id</span></code></pre><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><pre class=" language-bash"><code class="language-bash">docker rmi <span class="token function">id</span>可能要先删除容器docker <span class="token function">rm</span> <span class="token function">id</span>不能删除的话就强制删除docker rmi -f <span class="token function">id</span></code></pre><h2 id="最常用的镜像"><a href="#最常用的镜像" class="headerlink" title="最常用的镜像"></a>最常用的镜像</h2><pre class=" language-bash"><code class="language-bash">docker pull ubuntudocker run -it -v ~/docker-ubuntu:/root/docker-ubuntu --name ubuntu ubuntudocker run -it -v  本机目录挂载   到   docker目录       --name 新的命名 打开的镜像名字-p 8080:8888  把主机上的8080端口,转发到docker上的8888端口-d 后台运行</code></pre><h2 id="保存镜像文件"><a href="#保存镜像文件" class="headerlink" title="保存镜像文件"></a>保存镜像文件</h2><pre class=" language-bash"><code class="language-bash">由于容器内的修改不会自动保存，所以需要对容器进行一个保存。使用docker <span class="token function">ps</span> -a 查看容器id并使用docker commit 保存镜像docker commit <span class="token function">id</span> name</code></pre><h1 id="查看当前的镜像"><a href="#查看当前的镜像" class="headerlink" title="查看当前的镜像"></a>查看当前的镜像</h1><pre class=" language-bash"><code class="language-bash">docker images</code></pre><h2 id="查看当前的运行的容器"><a href="#查看当前的运行的容器" class="headerlink" title="查看当前的运行的容器"></a>查看当前的运行的容器</h2><pre class=" language-bash"><code class="language-bash">docker <span class="token function">ps</span>查看所以容器docker <span class="token function">ps</span> -a</code></pre><h2 id="开机自启docker服务"><a href="#开机自启docker服务" class="headerlink" title="开机自启docker服务"></a>开机自启docker服务</h2><pre class=" language-bash"><code class="language-bash">systemctl <span class="token function">enable</span> docker</code></pre><h2 id="docker-启动时-总是自启动容器"><a href="#docker-启动时-总是自启动容器" class="headerlink" title="docker 启动时,总是自启动容器"></a>docker 启动时,总是自启动容器</h2><pre class=" language-bash"><code class="language-bash">--restart<span class="token operator">=</span>always</code></pre><p>解决ubuntu中文问题</p><p><a href="https://blog.csdn.net/yiwanxingchena/article/details/83900284" target="_blank" rel="noopener">https://blog.csdn.net/yiwanxingchena/article/details/83900284</a></p><pre class=" language-bash"><code class="language-bash">方法一：     <span class="token punctuation">(</span>0<span class="token punctuation">)</span>.查看容器语言环境         $ locale         LANG<span class="token operator">=</span>         LANGUAGE<span class="token operator">=</span>         LC_CTYPE<span class="token operator">=</span><span class="token string">"POSIX"</span>         <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>     <span class="token punctuation">(</span>1<span class="token punctuation">)</span>.查看容器支持的语言         $ locale -a          C          C.UTF-8          POSIX     <span class="token punctuation">(</span>2<span class="token punctuation">)</span>.修改 /etc/profile         $ <span class="token function">vi</span> /etc/profile            在最后添加 <span class="token function">export</span>  LANG<span class="token operator">=</span>C.UTF-8     <span class="token punctuation">(</span>3<span class="token punctuation">)</span>.重新加载环境变量         $ <span class="token function">source</span> /etc/profile     <span class="token punctuation">(</span>4<span class="token punctuation">)</span>.再次查看         $ locale         LANG<span class="token operator">=</span>C.UTF-8         LANGUAGE<span class="token operator">=</span>         LC_CTYPE<span class="token operator">=</span><span class="token string">"C.UTF-8"</span>         <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> 方法二：      在Dockerfile中添加 ENV LANG C.UTF-8 重新制作镜像————————————————版权声明：本文为CSDN博主「GO小胖」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/yiwanxingchena/java/article/details/83900284</code></pre><h1 id="安装可视化界面的docker管理"><a href="#安装可视化界面的docker管理" class="headerlink" title="安装可视化界面的docker管理"></a>安装可视化界面的docker管理</h1><p>为了更好的观察Docker运行状态，我们采用Portainer工具进行可视化，下面是部署过程总结：</p><p>环境：</p><p>Liunx:CentOS Linux release 7.6.1810 (Core)</p><p>Docker:19.03.5（备注：默认版本存在问题，升级可参考<a href="https://www.cnblogs.com/Bug-Hunter/p/12022491.html" target="_blank" rel="noopener">docker升级步骤及注意事项</a>）</p><p>部署步骤：</p><p>1、查询当前Portainer镜像，选择start值比较高的</p><p>命令：</p><p>docker search portainer</p><p>2、下载指定portainer镜像</p><p>命令：</p><p>docker pull portainer/portainer</p><p>3、本次只部署单机版，命令如下</p><p>docker run -d -p 9000:9000 –restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data –name prtainer-test portainer/portainer</p><p>如下图：</p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211153203115-79465651.png" alt="img"></p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211152823762-1999879810.png" alt="img"></p><p>参数说明：<br>-d：容器在后台运行；<br>-p 9000:9000 ：宿主机9000端口映射容器中的9000端口<br>–restart 标志会检查容器的退出代码，并据此来决定是否要重启容器，默认是不会重启。</p><p>–restart=always：自动重启该容器<br>-v /var/run/docker.sock:/var/run/docker.sock ：把宿主机的Docker守护进程(Docker daemon)默认监听的Unix域套接字挂载到容器中<br>-v portainer_data:/data ：把宿主机portainer_data数据卷挂载到容器/data目录<br>–name prtainer-test ： 给容器起名为portainer-test</p><p>4、使用docker ps查看进程，如下所示：</p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211153234806-1638544994.png" alt="img"></p><p> 如果需要汉化，可以下载<a href="https://pan.baidu.com/s/1BLXMSmJFcgESeNMhQL26Mg&shfl=sharepset" target="_blank" rel="noopener">汉化包</a>（提取码：6vjr）<a href="https://liuhuaqiang.lanzous.com/icu3qwd，之后解压，并将解压后的public文件夹上传到centos系统的根目录下，如下图所示：" target="_blank" rel="noopener">https://liuhuaqiang.lanzous.com/icu3qwd，之后解压，并将解压后的public文件夹上传到centos系统的根目录下，如下图所示：</a></p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211154002659-629104571.png" alt="img"></p><p>然后执行以下命令：</p><p>docker run -d -p 9000:9000 –restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data -v /public:/public –name prtainer-test portainer/portainer（如果已部署，需要将之前的容器删除）</p><p>5、Portainer的web页面登录</p><p>在浏览器输入部署服务器的IP:9000，回车，显示如下界面：</p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211154735320-1919071871.png" alt="img"></p><p> 由于是本地docker，所有选择local</p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211155241808-1937877821.png" alt="img"></p><p> 之后点击“Connect”，成功后跳转到主页界面（汉化后），如下图：</p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211154943016-14709007.png" alt="img"></p><p> 点击“local”，进入该docker内，展示相关容器、堆栈、镜像等信息，如下图所示：</p><p><img src="https://img2018.cnblogs.com/blog/954348/201912/954348-20191211155743452-2143259224.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>152.乘积最大子数组</title>
      <link href="/2020/05/18/152-cheng-ji-zui-da-zi-shu-zu/"/>
      <url>/2020/05/18/152-cheng-ji-zui-da-zi-shu-zu/</url>
      
        <content type="html"><![CDATA[<h4 id="152-乘积最大子数组"><a href="#152-乘积最大子数组" class="headerlink" title="152. 乘积最大子数组"></a><a href="https://leetcode-cn.com/problems/maximum-product-subarray/" target="_blank" rel="noopener">152. 乘积最大子数组</a></h4><p>难度中等505</p><p>给你一个整数数组 <code>nums</code> ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p><p><strong>示例 1:</strong></p><pre class=" language-bash"><code class="language-bash">输入: <span class="token punctuation">[</span>2,3,-2,4<span class="token punctuation">]</span>输出: 6解释: 子数组 <span class="token punctuation">[</span>2,3<span class="token punctuation">]</span> 有最大乘积 6。</code></pre><p><strong>示例 2:</strong></p><pre class=" language-bash"><code class="language-bash">输入: <span class="token punctuation">[</span>-2,0,-1<span class="token punctuation">]</span>输出: 0解释: 结果不能为 2, 因为 <span class="token punctuation">[</span>-2,-1<span class="token punctuation">]</span> 不是子数组。</code></pre><p><img src="https://i.imgur.com/j53CzRh.png" alt></p><pre class=" language-c"><code class="language-c">我们可以根据正负性进行分类讨论。考虑当前位置如果是一个负数的话， 那么我们希望以它前一个位置结尾的某个段的积也是个负数，这样就可以负负得正，組我们希望这个积尽可能<span class="token punctuation">[</span> 负得更多，即尽可能小。如果当前位置是一个正数的话<span class="token punctuation">,</span>我们更希望以它前一个位置结尾的某个段的积也是个正数<span class="token punctuation">,</span>粗希望它尽可能地大。于是这里我们可以再维护<span class="token operator">-</span>一个<span class="token function">fmin</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> 它表示以第i个元素结尾的乘积最小子数组的乘积，那么我们可以得到这样的动态规划转移方程<span class="token punctuation">:</span>它代表第i个元素结尾的乘积最大子数组的乘积<span class="token function">fmax</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>可以考虑把a<span class="token punctuation">;</span>加入第i <span class="token operator">-</span> <span class="token number">1</span>个元素结尾的乘积最大或最小的子数组的乘积中，二者加上a<span class="token punctuation">;</span><span class="token punctuation">,</span>三者取大<span class="token punctuation">,</span>就是第i个元素结尾的乘积最大子数组的乘积。第i个元素结尾的乘积最小子数组的乘积<span class="token function">fmin</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>同理。不难给出这样的实现<span class="token punctuation">:</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n  <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minn <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>maxx <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> ma <span class="token operator">=</span> maxx<span class="token punctuation">;</span>            <span class="token keyword">int</span> mm <span class="token operator">=</span> minn<span class="token punctuation">;</span>            maxx <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxx<span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>mm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            minn <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>minn<span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>ma<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span>maxx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>课程表</title>
      <link href="/2020/05/17/ke-cheng-biao/"/>
      <url>/2020/05/17/ke-cheng-biao/</url>
      
        <content type="html"><![CDATA[<h4 id="207-课程表"><a href="#207-课程表" class="headerlink" title="207. 课程表"></a><a href="https://leetcode-cn.com/problems/course-schedule/" target="_blank" rel="noopener">207. 课程表</a></h4><p>难度中等328</p><p>你这个学期必须选修 <code>numCourse</code> 门课程，记为 <code>0</code> 到 <code>numCourse-1</code> 。</p><p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们：<code>[0,1]</code></p><p>给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？</p><p><strong>示例 1:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 2, <span class="token punctuation">[</span><span class="token punctuation">[</span>1,0<span class="token punctuation">]</span><span class="token punctuation">]</span> 输出: <span class="token boolean">true</span>解释: 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。</code></pre><p><strong>示例 2:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 2, <span class="token punctuation">[</span><span class="token punctuation">[</span>1,0<span class="token punctuation">]</span>,<span class="token punctuation">[</span>0,1<span class="token punctuation">]</span><span class="token punctuation">]</span>输出: <span class="token boolean">false</span>解释: 总共有 2 门课程。学习课程 1 之前，你需要先完成课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。</code></pre><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> viss<span class="token punctuation">[</span><span class="token number">100050</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> edge<span class="token punctuation">[</span><span class="token number">100050</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    bool <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        viss<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        bool ret <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token punctuation">:</span>edge<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>viss<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>viss<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token operator">==</span>true <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ret <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                ret <span class="token operator">=</span> false<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        viss<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    bool <span class="token function">canFinish</span><span class="token punctuation">(</span><span class="token keyword">int</span> numCourses<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numCourses<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            viss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token punctuation">:</span>prerequisites<span class="token punctuation">)</span><span class="token punctuation">{</span>            edge<span class="token punctuation">[</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        bool ret <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numCourses<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>viss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> ret <span class="token operator">=</span> ret <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="210-课程表-II"><a href="#210-课程表-II" class="headerlink" title="210. 课程表 II"></a><a href="https://leetcode-cn.com/problems/course-schedule-ii/" target="_blank" rel="noopener">210. 课程表 II</a></h4><p>难度中等141</p><p>现在你总共有 <em>n</em> 门课需要选，记为 <code>0</code> 到 <code>n-1</code>。</p><p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: <code>[0,1]</code></p><p>给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。</p><p>可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。</p><p><strong>示例 1:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 2, <span class="token punctuation">[</span><span class="token punctuation">[</span>1,0<span class="token punctuation">]</span><span class="token punctuation">]</span> 输出: <span class="token punctuation">[</span>0,1<span class="token punctuation">]</span>解释: 总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 <span class="token punctuation">[</span>0,1<span class="token punctuation">]</span> 。</code></pre><p><strong>示例 2:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 4, <span class="token punctuation">[</span><span class="token punctuation">[</span>1,0<span class="token punctuation">]</span>,<span class="token punctuation">[</span>2,0<span class="token punctuation">]</span>,<span class="token punctuation">[</span>3,1<span class="token punctuation">]</span>,<span class="token punctuation">[</span>3,2<span class="token punctuation">]</span><span class="token punctuation">]</span>输出: <span class="token punctuation">[</span>0,1,2,3<span class="token punctuation">]</span> or <span class="token punctuation">[</span>0,2,1,3<span class="token punctuation">]</span>解释: 总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。     因此，一个正确的课程顺序是 <span class="token punctuation">[</span>0,1,2,3<span class="token punctuation">]</span> 。另一个正确的排序是 <span class="token punctuation">[</span>0,2,1,3<span class="token punctuation">]</span> 。</code></pre><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>private<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// 存储有向图</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> edges<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 标记每个节点的状态：0=未搜索，1=搜索中，2=已完成</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> visited<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用数组来模拟栈，下标 0 为栈底，n-1 为栈顶</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> result<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断有向图中是否有环</span>    bool invalid<span class="token punctuation">;</span>public<span class="token punctuation">:</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将节点标记为「搜索中」</span>        visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 搜索其相邻节点</span>        <span class="token comment" spellcheck="true">// 只要发现有环，立刻停止搜索</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">:</span> edges<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果「未搜索」那么搜索相邻节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>invalid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果「搜索中」说明找到了环</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                invalid <span class="token operator">=</span> true<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将节点标记为「已完成」</span>        visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将节点入栈</span>        result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>u<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">findOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span> numCourses<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">{</span>        edges<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>numCourses<span class="token punctuation">)</span><span class="token punctuation">;</span>        visited<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>numCourses<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> info<span class="token punctuation">:</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">{</span>            edges<span class="token punctuation">[</span>info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 每次挑选一个「未搜索」的节点，开始进行深度优先搜索</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numCourses <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>invalid<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>invalid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果没有环，那么就有拓扑排序</span>        <span class="token comment" spellcheck="true">// 注意下标 0 为栈底，因此需要将数组反序输出</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反转链表</title>
      <link href="/2020/05/16/fan-zhuan-lian-biao/"/>
      <url>/2020/05/16/fan-zhuan-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><p>●定义两个指针: pre和cur ; pre在前cur在后。<br>●每次让pre的next指向cur，实现-次局部反转<br>●局部反转完成之后，pre和cur同时往后移动-一个位置<br>●循环上述过程，直至pre到达链表尾部</p><p><img src="https://i.imgur.com/dYHzv5N.gif" alt></p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>pre <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pre <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListNode<span class="token operator">*</span> t <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span>            pre<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>简洁的递归<br>●使用递归函数,一直递归到链表的最后-个结点,该结点就是反转后的头结点，记作ret .<br>●此后，每次函数在返回的过程中，让当前结点的下一个结点的next指针指向当前节点。<br>●同时让当前结点的next指针指向NULL，从而实现从链表尾部开始的局部反转<br>●当递归函数全部出栈后，链表反转完成。</p><p><img src="https://i.imgur.com/e9cyL2J.gif" alt></p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> head<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ListNode<span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>560.和为K的子数组</title>
      <link href="/2020/05/15/560-he-wei-k-de-zi-shu-zu/"/>
      <url>/2020/05/15/560-he-wei-k-de-zi-shu-zu/</url>
      
        <content type="html"><![CDATA[<h4 id="560-和为K的子数组"><a href="#560-和为K的子数组" class="headerlink" title="560. 和为K的子数组"></a><a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/" target="_blank" rel="noopener">560. 和为K的子数组</a></h4><p>给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。</p><p>示例 1 :</p><p>输入:nums = [1,1,1], k = 2<br>输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。<br>说明 :</p><p>数组的长度为 [1, 20,000]。<br>数组中元素的范围是 [-1000, 1000] ，且整数 k 的范围是 [-1e7, 1e7]</p><p><img src="https://i.imgur.com/NXZJujY.png" alt></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*我们可以基于方法一利用数据结构进行进一步的优化，我们知道方法一的瓶颈在于对每个 ii，我们需要枚举所有的 jj 来判断是否符合条件，这一步是否可以优化呢？答案是可以的。我们定义preli为0..2]里所有数的和，则prei可以由preli- 1] 递推而来，即:pre[i]= pre[i- 1] + nums[i]那么[j..i] 这个子数组和为k」这个条件我们可以转化为pre[i]- pre[j- 1]==k简单移项可得符合条件的下标j需要满足pre[j- 1]== pre[i] - k:所以我们考虑以i结尾的和为ke的连续子数组个数时只要统计有多少个前缀和为pre[i]- k的pre[j]即可。我们建立哈希表mp,以和为键,出现次数为对应的值,记录pre[i]出现的次数,从左往右边更新mp边计算答案,那么以i结尾的答案mp[pre[]一k]即可在0(1)时间内得到。后的答案即为所有下标结尾的和为k的子数组个数之和。需要注意的是，从左往右边更新边计算的时候已经保证了mp[pre[i] - k] 里记录的pre[j] 的下标范围是0≤j≤i.同时，由于pre[i] 的计算只与前一项的答案有关,因此我们可以不用建立pre数组，直接用pre量来记录pre[i - 1] 的答案即可。*/</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">subarraySum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        mp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token operator">+</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>ans<span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token operator">!=</span>mp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ret<span class="token operator">+</span><span class="token operator">=</span>mp<span class="token punctuation">[</span>ans<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mp<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>50.pow(x,n)</title>
      <link href="/2020/05/11/50-pow-x-n/"/>
      <url>/2020/05/11/50-pow-x-n/</url>
      
        <content type="html"><![CDATA[<h4 id="50-Pow-x-n"><a href="#50-Pow-x-n" class="headerlink" title="50. Pow(x, n)"></a><a href="https://leetcode-cn.com/problems/powx-n/" target="_blank" rel="noopener">50. Pow(x, n)</a></h4><p>难度中等333</p><p>实现 <a href="https://www.cplusplus.com/reference/valarray/pow/" target="_blank" rel="noopener">pow(<em>x</em>, <em>n</em>)</a> ，即计算 x 的 n 次幂函数。</p><p><strong>示例 1:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 2.00000, 10输出: 1024.00000</code></pre><p><strong>示例 2:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 2.10000, 3输出: 9.26100</code></pre><p><strong>示例 3:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 2.00000, -2输出: 0.25000解释: 2-2 <span class="token operator">=</span> 1/22 <span class="token operator">=</span> 1/4 <span class="token operator">=</span> 0.25</code></pre><p>思路描述：因为不用考虑大数问题，所以只需要循环地去计算就可以了，但是单纯的循环去算，比如：</p><p>for(int i = 1; i &lt; n; i ++)<br>    x *= x;<br>是会超时的。</p><p>所以我们可以考虑比如我们计算 x^8，就是 x^2 * x^2 * x^2 * x^2，当我们计算出来 x^2 之后就可以只进行三次乘法就可以了，相对于之前的 7 次乘法，时间大大减少了。</p><p>也就是 x^n 可以分解成若干个 x^i 的乘积</p><p>我们这里使用快速幂进行求解。我们看一下 n 的二进制形式一定是若干个 1 和 0 构成</p><p>所以我们可以看出来，每次乘的值都是前一个值的2倍，当 n 对应位为0时跳过</p><p>负数幂和正数幂相同，因为除以一个数就相当于乘这个数的倒数。</p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> x<span class="token operator">==</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> num <span class="token operator">=</span>n<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            num<span class="token operator">=</span><span class="token operator">-</span>num<span class="token punctuation">;</span>            x<span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">double</span> ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> ret<span class="token operator">*</span><span class="token operator">=</span>x<span class="token punctuation">;</span>            x<span class="token operator">*</span><span class="token operator">=</span>x<span class="token punctuation">;</span>            num<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c">ll <span class="token function">quick_pow</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ll ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans<span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span>b是可以为<span class="token keyword">double</span>的<span class="token punctuation">,</span></code></pre><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">double</span>  <span class="token function">quick_pow</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span>  b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans<span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token punctuation">;</span>            b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> x<span class="token operator">==</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> num <span class="token operator">=</span>n<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            num<span class="token operator">=</span><span class="token operator">-</span>num<span class="token punctuation">;</span>            x<span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">quick_pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>236. 二叉树的最近公共祖先</title>
      <link href="/2020/05/10/236.er-cha-shu-de-zui-jin-gong-gong-zu-xian/"/>
      <url>/2020/05/10/236.er-cha-shu-de-zui-jin-gong-gong-zu-xian/</url>
      
        <content type="html"><![CDATA[<h4 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236. 二叉树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="noopener">236. 二叉树的最近公共祖先</a></h4><p>难度中等504</p><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p><a href="https://baike.baidu.com/item/最近公共祖先/8918834?fr=aladdin" target="_blank" rel="noopener">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p><p>例如，给定如下二叉树: root = [3,5,1,6,2,0,8,null,null,7,4]</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/binarytree.png" alt="img"></p><p><strong>示例 1:</strong></p><pre><code>输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1输出: 3解释: 节点 5 和节点 1 的最近公共祖先是节点 3。</code></pre><p><strong>示例 2:</strong></p><pre class=" language-bash"><code class="language-bash">输入: root <span class="token operator">=</span> <span class="token punctuation">[</span>3,5,1,6,2,0,8,null,null,7,4<span class="token punctuation">]</span>, p <span class="token operator">=</span> 5, q <span class="token operator">=</span> 4输出: 5解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。</code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*方法二：存储父节点思路我们可以用哈希表存储所有节点的父节点，然后我们就可以利用节点的父节点信息从 p 结点开始不断往上跳，并记录已经访问过的节点，再从 q 节点开始不断往上跳，如果碰到已经访问过的节点，那么这个节点就是我们要找的最近公共祖先。算法从根节点开始遍历整棵二叉树，用哈希表记录每个节点的父节点指针。从 p 节点开始不断往它的祖先移动，并用数据结构记录已经访问过的祖先节点。同样，我们再从 q 节点开始不断往它的祖先移动，如果有祖先已经被访问过，即意味着这是 p 和 q 的深度最深的公共祖先，即 LCA 节点。作者：LeetCode-Solution链接：https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/er-cha-shu-de-zui-jin-gong-gong-zu-xian-by-leetc-2/来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。*/</span><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>TreeNode<span class="token operator">*</span> <span class="token operator">></span> fa<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>bool<span class="token operator">></span> vis<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fa<span class="token punctuation">[</span>root<span class="token operator">-></span>left<span class="token operator">-></span>val<span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fa<span class="token punctuation">[</span>root<span class="token operator">-></span>right<span class="token operator">-></span>val<span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fa<span class="token punctuation">[</span>root<span class="token operator">-></span>val<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            vis<span class="token punctuation">[</span>p<span class="token operator">-></span>val<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>            p <span class="token operator">=</span> fa<span class="token punctuation">[</span>p<span class="token operator">-></span>val<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>q<span class="token operator">-></span>val<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> q<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            q <span class="token operator">=</span> fa<span class="token punctuation">[</span>q<span class="token operator">-></span>val<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>221.最大正方形</title>
      <link href="/2020/05/08/221-zui-da-zheng-fang-xing/"/>
      <url>/2020/05/08/221-zui-da-zheng-fang-xing/</url>
      
        <content type="html"><![CDATA[<h4 id="221-最大正方形"><a href="#221-最大正方形" class="headerlink" title="221. 最大正方形"></a><a href="https://leetcode-cn.com/problems/maximal-square/" target="_blank" rel="noopener">221. 最大正方形</a></h4><p>难度中等332</p><p>在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。</p><p><strong>示例:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 1 0 1 0 01 0 1 1 11 1 1 1 11 0 0 1 0输出: 4</code></pre><p><img src="https://assets.leetcode-cn.com/solution-static/221/221_fig1.png" alt></p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">maximalSquare</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token operator">*</span>ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1361.验证二叉树</title>
      <link href="/2020/05/07/1361-yan-zheng-er-cha-shu/"/>
      <url>/2020/05/07/1361-yan-zheng-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="1361-验证二叉树"><a href="#1361-验证二叉树" class="headerlink" title="1361.验证二叉树"></a>1361.验证二叉树</h1><p>二叉树上有 n 个节点，按从 0 到 n - 1 编号，其中节点 i 的两个子节点分别是 leftChild[i] 和 rightChild[i]。</p><p>只有 所有 节点能够形成且 只 形成 一颗 有效的二叉树时，返回 true；否则返回 false。</p><p>如果节点 i 没有左子节点，那么 leftChild[i] 就等于 -1。右子节点也符合该规则。</p><p>注意：节点没有值，本问题中仅仅使用节点编号。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/validate-binary-tree-nodes" target="_blank" rel="noopener">https://leetcode-cn.com/problems/validate-binary-tree-nodes</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/23/1503_ex1.png" alt></p><pre class=" language-c"><code class="language-c">输入：n <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> leftChild <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rightChild <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>输出：true</code></pre><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/23/1503_ex2.png" alt></p><pre class=" language-c++"><code class="language-c++">输入：n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]输出：false</code></pre><p>以满二叉树为例，我们知道一个深度为 n<em>n</em> 的二叉树有如下特点：</p><ol><li><p>一共有2^n-1个节点</p></li><li><p>深度为n的叶子节点为2^(n-1)个节点</p></li><li><p>叶子节点下面的节点为题目中的-1的节点，深度为n+1，个数为2^(n+1-1)=2^n个节点</p></li><li><p>所以-1 的节点个数比总结点个数多1</p></li></ol><p><img src="https://pic.leetcode-cn.com/4529e5d73ac73f1b2043f0955f6d69c850bb57ced6d0b33f49b136c27d74bd39-5170.jpg" alt></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">validateBinaryTreeNodes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">,</span> leftChild<span class="token punctuation">,</span> rightChild<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span>leftChild <span class="token operator">+</span> rightChild<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> n <span class="token operator">+</span> <span class="token number">1</span></code></pre><h4 id="方法一：连通性判定"><a href="#方法一：连通性判定" class="headerlink" title="方法一：连通性判定"></a>方法一：连通性判定</h4><p>官方题解:</p><p>我们将验证二叉树的过程分为两步：第一步找到二叉树的根节点，第二步从根节点开始对二叉树进行遍历，判断其是否为一颗有效的二叉树。</p><p>在第一步中，为了找到根节点，我们需要用数组 indeg 存放所有节点的入度，这是因为只有入度为 0 的点才能是根节点。我们遍历数组 leftChild 和 rightChild，如果数组中的某个元素 x 不为 -1，那么就表示有一条边指向节点 x，节点 x 的入度 indeg[x] 增加 1。在遍历完数组 leftChild 和 rightChild 后，我们在数组 indeg 中找到一个满足 index[root] == 0 的节点 root，即为二叉树的根节点。</p><p>如果有多个满足 index[root] == 0 的节点呢？在这种情况下，这 n 个节点一定不是一颗有效的二叉树。我们把这个问题放在第二步来考虑，而在第一步中，我们先不处理这个问题。</p><p>在第二步中，我们从根节点开始进行深度优先搜索或广度优先搜索，判定这 n 个节点的连通性，这是因为当这个 n 个节点是一颗有效的二叉树时，所有的节点会恰好被遍历一次。如果某一个节点被遍历了超过一次（有不止一个父节点）或零次（不连通），那么这 n 个节点都不是一颗有效的二叉树。我们可以使用哈希集合（HashSet）seen 来存放所有被遍历过的节点，如果在搜索时遍历到了 seen 中出现的节点，那么说明该节点被遍历了超过一次。如果在搜索完成后，seen 中的节点个数少于 n，那么说明有些节点没有被遍历过。</p><p>回到第一步中遗留的那个问题，如果有多个满足 index[root] == 0 的节点 r1, r2, …，那么我们可以任意选择一个节点，例如 r1，作为根节点。在搜索时，由于节点 r2, … 的入度为 0，因此不可能被遍历到。这样在搜索结束后，seen 中的节点个数一定少于 n。</p><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/validate-binary-tree-nodes/solution/yan-zheng-er-cha-shu-by-leetcode-solution/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/validate-binary-tree-nodes/solution/yan-zheng-er-cha-shu-by-leetcode-solution/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>   bool <span class="token function">validateBinaryTreeNodes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> leftChild<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> rightChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>       vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">indeg</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>leftChild<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token operator">++</span>indeg<span class="token punctuation">[</span>leftChild<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>rightChild<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token operator">++</span>indeg<span class="token punctuation">[</span>rightChild<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">int</span> root <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>indeg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               root <span class="token operator">=</span> i<span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> false<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> seen<span class="token punctuation">;</span>       queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>       seen<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>       q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">int</span> u <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>leftChild<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>seen<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>leftChild<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">return</span> false<span class="token punctuation">;</span>               <span class="token punctuation">}</span>               seen<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>leftChild<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leftChild<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>rightChild<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>seen<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>rightChild<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">return</span> false<span class="token punctuation">;</span>               <span class="token punctuation">}</span>               seen<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>rightChild<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rightChild<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> seen<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字典树</title>
      <link href="/2020/05/07/zi-dian-shu/"/>
      <url>/2020/05/07/zi-dian-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>tree<span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">buildtree</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>            tree<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">quest</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    tree<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        string ss<span class="token punctuation">;</span>        cin<span class="token operator">>></span>ss<span class="token punctuation">;</span>        <span class="token function">buildtree</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        string ss<span class="token punctuation">;</span>        cin<span class="token operator">>></span>ss<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">quest</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1071. 字符串的最大公因子</title>
      <link href="/2020/05/07/1071.zi-fu-chuan-de-zui-da-gong-yin-zi/"/>
      <url>/2020/05/07/1071.zi-fu-chuan-de-zui-da-gong-yin-zi/</url>
      
        <content type="html"><![CDATA[<h4 id="1071-字符串的最大公因子"><a href="#1071-字符串的最大公因子" class="headerlink" title="1071. 字符串的最大公因子"></a><a href="https://leetcode-cn.com/problems/greatest-common-divisor-of-strings/" target="_blank" rel="noopener">1071. 字符串的最大公因子</a></h4><hr><p>对于字符串 S 和 T，只有在 S = T + … + T（T 与自身连接 1 次或多次）时，我们才认定 “T 能除尽 S”。</p><p>返回最长字符串 X，要求满足 X 能除尽 str1 且 X 能除尽 str2。</p><p>示例 1：</p><p>输入：str1 = “ABCABC”, str2 = “ABC”<br>输出：”ABC”<br>示例 2：</p><p>输入：str1 = “ABABAB”, str2 = “ABAB”<br>输出：”AB”<br>示例 3：</p><p>输入：str1 = “LEET”, str2 = “CODE”<br>输出：””</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/greatest-common-divisor-of-strings" target="_blank" rel="noopener">https://leetcode-cn.com/problems/greatest-common-divisor-of-strings</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><hr><pre class=" language-c++"><code class="language-c++">/*总有一种好像顺手就能用上的感觉呢。其实看起来两个字符串之间能有这种神奇的关系是挺不容易的，我们希望能够找到一个简单的办法识别是否有解。如果它们有公因子 abc，那么 str1 就是 mm 个 abc 的重复，str2 是 nn 个 abc 的重复，连起来就是 m+nm+n 个 abc，好像 m+nm+n 个 abc 跟 n+mn+m 个 abc 是一样的。所以如果 str1 + str2 === str2 + str1 就意味着有解。我们也很容易想到 str1 + str2 !== str2 + str1 也是无解的充要条件。当确定有解的情况下，最优解是长度为 gcd(str1.length, str2.length) 的字符串。这个理论最优长度是不是每次都能达到呢？是的。因为如果能循环以它的约数为长度的字符串，自然也能够循环以它为长度的字符串，所以这个理论长度就是我们要找的最优解。把刚刚写的那些拼起来就是解法了。作者：wonderful611链接：https://leetcode-cn.com/problems/greatest-common-divisor-of-strings/solution/1071-zi-fu-chuan-de-zui-da-gong-yin-zi-by-wonderfu/来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。*/class Solution {public:    string gcdOfStrings(string str1, string str2) {        if((str1+ str2) != (str2+str1)){            return "";        }        int n  = __gcd(str1.length(),str2.length());        return str1.substr(0,n);    }};</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1353. 最多可以参加的会议数目</title>
      <link href="/2020/05/07/1353.zui-duo-ke-yi-can-jia-de-hui-yi-shu-mu/"/>
      <url>/2020/05/07/1353.zui-duo-ke-yi-can-jia-de-hui-yi-shu-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="1353-最多可以参加的会议数目"><a href="#1353-最多可以参加的会议数目" class="headerlink" title="1353. 最多可以参加的会议数目"></a><a href="https://leetcode-cn.com/problems/maximum-number-of-events-that-can-be-attended/" target="_blank" rel="noopener">1353. 最多可以参加的会议数目</a></h1><pre class=" language-bash"><code class="language-bash">给你一个数组 events，其中 events<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>startDayi, endDayi<span class="token punctuation">]</span> ，表示会议 i 开始于 startDayi ，结束于 endDayi 。你可以在满足 startDayi <span class="token operator">&lt;=</span> d <span class="token operator">&lt;=</span> endDayi 中的任意一天 d 参加会议 i 。注意，一天只能参加一个会议。请你返回你可以参加的 最大 会议数目。来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/maximum-number-of-events-that-can-be-attended著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/16/e1.png" alt></p><pre><code>输入：events = [[1,2],[2,3],[3,4]]输出：3解释：你可以参加所有的三个会议。安排会议的一种方案如上图。第 1 天参加第一个会议。第 2 天参加第二个会议。第 3 天参加第三个会议。示例 2：输入：events= [[1,2],[2,3],[3,4],[1,2]]输出：4示例 3：输入：events = [[1,4],[4,4],[2,2],[3,4],[1,1]]输出：4示例 4：输入：events = [[1,100000]]输出：1示例 5：输入：events = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]]输出：7提示：1 &lt;= events.length &lt;= 10^5events[i].length == 21 &lt;= events[i][0] &lt;= events[i][1] &lt;= 10^5来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/maximum-number-of-events-that-can-be-attended著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><p>这是一道典型的扫描算法题。由于每个时间点最多参加一个会议，我们可以从1开始遍历所有时间。</p><p>对于每一个时间点，所有在当前时间及之前时间开始，并且在当前时间还未结束的会议都是可参加的。显然，在所有可参加的会议中，选择结束时间最早的会议是最优的，因为其他会议还有更多的机会可以去参加。</p><p>怎样动态获得当前结束时间最早的会议呢？我们可以使用一个小根堆记录所有当前可参加会议的结束时间。在每一个时间点，我们首先将当前时间点开始的会议加入小根堆，再把当前已经结束的会议移除出小根堆（因为已经无法参加了），然后从剩下的会议中选择一个结束时间最早的去参加。</p><p>为了快速获得当前时间点开始的会议，我们以O(N)O(N)时间预处理得到每个时间点开始的会议的序号。</p><p>算法总的时间复杂度为O(T\log N)O(TlogN)（这里的TT为时间范围）。</p><p>作者：lucifer1004<br>链接：<a href="https://leetcode-cn.com/problems/maximum-number-of-events-that-can-be-attended/solution/sao-miao-suan-fa-tan-xin-by-lucifer1004/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-number-of-events-that-can-be-attended/solution/sao-miao-suan-fa-tan-xin-by-lucifer1004/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">maxEvents</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">ans</span><span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// for (auto v:events){</span>        <span class="token comment" spellcheck="true">//     ans[v[0]].push_back(v[1]);</span>        <span class="token comment" spellcheck="true">// }</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> events<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token punctuation">[</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> pq<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>MAX<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span>  j<span class="token punctuation">:</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ret<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1366. 通过投票对团队排名</title>
      <link href="/2020/05/07/1366.tong-guo-tou-piao-dui-tuan-dui-pai-ming/"/>
      <url>/2020/05/07/1366.tong-guo-tou-piao-dui-tuan-dui-pai-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="1366-通过投票对团队排名"><a href="#1366-通过投票对团队排名" class="headerlink" title="1366. 通过投票对团队排名"></a><a href="https://leetcode-cn.com/problems/rank-teams-by-votes/" target="_blank" rel="noopener">1366. 通过投票对团队排名</a></h1><p>现在有一个特殊的排名系统，依据参赛团队在投票人心中的次序进行排名，每个投票者都需要按从高到低的顺序对参与排名的所有团队进行排位。</p><p>排名规则如下：</p><p>参赛团队的排名次序依照其所获「排位第一」的票的多少决定。如果存在多个团队并列的情况，将继续考虑其「排位第二」的票的数量。以此类推，直到不再存在并列的情况。<br>如果在考虑完所有投票情况后仍然出现并列现象，则根据团队字母的字母顺序进行排名。<br>给你一个字符串数组 votes 代表全体投票者给出的排位情况，请你根据上述排名规则对所有参赛团队进行排名。</p><p>请你返回能表示按排名系统 排序后 的所有团队排名的字符串。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/rank-teams-by-votes" target="_blank" rel="noopener">https://leetcode-cn.com/problems/rank-teams-by-votes</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><pre class=" language-python"><code class="language-python">int cnt<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool cmp<span class="token punctuation">(</span>char a<span class="token punctuation">,</span>char b<span class="token punctuation">)</span><span class="token punctuation">{</span>    a<span class="token operator">-=</span><span class="token string">'A'</span><span class="token punctuation">;</span>    b<span class="token operator">-=</span><span class="token string">'A'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>cnt<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>cnt<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token operator">&lt;</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    string rankTeams<span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> votes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        int n <span class="token operator">=</span> votes<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        memset<span class="token punctuation">(</span>cnt<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>sizeof cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>        int len <span class="token operator">=</span> votes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cnt<span class="token punctuation">[</span>votes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        string s<span class="token operator">=</span>votes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        sort<span class="token punctuation">(</span>s<span class="token punctuation">.</span>begin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1383. 最大的团队表现值</title>
      <link href="/2020/05/07/1383.zui-da-de-tuan-dui-biao-xian-zhi/"/>
      <url>/2020/05/07/1383.zui-da-de-tuan-dui-biao-xian-zhi/</url>
      
        <content type="html"><![CDATA[<h4 id="1383-最大的团队表现值"><a href="#1383-最大的团队表现值" class="headerlink" title="1383. 最大的团队表现值"></a><a href="https://leetcode-cn.com/problems/maximum-performance-of-a-team/" target="_blank" rel="noopener">1383. 最大的团队表现值</a></h4><pre class=" language-md"><code class="language-md">示例 1：输入：n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2输出：60解释：我们选择工程师 2（speed=10 且 efficiency=4）和工程师 5（speed=5 且 efficiency=7）。他们的团队表现值为 performance = (10 + 5) * min(4, 7) = 60 。示例 2：输入：n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3输出：68解释：此示例与第一个示例相同，除了 k = 3 。我们可以选择工程师 1 ，工程师 2 和工程师 5 得到最大的团队表现值。表现值为 performance = (2 + 10 + 5) * min(5, 4, 7) = 68 。示例 3：输入：n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4输出：72提示：1 <= n <= 10^5speed.length == nefficiency.length == n1 <= speed[i] <= 10^51 <= efficiency[i] <= 10^81 <= k <= n来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/maximum-performance-of-a-team著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><pre class=" language-bash"><code class="language-bash">思路对 speed 和 efficiency 同步排序，按照效率降序遍历，对每一项数据1. 累加和 <span class="token function">sum</span> ，当超过 k 个的数据时，选最小的将其排除2. 使用优先队列来找到 k 个中最小的数据3. 效率的最低值就是当前项的效率4. 计算结果，注意这里不能取余返回最终结果时取余作者：ikaruga链接：https://leetcode-cn.com/problems/maximum-performance-of-a-team/solution/5359-by-ikaruga/来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> s<span class="token punctuation">,</span>e<span class="token punctuation">;</span><span class="token punctuation">}</span> en<span class="token punctuation">[</span><span class="token number">100000000</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD <span class="token operator">=</span> <span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">maxPerformance</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> speed<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> efficiency<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            en<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s <span class="token operator">=</span> speed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            en<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e <span class="token operator">=</span> efficiency<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>en<span class="token punctuation">,</span>en<span class="token operator">+</span>n<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>node a<span class="token punctuation">,</span>node b<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> a<span class="token punctuation">.</span>e<span class="token operator">></span>b<span class="token punctuation">.</span>e<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>en<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>en<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        priority_queue<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">></span> <span class="token operator">></span> q<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从小到大的优先队列 </span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span>  ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sum<span class="token operator">+</span><span class="token operator">=</span>en<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>en<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>                sum<span class="token operator">-</span><span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span>sum<span class="token operator">*</span>en<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token operator">%</span>MOD <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1376. 通知所有员工所需的时间</title>
      <link href="/2020/05/07/1376.tong-zhi-suo-you-yuan-gong-suo-xu-de-shi-jian/"/>
      <url>/2020/05/07/1376.tong-zhi-suo-you-yuan-gong-suo-xu-de-shi-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="1376-通知所有员工所需的时间"><a href="#1376-通知所有员工所需的时间" class="headerlink" title="1376. 通知所有员工所需的时间"></a><a href="https://leetcode-cn.com/problems/time-needed-to-inform-all-employees/" target="_blank" rel="noopener">1376. 通知所有员工所需的时间</a></h1><p>公司里有 <code>n</code> 名员工，每个员工的 ID 都是独一无二的，编号从 <code>0</code> 到 <code>n - 1</code>。公司的总负责人通过 <code>headID</code> 进行标识。</p><p>在 <code>manager</code> 数组中，每个员工都有一个直属负责人，其中 <code>manager[i]</code> 是第 <code>i</code> 名员工的直属负责人。对于总负责人，<code>manager[headID] = -1</code>。题目保证从属关系可以用树结构显示。</p><p>公司总负责人想要向公司所有员工通告一条紧急消息。他将会首先通知他的直属下属们，然后由这些下属通知他们的下属，直到所有的员工都得知这条紧急消息。</p><p>第 <code>i</code> 名员工需要 <code>informTime[i]</code> 分钟来通知它的所有直属下属（也就是说在 <code>informTime[i]</code> 分钟后，他的所有直属下属都可以开始传播这一消息）。</p><p>返回通知所有员工这一紧急消息所需要的 <strong>分钟数</strong> 。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> dict<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> edge<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">numOfMinutes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> headID<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> manager<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> informTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>manager<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                edge<span class="token punctuation">[</span>manager<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>headID<span class="token punctuation">)</span><span class="token punctuation">;</span>        dict<span class="token punctuation">[</span>headID<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dict<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token punctuation">:</span>edge<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                dict<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dict<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>informTime<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21. 合并两个有序链表</title>
      <link href="/2020/05/07/21.he-bing-liang-ge-you-xu-lian-biao/"/>
      <url>/2020/05/07/21.he-bing-liang-ge-you-xu-lian-biao/</url>
      
        <content type="html"><![CDATA[<h4 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21. 合并两个有序链表"></a><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">21. 合并两个有序链表</a></h4><p>将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p>示例：</p><p>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-two-sorted-lists</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//普通写法</span><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode ret<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode head<span class="token operator">=</span>ret<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span>l2<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token operator">></span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                head<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>                l2<span class="token operator">=</span>l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                head<span class="token punctuation">.</span>next<span class="token operator">=</span>l1<span class="token punctuation">;</span>                l1<span class="token operator">=</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//递归写法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            l1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            l2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>作者：LeetCode链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>merge<span class="token operator">-</span>two<span class="token operator">-</span>sorted<span class="token operator">-</span>lists<span class="token operator">/</span>solution<span class="token operator">/</span>he<span class="token operator">-</span>bing<span class="token operator">-</span>liang<span class="token operator">-</span>ge<span class="token operator">-</span>you<span class="token operator">-</span>xu<span class="token operator">-</span>lian<span class="token operator">-</span>biao<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">/</span>来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23. 合并K个排序链表</title>
      <link href="/2020/05/07/23.he-bing-k-ge-pai-xu-lian-biao/"/>
      <url>/2020/05/07/23.he-bing-k-ge-pai-xu-lian-biao/</url>
      
        <content type="html"><![CDATA[<h4 id="23-合并K个排序链表"><a href="#23-合并K个排序链表" class="headerlink" title="23. 合并K个排序链表"></a><a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/" target="_blank" rel="noopener">23. 合并K个排序链表</a></h4><p>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p><p>示例:</p><p>输入:<br>[<br>  1-&gt;4-&gt;5,<br>  1-&gt;3-&gt;4,<br>  2-&gt;6<br>]<br>输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/merge-k-sorted-lists" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-k-sorted-lists</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">mergeKLists</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">[</span><span class="token punctuation">]</span> lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode ret<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">99999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode head<span class="token operator">=</span>ret<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>lists<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                head <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode ret<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode head<span class="token operator">=</span>ret<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span>l2<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token operator">></span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                head<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>                l2<span class="token operator">=</span>l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                head<span class="token punctuation">.</span>next<span class="token operator">=</span>l1<span class="token punctuation">;</span>                l1<span class="token operator">=</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>22. 括号生成</title>
      <link href="/2020/05/07/22.gua-hao-sheng-cheng/"/>
      <url>/2020/05/07/22.gua-hao-sheng-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="22-括号生成"><a href="#22-括号生成" class="headerlink" title="22. 括号生成"></a><a href="https://leetcode-cn.com/problems/generate-parentheses/" target="_blank" rel="noopener">22. 括号生成</a></h1><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。</p><p>示例：</p><p>输入：n = 3<br>输出：[<br>       “((()))”,<br>       “(()())”,<br>       “(())()”,<br>       “()(())”,<br>       “()()()”<br>     ]</p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ret<span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>public<span class="token punctuation">:</span>    bool <span class="token function">panduan</span><span class="token punctuation">(</span>string ss<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> booll <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                booll<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                booll<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>booll<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> false<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>booll<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>string tem<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tem<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">panduan</span><span class="token punctuation">(</span>tem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tem<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>tem<span class="token operator">+</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>tem<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token function">func</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>res<span class="token punctuation">,</span> string str<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">func</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> str <span class="token operator">+</span> <span class="token string">'('</span><span class="token punctuation">,</span> l<span class="token number">-1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">></span> l<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">func</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> str <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>作者：chengm15链接：https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>generate<span class="token operator">-</span>parentheses<span class="token operator">/</span>solution<span class="token operator">/</span>zui<span class="token operator">-</span>ji<span class="token operator">-</span>ben<span class="token operator">-</span>de<span class="token operator">-</span>dfs<span class="token operator">-</span>by<span class="token operator">-</span>chengm15<span class="token operator">/</span>来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1155. 掷骰子的N种方法</title>
      <link href="/2020/05/07/1155.zhi-tou-zi-de-n-chong-fang-fa/"/>
      <url>/2020/05/07/1155.zhi-tou-zi-de-n-chong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="1155-掷骰子的N种方法"><a href="#1155-掷骰子的N种方法" class="headerlink" title="1155. 掷骰子的N种方法"></a><a href="https://leetcode-cn.com/problems/number-of-dice-rolls-with-target-sum/" target="_blank" rel="noopener">1155. 掷骰子的N种方法</a></h1><p>这里有 d 个一样的骰子，每个骰子上都有 f 个面，分别标号为 1, 2, …, f。</p><p>我们约定：掷骰子的得到总点数为各骰子面朝上的数字的总和。</p><p>如果需要掷出的总点数为 target，请你计算出有多少种不同的组合情况（所有的组合情况总共有 f^d 种），模 10^9 + 7 后返回。</p><pre class=" language-c"><code class="language-c">示例 <span class="token number">1</span>：输入：d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">3</span>输出：<span class="token number">1</span>示例 <span class="token number">2</span>：输入：d <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">7</span>输出：<span class="token number">6</span>示例 <span class="token number">3</span>：输入：d <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">10</span>输出：<span class="token number">1</span>示例 <span class="token number">4</span>：输入：d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">3</span>输出：<span class="token number">0</span>示例 <span class="token number">5</span>：输入：d <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">500</span>输出：<span class="token number">222616187</span>来源：力扣（LeetCode）链接：https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>number<span class="token operator">-</span>of<span class="token operator">-</span>dice<span class="token operator">-</span>rolls<span class="token operator">-</span>with<span class="token operator">-</span>target<span class="token operator">-</span>sum著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">numRollsToTarget</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">,</span> <span class="token keyword">int</span> f<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">&lt;</span>d <span class="token operator">||</span> target<span class="token operator">></span>d<span class="token operator">*</span>f<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> f<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> d<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> f<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> f<span class="token operator">*</span>d<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>k<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算结果</span>    <span class="token keyword">int</span> vis<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标记是否已经进行了计算</span>    <span class="token keyword">int</span> F<span class="token punctuation">;</span>    <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">,</span><span class="token keyword">int</span> tar<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//第d次选择，剩余tar</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">></span>tar<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>d <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tar <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>tar<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>tar<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果已经进行了计算，就返回结果</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>F <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;=</span>tar<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token operator">+</span><span class="token operator">=</span><span class="token function">DFS</span><span class="token punctuation">(</span>d<span class="token number">-1</span><span class="token punctuation">,</span>tar<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>            ans<span class="token operator">%</span><span class="token operator">=</span>mod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vis<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>tar<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//已经算出了结果，做一个标记</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>tar<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记忆化</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">numRollsToTarget</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">,</span> <span class="token keyword">int</span> f<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        F <span class="token operator">=</span> f<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">DFS</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>365. 水壶问题</title>
      <link href="/2020/05/07/365.shui-hu-wen-ti/"/>
      <url>/2020/05/07/365.shui-hu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="365-水壶问题"><a href="#365-水壶问题" class="headerlink" title="365. 水壶问题"></a><a href="https://leetcode-cn.com/problems/water-and-jug-problem/" target="_blank" rel="noopener">365. 水壶问题</a></h1><pre class=" language-markdown"><code class="language-markdown">有两个容量分别为 x升 和 y升 的水壶以及无限多的水。请判断能否通过使用这两个水壶，从而可以得到恰好 z升 的水？如果可以，最后请用以上水壶中的一或两个来盛放取得的 z升 水。你允许：装满任意一个水壶清空任意一个水壶从一个水壶向另外一个水壶倒水，直到装满或者倒空示例 1: (From the famous "Die Hard" example)输入: x = 3, y = 5, z = 4输出: True示例 2:输入: x = 2, y = 6, z = 5输出: False来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/water-and-jug-problem著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><p>方法二：数学<br>思路及算法</p><p>预备知识：贝祖定理</p><p>我们认为，每次操作只会让桶里的水总量增加 x，增加 y，减少 x，或者减少 y。</p><p>你可能认为这有问题：如果往一个不满的桶里放水，或者把它排空呢？那变化量不就不是 x 或者 y 了吗？接下来我们来解释这一点：</p><p>首先要清楚，在题目所给的操作下，两个桶不可能同时有水且不满。因为观察所有题目中的操作，操作的结果都至少有一个桶是空的或者满的；</p><p>其次，对一个不满的桶加水是没有意义的。因为如果另一个桶是空的，那么这个操作的结果等价于直接从初始状态给这个桶加满水；而如果另一个桶是满的，那么这个操作的结果等价于从初始状态分别给两个桶加满；</p><p>再次，把一个不满的桶里面的水倒掉是没有意义的。因为如果另一个桶是空的，那么这个操作的结果等价于回到初始状态；而如果另一个桶是满的，那么这个操作的结果等价于从初始状态直接给另一个桶倒满。</p><p>因此，我们可以认为每次操作只会给水的总量带来 x 或者 y 的变化量。因此我们的目标可以改写成：找到一对整数 a, ba,b，使得</p><p>ax+by=z<br>ax+by=z</p><p>而只要满足 z\leq x+yz≤x+y，且这样的 a, ba,b 存在，那么我们的目标就是可以达成的。这是因为：</p><p>若 a\geq 0, b\geq 0a≥0,b≥0，那么显然可以达成目标。</p><p>若 a\lt 0a&lt;0，那么可以进行以下操作：</p><p>往 y 壶倒水；</p><p>把 y 壶的水倒入 x 壶；</p><p>如果 y 壶不为空，那么 x 壶肯定是满的，把 x 壶倒空，然后再把 y 壶的水倒入 x 壶。</p><p>重复以上操作直至某一步时 x 壶进行了 aa 次倒空操作，y 壶进行了 bb 次倒水操作。</p><p>若 b\lt 0b&lt;0，方法同上，x 与 y 互换。</p><p>而贝祖定理告诉我们，ax+by=zax+by=z 有解当且仅当 zz 是 x, yx,y 的最大公约数的倍数。因此我们只需要找到 x, yx,y 的最大公约数并判断 zz 是否是它的倍数即可。</p><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/water-and-jug-problem/solution/shui-hu-wen-ti-by-leetcode-solution/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/water-and-jug-problem/solution/shui-hu-wen-ti-by-leetcode-solution/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    bool <span class="token function">canMeasureWater</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y <span class="token operator">&lt;</span> z<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> z <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">+</span> y <span class="token operator">==</span> z<span class="token punctuation">;</span>        <span class="token keyword">return</span> z <span class="token operator">%</span> <span class="token function">gcd</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>water<span class="token operator">-</span>and<span class="token operator">-</span>jug<span class="token operator">-</span>problem<span class="token operator">/</span>solution<span class="token operator">/</span>shui<span class="token operator">-</span>hu<span class="token operator">-</span>wen<span class="token operator">-</span>ti<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span>来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>445. 两数相加 II</title>
      <link href="/2020/05/07/445.liang-shu-xiang-jia-ii/"/>
      <url>/2020/05/07/445.liang-shu-xiang-jia-ii/</url>
      
        <content type="html"><![CDATA[<h1 id="445-两数相加-II"><a href="#445-两数相加-II" class="headerlink" title="445. 两数相加 II"></a><a href="https://leetcode-cn.com/problems/add-two-numbers-ii/" target="_blank" rel="noopener">445. 两数相加 II</a></h1><p>给你两个 非空 链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。</p><p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p><p>进阶：</p><p>如果输入链表不能修改该如何处理？换句话说，你不能对列表中的节点进行翻转。</p><p>示例：</p><p>输入：(7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 8 -&gt; 0 -&gt; 7</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers-ii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/add-two-numbers-ii</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    ListNode<span class="token operator">*</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            s1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>l1 <span class="token operator">-></span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>            l1 <span class="token operator">=</span> l1 <span class="token operator">-></span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            s2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>l2 <span class="token operator">-></span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l2 <span class="token operator">-></span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ListNode<span class="token operator">*</span> ans <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>        <span class="token keyword">int</span> jin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>s2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> jin<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                a <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                s1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                b <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                s2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> tem <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token operator">+</span>jin<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tem<span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                jin<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                tem <span class="token operator">=</span> tem<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                jin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ListNode <span class="token operator">*</span>temp <span class="token operator">=</span> new <span class="token function">ListNode</span><span class="token punctuation">(</span>tem<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token operator">-></span>next<span class="token operator">=</span> ans<span class="token punctuation">;</span>            ans <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>55. 跳跃游戏</title>
      <link href="/2020/05/07/55.tiao-yue-you-xi/"/>
      <url>/2020/05/07/55.tiao-yue-you-xi/</url>
      
        <content type="html"><![CDATA[<h4 id="55-跳跃游戏"><a href="#55-跳跃游戏" class="headerlink" title="55. 跳跃游戏"></a><a href="https://leetcode-cn.com/problems/jump-game/" target="_blank" rel="noopener">55. 跳跃游戏</a></h4><p>难度中等643</p><p>给定一个非负整数数组，你最初位于数组的第一个位置。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个位置。</p><p><strong>示例 1:</strong></p><pre><code>输入: [2,3,1,1,4]输出: true解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。</code></pre><p><strong>示例 2:</strong></p><pre class=" language-c++"><code class="language-c++">输入: [3,2,1,0,4]输出: false解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。</code></pre><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    bool <span class="token function">canJump</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>                ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">>=</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> true<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">>=</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="45-跳跃游戏-II"><a href="#45-跳跃游戏-II" class="headerlink" title="45. 跳跃游戏 II"></a><a href="https://leetcode-cn.com/problems/jump-game-ii/" target="_blank" rel="noopener">45. 跳跃游戏 II</a></h4><p>难度困难502</p><p>给定一个非负整数数组，你最初位于数组的第一个位置。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p><p><strong>示例:</strong></p><pre><code>输入: [2,3,1,1,4]输出: 2解释: 跳到最后一个位置的最小跳跃数是 2。     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。</code></pre><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">jump</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">999999</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span>i<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>解法一 ：顺藤摸瓜<br>LeetCode 讨论里，大部分都是这个思路，贪婪算法，我们每次在可跳范围内选择可以使得跳的更远的位置。</p><p>如下图，开始的位置是 2，可跳的范围是橙色的。然后因为 3 可以跳的更远，所以跳到 3 的位置。</p><p><img src="https://pic.leetcode-cn.com/c4a606188af249b911d06acb5e51b2f8a4589be68b02b900d32dfdd69a14d368-image.png" alt="image.png"></p><p>如下图，然后现在的位置就是 3 了，能跳的范围是橙色的，然后因为 4 可以跳的更远，所以下次跳到 4 的位置。</p><p><img src="https://pic.leetcode-cn.com/1c13a73f3ddd9c5badd83f818455c1ed16a251956473659ffcee6eb9a65ecdbf-image.png" alt="image.png"></p><p>写代码的话，我们用 end 表示当前能跳的边界，对于上边第一个图的橙色 1，第二个图中就是橙色的 4，遍历数组的时候，到了边界，我们就重新更新新的边界。</p><p>时间复杂度：O(n)O(n)。</p><p>空间复杂度：O(1)O(1)。</p><p>这里要注意一个细节，就是 for 循环中，i &lt; nums.length - 1，少了末尾。因为开始的时候边界是第 00 个位置，steps 已经加 1 了。如下图，如果最后一步刚好跳到了末尾，此时 steps 其实不用加 11 了。如果是 i &lt; nums.length，i 遍历到最后的时候，会进入 if 语句中，steps 会多加 1</p><p><img src="https://pic.leetcode-cn.com/1014c569efdf3cf72955dbe604dce78a5ab8a1988cf6d438eb7dede7ce5cfb17-image.png" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>820. 单词的压缩编码</title>
      <link href="/2020/05/07/820.dan-ci-de-ya-suo-bian-ma/"/>
      <url>/2020/05/07/820.dan-ci-de-ya-suo-bian-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="820-单词的压缩编码"><a href="#820-单词的压缩编码" class="headerlink" title="820. 单词的压缩编码"></a><a href="https://leetcode-cn.com/problems/short-encoding-of-words/" target="_blank" rel="noopener">820. 单词的压缩编码</a></h1><p>给定一个单词列表，我们将这个列表编码成一个索引字符串 S 与一个索引列表 A。</p><p>例如，如果这个列表是 [“time”, “me”, “bell”]，我们就可以将其表示为 S = “time#bell#” 和 indexes = [0, 2, 5]。</p><p>对于每一个索引，我们可以通过从字符串 S 中索引的位置开始读取字符串，直到 “#” 结束，来恢复我们之前的单词列表。</p><p>那么成功对给定单词列表进行编码的最小字符串长度是多少呢？</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/short-encoding-of-words" target="_blank" rel="noopener">https://leetcode-cn.com/problems/short-encoding-of-words</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><pre><code>示例：输入: words = [&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]输出: 10说明: S = &quot;time#bell#&quot; ， indexes = [0, 2, 5] 。提示：1 &lt;= words.length &lt;= 20001 &lt;= words[i].length &lt;= 7每个单词都是小写字母 。来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/short-encoding-of-words著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><h2 id="方法一-暴力破解"><a href="#方法一-暴力破解" class="headerlink" title="方法一:暴力破解"></a>方法一:暴力破解</h2><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">minimumLengthEncoding</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">good</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> words<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token punctuation">:</span>good<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>v<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                string s <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                good<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token punctuation">:</span>good<span class="token punctuation">)</span><span class="token punctuation">{</span>            sum<span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="方法二-字典树"><a href="#方法二-字典树" class="headerlink" title="方法二,字典树"></a>方法二,字典树</h2><pre class=" language-c"><code class="language-c">字典树<span class="token punctuation">,</span>倒序插入<span class="token punctuation">,</span>然后遍历树<span class="token punctuation">,</span>判断最后一个节点的长度<span class="token punctuation">,</span>每个叶子节点长度加一的和为答案<span class="token punctuation">.</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>tree<span class="token punctuation">[</span><span class="token number">140000</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">buildtree</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> p<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>cnt<span class="token punctuation">;</span>            tree<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>bool <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//判断是否是叶子节点</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> ans<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum<span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//dfs遍历</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">minimumLengthEncoding</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token punctuation">:</span>words<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">buildtree</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>572. 另一个树的子树</title>
      <link href="/2020/05/07/572.ling-yi-ge-shu-de-zi-shu/"/>
      <url>/2020/05/07/572.ling-yi-ge-shu-de-zi-shu/</url>
      
        <content type="html"><![CDATA[<h4 id="572-另一个树的子树"><a href="#572-另一个树的子树" class="headerlink" title="572. 另一个树的子树"></a><a href="https://leetcode-cn.com/problems/subtree-of-another-tree/" target="_blank" rel="noopener">572. 另一个树的子树</a></h4><p>给定两个非空二叉树 s 和 t，检验 s 中是否包含和 t 具有相同结构和节点值的子树。s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树。</p><p>示例 1:<br>给定的树 s:</p><pre><code>     3    / \   4   5  / \ 1   2</code></pre><p>给定的树 t：</p><pre><code>   4   / \ 1   2</code></pre><p>返回 true，因为 t 与 s 的一个子树拥有相同的结构和节点值。</p><p>示例 2:<br>给定的树 s：</p><pre><code>     3    / \   4   5  / \ 1   2    /   0</code></pre><p>给定的树 t：</p><pre><code>   4  / \ 1   2</code></pre><p>返回 false。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/subtree-of-another-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/subtree-of-another-tree</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    bool <span class="token function">check</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> a<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> b<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> b<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">||</span>  <span class="token punctuation">(</span>a<span class="token operator">!=</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> b<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>val<span class="token operator">!=</span>b<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>a<span class="token operator">-></span>left<span class="token punctuation">,</span>b<span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>a<span class="token operator">-></span>right<span class="token punctuation">,</span>b<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    bool <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> a<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>a<span class="token operator">-></span>left<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>a<span class="token operator">-></span>right<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    bool <span class="token function">isSubtree</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> s<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法</title>
      <link href="/2020/05/07/kmp-suan-fa/"/>
      <url>/2020/05/07/kmp-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1><h2 id="求Next数组"><a href="#求Next数组" class="headerlink" title="求Next数组"></a>求Next数组</h2><pre class=" language-c"><code class="language-c">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Next<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">GetNext</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Next<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>Next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>Next<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>j <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">~</span>j <span class="token operator">&amp;&amp;</span>  s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j<span class="token operator">=</span> Next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><pre class=" language-c"><code class="language-c">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>  <span class="token function">KMP</span><span class="token punctuation">(</span>string text<span class="token punctuation">,</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>    <span class="token function">GetNext</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> j <span class="token operator">=</span> Next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">++</span>j<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>n<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">-</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>j<span class="token operator">=</span>Next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Next<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">GetNext</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Next<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>Next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>Next<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>j <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">~</span>j <span class="token operator">&amp;&amp;</span>  s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j<span class="token operator">=</span> Next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>  <span class="token function">KMP</span><span class="token punctuation">(</span>string text<span class="token punctuation">,</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>    <span class="token function">GetNext</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> j <span class="token operator">=</span> Next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">++</span>j<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>n<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">-</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>j<span class="token operator">=</span>Next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string text <span class="token operator">=</span> <span class="token string">"bbbacbbbbabbab"</span><span class="token punctuation">;</span>    string s <span class="token operator">=</span> <span class="token string">"bbbbab"</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">KMP</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>83. 删除排序链表中的重复元素</title>
      <link href="/2020/05/07/83.shan-chu-pai-xu-lian-biao-zhong-de-chong-fu-yuan-su/"/>
      <url>/2020/05/07/83.shan-chu-pai-xu-lian-biao-zhong-de-chong-fu-yuan-su/</url>
      
        <content type="html"><![CDATA[<h1 id="83-删除排序链表中的重复元素"><a href="#83-删除排序链表中的重复元素" class="headerlink" title="83. 删除排序链表中的重复元素"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/" target="_blank" rel="noopener">83. 删除排序链表中的重复元素</a></h1><p>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</p><p><strong>示例 1:</strong></p><pre><code>输入: 1-&gt;1-&gt;2输出: 1-&gt;2</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: 1-&gt;1-&gt;2-&gt;3-&gt;3输出: 1-&gt;2-&gt;3</code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    ListNode<span class="token operator">*</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> pp<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pp<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pp<span class="token operator">-></span>val <span class="token operator">==</span> pp<span class="token operator">-></span>next<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                ListNode<span class="token operator">*</span> p <span class="token operator">=</span> pp<span class="token operator">-></span>next<span class="token punctuation">;</span>                pp<span class="token operator">-></span>next <span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>                delete p<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                pp<span class="token operator">=</span>pp<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dp学习</title>
      <link href="/2020/05/07/dp-xue-xi/"/>
      <url>/2020/05/07/dp-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="dp学习"><a href="#dp学习" class="headerlink" title="dp学习"></a>dp学习</h1><h4 id="64-最小路径和"><a href="#64-最小路径和" class="headerlink" title="64. 最小路径和"></a><a href="https://leetcode-cn.com/problems/minimum-path-sum/" target="_blank" rel="noopener">64. 最小路径和</a></h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*求一个N*M 的数组,,从0,0走到最右下角的最短数值是多少*/</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>leecode<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Scanner cin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 功能描述: 记忆化搜索         * @param: [args]         * @return: void         * @author: anlen123         * @date: 2020/4/24 - 15:33         */</span><span class="token comment" spellcheck="true">//        for (int i = 0; i &lt; n; i++) {</span><span class="token comment" spellcheck="true">//            for (int j = 0; j &lt; m; j++) {</span><span class="token comment" spellcheck="true">//                dp[i][j] = -1;</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//        int ret = dfs(n-1,m-1,a,dp);</span><span class="token comment" spellcheck="true">//        System.out.println(ret);</span>        <span class="token comment" spellcheck="true">/**         * 功能描述: 递归做法         * @param: [args]         * @return: void         * @author: anlen123         * @date: 2020/4/24 - 15:42         */</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 功能描述: 记忆化搜索     * @param: [x, y, a, dp]     * @return: int     * @author: anlen123     * @date: 2020/4/24 - 15:42     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> y<span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">99999999</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>a<span class="token punctuation">,</span>dp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="53-最大子序和"><a href="#53-最大子序和" class="headerlink" title="53. 最大子序和"></a><a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener">53. 最大子序和</a></h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*https://leetcode-cn.com/problems/maximum-subarray/53. 最大子序和给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。示例:输入: [-2,1,-3,4,-1,2,1,-5,4],输出: 6解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ret <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198. 打家劫舍"></a><a href="https://leetcode-cn.com/problems/house-robber/" target="_blank" rel="noopener">198. 打家劫舍</a></h4><pre class=" language-java"><code class="language-java">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>house<span class="token operator">-</span>robber<span class="token operator">/</span><span class="token comment" spellcheck="true">/**你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。示例 1:输入: [1,2,3,1]输出: 4解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。     偷窃到的最高金额 = 1 + 3 = 4 。示例 2:输入: [2,7,9,3,1]输出: 12解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。     偷窃到的最高金额 = 2 + 9 + 1 = 12 。来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/house-robber著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token operator">==</span>null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="213-打家劫舍-II"><a href="#213-打家劫舍-II" class="headerlink" title="213. 打家劫舍 II"></a><a href="https://leetcode-cn.com/problems/house-robber-ii/" target="_blank" rel="noopener">213. 打家劫舍 II</a></h4><pre class=" language-java"><code class="language-java"><span class="token number">213</span><span class="token punctuation">.</span> 打家劫舍 II<span class="token comment" spellcheck="true">/*你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。示例 1:输入: [2,3,2]输出: 3解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。示例 2:输入: [1,2,3,1]输出: 4解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。     偷窃到的最高金额 = 1 + 3 = 4 。来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/house-robber-ii著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token operator">==</span>null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">DP</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">DP</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">DP</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    </code></pre><h4 id="300-最长上升子序列"><a href="#300-最长上升子序列" class="headerlink" title="300. 最长上升子序列"></a><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/" target="_blank" rel="noopener">300. 最长上升子序列</a></h4><pre class=" language-java"><code class="language-java"><span class="token number">300</span><span class="token punctuation">.</span> 最长上升子序列   <span class="token comment" spellcheck="true">//经典</span><span class="token comment" spellcheck="true">/*给定一个无序的整数数组，找到其中最长上升子序列的长度。示例:输入: [10,9,2,5,3,7,101,18]输出: 4 解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/longest-increasing-subsequence著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。图片题解https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/zui-chang-shang-sheng-zi-xu-lie-by-leetcode-soluti/*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token operator">==</span>null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            ret <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="62-不同路径"><a href="#62-不同路径" class="headerlink" title="62. 不同路径"></a><a href="https://leetcode-cn.com/problems/unique-paths/" target="_blank" rel="noopener">62. 不同路径</a></h4><pre class=" language-java"><code class="language-java"><span class="token number">62</span><span class="token punctuation">.</span> 不同路径https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>unique<span class="token operator">-</span>paths<span class="token operator">/</span>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。问总共有多少条不同的路径？例如，上图是一个<span class="token number">7</span> x <span class="token number">3</span> 的网格。有多少可能的路径？来源：力扣（LeetCode）链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>unique<span class="token operator">-</span>paths著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png" alt="img"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1143-最长公共子序列"><a href="#1143-最长公共子序列" class="headerlink" title="1143. 最长公共子序列"></a><a href="https://leetcode-cn.com/problems/longest-common-subsequence/" target="_blank" rel="noopener">1143. 最长公共子序列</a></h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*https://leetcode-cn.com/problems/longest-common-subsequence/给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。例如，"ace" 是 "abcde" 的子序列，但 "aec" 不是 "abcde" 的子序列。两个字符串的「公共子序列」是这两个字符串所共同拥有的子序列。若这两个字符串没有公共子序列，则返回 0。示例 1:输入：text1 = "abcde", text2 = "ace" 输出：3  解释：最长公共子序列是 "ace"，它的长度为 3。示例 2:输入：text1 = "abc", text2 = "abc"输出：3解释：最长公共子序列是 "abc"，它的长度为 3。示例 3:输入：text1 = "abc", text2 = "def"输出：0解释：两个字符串没有公共子序列，返回 0。来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/longest-common-subsequence著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。*/</span><span class="token operator">|</span>  <span class="token punctuation">{</span>  dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span>  <span class="token punctuation">,</span>             text1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>text<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">|</span>  <span class="token punctuation">{</span>  <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>  other<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span>String text1<span class="token punctuation">,</span> String text2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>text1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>text2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> text1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> text2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>text1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span>text2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>text1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>text2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="322-零钱兑换"><a href="#322-零钱兑换" class="headerlink" title="322. 零钱兑换"></a><a href="https://leetcode-cn.com/problems/coin-change/" target="_blank" rel="noopener">322. 零钱兑换</a></h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。示例 1:输入: coins = [1, 2, 5], amount = 11输出: 3 解释: 11 = 5 + 5 + 1示例 2:输入: coins = [2], amount = 3输出: -1来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/coin-change著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> coins<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> MAX  <span class="token operator">=</span> amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>MAX<span class="token punctuation">,</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>amount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>coins<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token operator">==</span>MAX<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><hr><hr><h4 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a><a href="https://blog.csdn.net/achesong/article/details/88428895" target="_blank" rel="noopener">01背包</a></h4><p><img src="https://img-blog.csdnimg.cn/20190312205757755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FjaGVzb25n,size_16,color_FFFFFF,t_70" alt></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*有n件物品，每件物品的重量为w[i]，价值为c[i]。现有一个容量为V的背包，问如何选取物品放入背包，使得背包内物品的总价值最大。其中每种物品都只有一件。*/</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>leecode<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner cin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        Solution solution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> N<span class="token punctuation">,</span>V<span class="token punctuation">;</span>        N <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        V <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>V<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> V<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//一维优化</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner cin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        Solution solution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> N<span class="token punctuation">,</span>V<span class="token punctuation">;</span>        N <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        V <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>V<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> V<span class="token punctuation">;</span> j <span class="token operator">>=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>马拉车算法</title>
      <link href="/2020/05/07/manacher-suan-fa/"/>
      <url>/2020/05/07/manacher-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="manacher-算法"><a href="#manacher-算法" class="headerlink" title="manacher 算法"></a>manacher 算法</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span>string <span class="token function">get_ss</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>    string ss <span class="token operator">=</span> <span class="token string">"$#"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ss<span class="token operator">+</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        ss<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"#"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ss<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"*"</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>ss<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> ss<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">manacher</span><span class="token punctuation">(</span>string ss<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> MaxLeng <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mx<span class="token operator">></span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>               p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mx<span class="token operator">-</span>i<span class="token punctuation">,</span>p<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>i<span class="token operator">+</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span>ss<span class="token punctuation">[</span>i<span class="token operator">-</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mx<span class="token operator">&lt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            mx <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            id <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        MaxLeng<span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>MaxLeng<span class="token punctuation">,</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> MaxLeng<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s <span class="token punctuation">;</span>    cin<span class="token operator">>></span>s<span class="token punctuation">;</span>    string ss <span class="token operator">=</span> <span class="token function">get_ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">manacher</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">5. 最长回文子串</a></h4><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    string ret<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    string <span class="token function">get_ss</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>        string ss <span class="token operator">=</span> <span class="token string">"$#"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ss<span class="token operator">+</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            ss<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"#"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ss<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"*"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// cout&lt;&lt;ss&lt;&lt;endl;</span>        <span class="token keyword">return</span> ss<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">manacher</span><span class="token punctuation">(</span>string ss<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> MaxLeng <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mx<span class="token operator">></span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                   p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mx<span class="token operator">-</span>i<span class="token punctuation">,</span>p<span class="token punctuation">[</span>id<span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>i<span class="token operator">+</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span>ss<span class="token punctuation">[</span>i<span class="token operator">-</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mx<span class="token operator">&lt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                mx <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                id <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>MaxLeng<span class="token operator">&lt;=</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                MaxLeng<span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>MaxLeng<span class="token punctuation">,</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ret <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token operator">-</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>MaxLeng<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// cout&lt;&lt;MaxLeng&lt;&lt;endl;</span>        <span class="token comment" spellcheck="true">// return MaxLeng;</span>    <span class="token punctuation">}</span>    string <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        string ss <span class="token operator">=</span> <span class="token function">get_ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">manacher</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">;</span>        string ans <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ret<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token operator">+</span><span class="token operator">=</span>ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vector STL 容器</title>
      <link href="/2020/05/07/vector-stl-rong-qi/"/>
      <url>/2020/05/07/vector-stl-rong-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="vector-STL-容器"><a href="#vector-STL-容器" class="headerlink" title="vector STL 容器"></a>vector STL 容器</h1><pre class=" language-c"><code class="language-c">简介：vector是将元素置于一个动态数组中进行管理的容器vector可以随机存取元素，支持索引值直接存取，用<span class="token punctuation">[</span><span class="token punctuation">]</span>或者<span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法vector下尾部添加或者删除元素非常快，但在中间或头部插入或者删除元素比较耗时头文件：<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>vector基本操作：vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从尾部插入元素</span><span class="token keyword">int</span> b <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取头部元素</span><span class="token keyword">int</span> a <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取尾部元素</span>a <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//弹出并删除尾部元素</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//元素长度</span>v<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//修改头部元素的值</span>v<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">41</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//修改尾部元素的值</span>vector初始化：vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v2 <span class="token operator">=</span> v<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v3</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v4</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//事先分配3个元素空间，默认初始化为0</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v4</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 三个元素都是9</span>vector遍历：vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当用数组的方式遍历并且是给vector赋值的时候，必须先分配好空间</span> <span class="token comment" spellcheck="true">// push_back强化</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此时在第11个位置插入，因为push_back是在尾部插入的</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此时在第12个位置插入，因为push_back是在尾部插入的</span><span class="token comment" spellcheck="true">//数组方式</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//迭代器方式-正向迭代</span><span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">:</span><span class="token punctuation">:</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//迭代器方式-逆向迭代</span><span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">:</span><span class="token punctuation">:</span>reverse_iterator rit <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> rit <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> rit<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>rit <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>迭代器强化：<span class="token number">1</span><span class="token punctuation">.</span>  v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>指向v的第一个元素的位置，v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>指向的是v最后一个元素的下一个位置<span class="token number">2</span><span class="token punctuation">.</span>  迭代器种类：正向迭代器、逆向迭代器、双向迭代器、只读迭代器、、、、vector删除和插入：vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//根据元素的位置删除</span>v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//区间删除</span>v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//删除指定位置单个元素</span><span class="token comment" spellcheck="true">//根据值删除</span><span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">:</span><span class="token punctuation">:</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">*</span>it <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//erase函数会让迭代器自动下移</span>         <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>             it<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//插入</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在某个位置插入100</span>v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在某个位置插入3个100</span>v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在某个位置插入一段数据</span>————————————————版权声明：本文为CSDN博主「tangwei2014」的原创文章，遵循CC <span class="token number">4.0</span> BY<span class="token operator">-</span>SA版权协议，转载请附上原文出处链接及本声明。原文链接：https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>tangwei2014<span class="token operator">/</span>article<span class="token operator">/</span>details<span class="token operator">/</span><span class="token number">49311969</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>只出现一次的数</title>
      <link href="/2020/05/07/zhi-chu-xian-yi-ci-de-shu/"/>
      <url>/2020/05/07/zhi-chu-xian-yi-ci-de-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="只出现一次的数"><a href="#只出现一次的数" class="headerlink" title="只出现一次的数"></a>只出现一次的数</h1><h4 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136. 只出现一次的数字"></a><a href="https://leetcode-cn.com/problems/single-number/" target="_blank" rel="noopener">136. 只出现一次的数字</a></h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。输入: [2,2,1]输出: 1示例 2:输入: [4,1,2,1,2]输出: 4*/</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token operator">^</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="面试题56-II-数组中数字出现的次数-II"><a href="#面试题56-II-数组中数字出现的次数-II" class="headerlink" title="面试题56 - II. 数组中数字出现的次数 II"></a><a href="https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof/" target="_blank" rel="noopener">面试题56 - II. 数组中数字出现的次数 II</a></h4><p><img src="https://pic.leetcode-cn.com/28f2379be5beccb877c8f1586d8673a256594e0fc45422b03773b8d4c8418825-Picture1.png" alt="Picture1.png"></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现三次。找出那个只出现了一次的元素。*/</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> bit<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">long</span> <span class="token keyword">long</span>  temp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>temp <span class="token operator">&amp;</span> num<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    bit<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                temp<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// for(int i=0;i&lt;32;i++){</span>        <span class="token comment" spellcheck="true">//     cout&lt;&lt;bit[i]&lt;&lt;" ";</span>        <span class="token comment" spellcheck="true">// }</span>        <span class="token comment" spellcheck="true">// cout&lt;&lt;endl;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> temp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ret<span class="token operator">^</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="260-只出现一次的数字-III"><a href="#260-只出现一次的数字-III" class="headerlink" title="260. 只出现一次的数字 III"></a><a href="https://leetcode-cn.com/problems/single-number-iii/" target="_blank" rel="noopener">260. 只出现一次的数字 III</a></h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。输入: [1,2,1,3,2,5]输出: [3,5]*/</span>class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ret<span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token operator">^</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>x <span class="token operator">&amp;</span> ans<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            x<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">int</span> ret1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ret1<span class="token operator">^</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                ret2<span class="token operator">^</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ret1<span class="token punctuation">)</span><span class="token punctuation">;</span>        ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ret2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速幂</title>
      <link href="/2020/05/07/kuai-su-mi/"/>
      <url>/2020/05/07/kuai-su-mi/</url>
      
        <content type="html"><![CDATA[<pre class=" language-c"><code class="language-c">ll <span class="token function">quick_pow</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ll ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans<span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆排序</title>
      <link href="/2020/05/07/dui-pai-xu/"/>
      <url>/2020/05/07/dui-pai-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p><a href="https://www.bilibili.com/video/BV1Eb41147dK?t=3" target="_blank" rel="noopener">视频教程</a></p><p>![1.png)</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span> tree<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//交换父节点和子节点的函数,一个交换操作</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>                          <span class="token comment" spellcheck="true">//递归出口</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">int</span> c1 <span class="token operator">=</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//第一个子节点</span>    <span class="token keyword">int</span> c2 <span class="token operator">=</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//第二个子节点</span>    <span class="token keyword">int</span> maxx <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c1<span class="token operator">&lt;</span>n <span class="token operator">&amp;&amp;</span> tree<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token operator">></span>tree<span class="token punctuation">[</span>maxx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        maxx <span class="token operator">=</span> c1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>c2<span class="token operator">&lt;</span>n <span class="token operator">&amp;&amp;</span> tree<span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token operator">></span>tree<span class="token punctuation">[</span>maxx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        maxx <span class="token operator">=</span> c2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>maxx<span class="token operator">!=</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span>maxx<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span>n<span class="token punctuation">,</span>maxx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//从最后一个节点开始建树</span><span class="token keyword">void</span> <span class="token function">buildtree</span><span class="token punctuation">(</span><span class="token keyword">int</span> tree<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//创建一个堆</span>    <span class="token keyword">int</span> last_node <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//最后一个节点</span>    <span class="token keyword">int</span> parent <span class="token operator">=</span> <span class="token punctuation">(</span>last_node<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//知道当然节点求它的父节点</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>parent<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span>n<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//排序,把最后一个节点和第一个节点交换,第一个节点肯定是最大的(在建树过程中就已经决定了),一直把最后一个节点去除</span><span class="token keyword">void</span> <span class="token function">heapify_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> tree<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">buildtree</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token function">heapify_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token punctuation">:</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>v<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/2020/05/07/kuai-su-pai-xu/"/>
      <url>/2020/05/07/kuai-su-pai-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><a href="https://www.bilibili.com/video/av62621532?t=527" target="_blank" rel="noopener">视频教程</a></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">quck_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token operator">&amp;&amp;</span>temp<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            right<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token operator">&amp;&amp;</span>temp<span class="token operator">>=</span>a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            a<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        a<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">quck_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>l<span class="token punctuation">,</span>left<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quck_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">13</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token function">quck_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">13</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用递归的方式把字符串倒转</title>
      <link href="/2020/05/07/yong-di-gui-de-fang-shi-ba-zi-fu-chuan-dao-zhuan/"/>
      <url>/2020/05/07/yong-di-gui-de-fang-shi-ba-zi-fu-chuan-dao-zhuan/</url>
      
        <content type="html"><![CDATA[<h1 id="用递归的方式把字符串倒转"><a href="#用递归的方式把字符串倒转" class="headerlink" title="用递归的方式把字符串倒转"></a>用递归的方式把字符串倒转</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leecode<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"reString(s) = "</span> <span class="token operator">+</span> <span class="token function">reString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">reString</span><span class="token punctuation">(</span>String ss<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ss<span class="token operator">==</span>null <span class="token operator">||</span> ss<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> ss<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">reString</span><span class="token punctuation">(</span>ss<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>ss<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧拉函数</title>
      <link href="/2020/05/07/ou-la-han-shu/"/>
      <url>/2020/05/07/ou-la-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h1><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> prim<span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> vis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>prim<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> prim<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            prim<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> cnt <span class="token operator">&amp;&amp;</span> i <span class="token operator">*</span> prim<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            vis<span class="token punctuation">[</span>i <span class="token operator">*</span> prim<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> prim<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> prim<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>全篇的精华在于：</p><pre><code>if(i % prim[j] == 0) break;</code></pre><p><img src="https://img-blog.csdn.net/20180809013606691?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvZGFjb2Nv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><pre class=" language-c++"><code class="language-c++">#include <bits/stdc++.h>using namespace std;vector<int> pri;const int MAXX = 100;vector<int> vis(100);int main(){    int n;    cin>>n;    vis.resize(n+10);    for (int i = 2;i<=n;i++){        if(vis[i]==0){            pri.push_back(i);        }        for (int j = 0;j<=pri.size()&&i * pri[j]<=n;j++){            vis[i*pri[j]]=1;            if (i%pri[j]==0){                break;            }        }    }    // for (auto v:pri){    //     cout<<v<<" ";    // }    cout<<pri.size()<<endl;    return 0;}</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题 16.03. 交点</title>
      <link href="/2020/05/07/mian-shi-ti-16.03.jiao-dian/"/>
      <url>/2020/05/07/mian-shi-ti-16.03.jiao-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="面试题-16-03-交点"><a href="#面试题-16-03-交点" class="headerlink" title="面试题 16.03. 交点"></a><a href="https://leetcode-cn.com/problems/intersection-lcci/" target="_blank" rel="noopener">面试题 16.03. 交点</a></h1><p>给定两条线段（表示为起点start = {X1, Y1}和终点end = {X2, Y2}），如果它们有交点，请计算其交点，没有交点则返回空值。</p><p>要求浮点型误差不超过10^-6。若有多个交点（线段重叠）则返回 X 值最小的点，X 坐标相同则返回 Y 值最小的点。</p><p>示例 1：</p><p>输入：<br>line1 = {0, 0}, {1, 0}<br>line2 = {1, 1}, {0, -1}<br>输出： {0.5, 0}<br>示例 2：</p><p>输入：<br>line1 = {0, 0}, {3, 3}<br>line2 = {1, 1}, {2, 2}<br>输出： {1, 1}<br>示例 3：</p><p>输入：<br>line1 = {0, 0}, {1, 1}<br>line2 = {1, 0}, {2, 1}<br>输出： {}，两条线段没有交点</p><p><a href="https://leetcode-cn.com/problems/intersection-lcci/solution/jiao-dian-by-leetcode-solution/" target="_blank" rel="noopener">题解</a></p><pre class=" language-c++"><code class="language-c++">class Solution {public:    // 判断 (xk, yk) 是否在「线段」(x1, y1)~(x2, y2) 上    // 这里的前提是 (xk, yk) 一定在「直线」(x1, y1)~(x2, y2) 上    bool inside(int x1, int y1, int x2, int y2, int xk, int yk) {        // 若与 x 轴平行，只需要判断 x 的部分        // 若与 y 轴平行，只需要判断 y 的部分        // 若为普通线段，则都要判断        return (x1 == x2 || (min(x1, x2) <= xk && xk <= max(x1, x2))) && (y1 == y2 || (min(y1, y2) <= yk && yk <= max(y1, y2)));    }    void update(vector<double>& ans, double xk, double yk) {        // 将一个交点与当前 ans 中的结果进行比较        // 若更优则替换        if (!ans.size() || xk < ans[0] || (xk == ans[0] && yk < ans[1])) {            ans = {xk, yk};        }    }    vector<double> intersection(vector<int>& start1, vector<int>& end1, vector<int>& start2, vector<int>& end2) {        int x1 = start1[0], y1 = start1[1];        int x2 = end1[0], y2 = end1[1];        int x3 = start2[0], y3 = start2[1];        int x4 = end2[0], y4 = end2[1];        vector<double> ans;        // 判断 (x1, y1)~(x2, y2) 和 (x3, y3)~(x4, y3) 是否平行        if ((y4 - y3) * (x2 - x1) == (y2 - y1) * (x4 - x3)) {            // 若平行，则判断 (x3, y3) 是否在「直线」(x1, y1)~(x2, y2) 上            if ((y2 - y1) * (x3 - x1) == (y3 - y1) * (x2 - x1)) {                // 判断 (x3, y3) 是否在「线段」(x1, y1)~(x2, y2) 上                if (inside(x1, y1, x2, y2, x3, y3)) {                    update(ans, (double)x3, (double)y3);                }                // 判断 (x4, y4) 是否在「线段」(x1, y1)~(x2, y2) 上                if (inside(x1, y1, x2, y2, x4, y4)) {                    update(ans, (double)x4, (double)y4);                }                // 判断 (x1, y1) 是否在「线段」(x3, y3)~(x4, y4) 上                if (inside(x3, y3, x4, y4, x1, y1)) {                    update(ans, (double)x1, (double)y1);                }                // 判断 (x2, y2) 是否在「线段」(x3, y3)~(x4, y4) 上                if (inside(x3, y3, x4, y4, x2, y2)) {                    update(ans, (double)x2, (double)y2);                }            }            // 在平行时，其余的所有情况都不会有交点        }        else {            // 联立方程得到 t1 和 t2 的值            double t1 = (double)(x3 * (y4 - y3) + y1 * (x4 - x3) - y3 * (x4 - x3) - x1 * (y4 - y3)) / ((x2 - x1) * (y4 - y3) - (x4 - x3) * (y2 - y1));            double t2 = (double)(x1 * (y2 - y1) + y3 * (x2 - x1) - y1 * (x2 - x1) - x3 * (y2 - y1)) / ((x4 - x3) * (y2 - y1) - (x2 - x1) * (y4 - y3));            // 判断 t1 和 t2 是否均在 [0, 1] 之间            if (t1 >= 0.0 && t1 <= 1.0 && t2 >= 0.0 && t2 <= 1.0) {                ans = {x1 + t1 * (x2 - x1), y1 + t1 * (y2 - y1)};            }        }        return ans;    }};作者：LeetCode-Solution链接：https://leetcode-cn.com/problems/intersection-lcci/solution/jiao-dian-by-leetcode-solution/来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="/2020/05/07/gui-bing-pai-xu/"/>
      <url>/2020/05/07/gui-bing-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p><a href="https://www.bilibili.com/video/BV1Ax411U7Xx" target="_blank" rel="noopener">视频教程</a></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//归并排序</span><span class="token comment" spellcheck="true">/*********************/</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> M<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> left_size <span class="token operator">=</span> M<span class="token operator">-</span>L<span class="token punctuation">;</span>    <span class="token keyword">int</span> right_size <span class="token operator">=</span> R<span class="token operator">-</span>M<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> left<span class="token punctuation">[</span>left_size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right<span class="token punctuation">[</span>right_size<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//产生两个左右数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> L<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        left<span class="token punctuation">[</span>i<span class="token operator">-</span>L<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> M<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>R<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        right<span class="token punctuation">[</span>i<span class="token operator">-</span>M<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>k <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>left_size <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>right_size<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//数组比较那个小,就插入</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span>left<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>right<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>left_size<span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>left<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>right_size<span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>right<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">merger_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//分治归并</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">==</span>R<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> M <span class="token operator">=</span> <span class="token punctuation">(</span>L<span class="token operator">+</span>R<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">merger_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>L<span class="token punctuation">,</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merger_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>M<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>L<span class="token punctuation">,</span>M<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*******************/</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题 17.16. 按摩师</title>
      <link href="/2020/05/07/mian-shi-ti-17.16.an-mo-shi/"/>
      <url>/2020/05/07/mian-shi-ti-17.16.an-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="面试题-17-16-按摩师"><a href="#面试题-17-16-按摩师" class="headerlink" title="面试题 17.16. 按摩师"></a><a href="https://leetcode-cn.com/problems/the-masseuse-lcci/" target="_blank" rel="noopener">面试题 17.16. 按摩师</a></h1><p>一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。</p><p>注意：本题相对原题稍作改动</p><pre><code>示例 1：输入： [1,2,3,1]输出： 4解释： 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。示例 2：输入： [2,7,9,3,1]输出： 12解释： 选择 1 号预约、 3 号预约和 5 号预约，总时长 = 2 + 9 + 1 = 12。示例 3：输入： [2,1,4,5,3,1,1,3]输出： 12解释： 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/the-masseuse-lcci著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">massage</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp1 <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> tdp0 <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp0<span class="token punctuation">,</span> dp1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 计算 dp[i][0]</span>            <span class="token keyword">int</span> tdp1 <span class="token operator">=</span> dp0 <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 计算 dp[i][1]</span>            dp0 <span class="token operator">=</span> tdp0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用 dp[i][0] 更新 dp_0</span>            dp1 <span class="token operator">=</span> tdp1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用 dp[i][1] 更新 dp_1</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>dp0<span class="token punctuation">,</span> dp1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>the<span class="token operator">-</span>masseuse<span class="token operator">-</span>lcci<span class="token operator">/</span>solution<span class="token operator">/</span>an<span class="token operator">-</span>mo<span class="token operator">-</span>shi<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span>来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题59 - II. 队列的最大值</title>
      <link href="/2020/05/07/mian-shi-ti-59-ii.dui-lie-de-zui-da-zhi/"/>
      <url>/2020/05/07/mian-shi-ti-59-ii.dui-lie-de-zui-da-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="面试题59-II-队列的最大值"><a href="#面试题59-II-队列的最大值" class="headerlink" title="面试题59 - II. 队列的最大值"></a><a href="https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof/" target="_blank" rel="noopener">面试题59 - II. 队列的最大值</a></h1><p><strong>请定义一个队列并实现函数 max_value 得到队列里的最大值，要求函数max_value、push_back 和 pop_front 的均摊时间复杂度都是O(1)。</strong></p><p><strong>若队列为空，pop_front 和 max_value 需要返回 -1</strong></p><p><strong>示例 1：</strong></p><p><strong>输入:</strong><br><strong>[“MaxQueue”,”push_back”,”push_back”,”max_value”,”pop_front”,”max_value”]</strong><br><strong>[[],[1],[2],[],[],[]]</strong><br><strong>输出: [null,null,null,2,1,2]</strong><br><strong>示例 2：</strong></p><p><strong>输入:</strong><br><strong>[“MaxQueue”,”pop_front”,”max_value”]</strong><br><strong>[[],[],[]]</strong><br><strong>输出: [null,-1,-1]</strong></p><p><strong>来源：力扣（LeetCode）</strong><br><strong>链接：<a href="https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof" target="_blank" rel="noopener">https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof</a></strong><br><strong>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</strong></p><p><strong>题解:</strong> </p><p><strong>我们知道对于一个普通队列，push_back 和 pop_front 的时间复杂度都是 \mathcal{O}(1)O(1)，因此我们直接使用队列的相关操作就可以实现这两个函数。</strong></p><p><strong>对于 max_value 函数，我们通常会这样思考，即每次入队操作时都更新最大值:</strong></p><p><img src="https://pic.leetcode-cn.com/839e8856c964e437c7bd17faf24d1b0524b35e819296af3d81866c15b77fa478-59.gif" alt="59.gif"><br><a href="https://pic.leetcode-cn.com/839e8856c964e437c7bd17faf24d1b0524b35e819296af3d81866c15b77fa478-59.gif" target="_blank" rel="noopener">https://pic.leetcode-cn.com/839e8856c964e437c7bd17faf24d1b0524b35e819296af3d81866c15b77fa478-59.gif</a></p><p>但是当出队时，这个方法会造成信息丢失，<strong>即当最大值出队后，我们无法知道队列里的下一个最大值。</strong></p><p><img src="https://pic.leetcode-cn.com/571cfb44a14bd3c77ee6563b23e6efaa48419cd12cd3c5a43190a36d4d129592-fig2.gif" alt="fig2.gif"><br><a href="https://pic.leetcode-cn.com/571cfb44a14bd3c77ee6563b23e6efaa48419cd12cd3c5a43190a36d4d129592-fig2.gif" target="_blank" rel="noopener">https://pic.leetcode-cn.com/571cfb44a14bd3c77ee6563b23e6efaa48419cd12cd3c5a43190a36d4d129592-fig2.gif</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h2><p><strong>为了解决上述问题，我们只需记住当前最大值出队后，队列里的下一个最大值即可。</strong></p><p><strong>具体方法是使用一个双端队列 dequedeque，在每次入队时，如果 dequedeque 队尾元素小于即将入队的元素 valuevalue，则将小于 valuevalue 的元素全部出队后，再将 valuevalue 入队；否则直接入队。</strong></p><p><img src="https://pic.leetcode-cn.com/9d038fc9bca6db656f81853d49caccae358a5630589df304fc24d8999777df98-fig3.gif" alt="fig3.gif"><br><a href="https://pic.leetcode-cn.com/9d038fc9bca6db656f81853d49caccae358a5630589df304fc24d8999777df98-fig3.gif" target="_blank" rel="noopener">https://pic.leetcode-cn.com/9d038fc9bca6db656f81853d49caccae358a5630589df304fc24d8999777df98-fig3.gif</a><br>这时，辅助队列 deque<em>d<strong>e</strong>q<strong>u</strong>e</em> 队首元素就是队列的最大值。</p><h2 id="代码-c"><a href="#代码-c" class="headerlink" title="代码: c++"></a>代码: c++</h2><pre class=" language-c"><code class="language-c">class MaxQueue <span class="token punctuation">{</span>public<span class="token punctuation">:</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> d<span class="token punctuation">;</span>    <span class="token function">MaxQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>d<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            d<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">max_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> d<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>d<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> d<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>            d<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        d<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>d<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            d<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your MaxQueue object will be instantiated and called as such: * MaxQueue* obj = new MaxQueue(); * int param_1 = obj->max_value(); * obj->push_back(value); * int param_3 = obj->pop_front(); */</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题51. 数组中的逆序对</title>
      <link href="/2020/05/07/mian-shi-ti-51.shu-zu-zhong-de-ni-xu-dui/"/>
      <url>/2020/05/07/mian-shi-ti-51.shu-zu-zhong-de-ni-xu-dui/</url>
      
        <content type="html"><![CDATA[<h1 id="面试题51-数组中的逆序对"><a href="#面试题51-数组中的逆序对" class="headerlink" title="面试题51. 数组中的逆序对"></a><a href="https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/" target="_blank" rel="noopener">面试题51. 数组中的逆序对</a></h1><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</p><p>示例 1:</p><p>输入: [7,5,6,4]<br>输出: 5</p><p>限制：</p><p>0 &lt;= 数组长度 &lt;= 50000</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof" target="_blank" rel="noopener">https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>方法一：归并排序<br>预备知识</p><p>「归并排序」是分治思想的典型应用，它包含这样三个步骤：</p><p>分解： 待排序的区间为 [l, r][l,r]，令 m = \lfloor \frac{l + r}{2} \rfloorm=⌊<br>2<br>l+r</p><p> ⌋，我们把 [l, r][l,r] 分成 [l, m][l,m] 和 [m + 1, r][m+1,r]<br>解决： 使用归并排序递归地排序两个子序列<br>合并： 把两个已经排好序的子序列 [l, m][l,m] 和 [m + 1, r][m+1,r] 合并起来<br>在待排序序列长度为 11 的时候，递归开始「回升」，因为我们默认长度为 11 的序列是排好序的。</p><p>思路</p><p>那么求逆序对和归并排序又有什么关系呢？关键就在于「归并」当中「并」的过程。我们通过一个实例来看看。假设我们有两个已排序的序列等待合并，分别是 L = { 8, 12, 16, 22, 100 }L={8,12,16,22,100} 和 R = { 9, 26, 55, 64, 91 }R={9,26,55,64,91}。一开始我们用指针 lPtr = 0 指向 LL 的首部，rPtr = 0 指向 RR 的头部。记已经合并好的部分为 MM。</p><p>L = [8, 12, 16, 22, 100]   R = [9, 26, 55, 64, 91]  M = []<br>     |                          |<br>   lPtr                       rPtr<br>我们发现 lPtr 指向的元素小于 rPtr 指向的元素，于是把 lPtr 指向的元素放入答案，并把 lPtr 后移一位。</p><p>L = [8, 12, 16, 22, 100]   R = [9, 26, 55, 64, 91]  M = [8]<br>        |                       |<br>      lPtr                     rPtr<br>这个时候我们把左边的 88 加入了答案，我们发现右边没有数比 88 小，所以 88 对逆序对总数的「贡献」为 00。</p><p>接着我们继续合并，把 99 加入了答案，此时 lPtr 指向 1212，rPtr 指向 2626。</p><p>L = [8, 12, 16, 22, 100]   R = [9, 26, 55, 64, 91]  M = [8, 9]<br>        |                          |<br>       lPtr                       rPtr<br>此时 lPtr 比 rPtr 小，把 lPtr 对应的数加入答案，并考虑它对逆序对总数的贡献为 rPtr 相对 RR 首位置的偏移 11（即右边只有一个数比 1212 小，所以只有它和 1212 构成逆序对），以此类推。</p><p>我们发现用这种「算贡献」的思想在合并的过程中计算逆序对的数量的时候，只在 lPtr 右移的时候计算，是基于这样的事实：当前 lPtr 指向的数字比 rPtr 小，但是比 RR 中 [0 … rPtr - 1] 的其他数字大，[0 … rPtr - 1] 的其他数字本应当排在 lPtr 对应数字的左边，但是它排在了右边，所以这里就贡献了 rPtr 个逆序对。</p><p>利用这个思路，我们可以写出如下代码。</p><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/solution/shu-zu-zhong-de-ni-xu-dui-by-leetcode-solution/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/solution/shu-zu-zhong-de-ni-xu-dui-by-leetcode-solution/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reversePairs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                ret<span class="token operator">+=</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            ret<span class="token operator">+=</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        int t = l;</span><span class="token comment" spellcheck="true">//        for (int m = 0; m &lt; k; m++) {</span><span class="token comment" spellcheck="true">//            nums[t++] = temp[m];</span><span class="token comment" spellcheck="true">//        }</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reversePairs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                ret<span class="token operator">+=</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                ret+=(j-(mid+1));</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            ret+=(j-(mid+1));</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            ret<span class="token operator">+=</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        int t = l;</span><span class="token comment" spellcheck="true">//        for (int m = 0; m &lt; k; m++) {</span><span class="token comment" spellcheck="true">//            nums[t++] = temp[m];</span><span class="token comment" spellcheck="true">//        }</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题62. 圆圈中最后剩下的数字</title>
      <link href="/2020/05/07/mian-shi-ti-62.yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi/"/>
      <url>/2020/05/07/mian-shi-ti-62.yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="面试题62-圆圈中最后剩下的数字"><a href="#面试题62-圆圈中最后剩下的数字" class="headerlink" title="面试题62. 圆圈中最后剩下的数字"></a><a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/" target="_blank" rel="noopener">面试题62. 圆圈中最后剩下的数字</a></h1><h2 id="约瑟夫环问题"><a href="#约瑟夫环问题" class="headerlink" title="约瑟夫环问题"></a>约瑟夫环问题</h2><pre class=" language-bash"><code class="language-bash">0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。示例 1：输入: n <span class="token operator">=</span> 5, m <span class="token operator">=</span> 3输出: 3示例 2：输入: n <span class="token operator">=</span> 10, m <span class="token operator">=</span> 17输出: 2来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><p>我们将上述问题建模为函数 f(n, m)，该函数的返回值为最终留下的元素的序号。</p><p>首先，长度为 n 的序列会先删除第 m % n 个元素，然后剩下一个长度为 n - 1 的序列。那么，我们可以递归地求解 f(n - 1, m)，就可以知道对于剩下的 n - 1 个元素，最终会留下第几个元素，我们设答案为 x = f(n - 1, m)。</p><p>由于我们删除了第 m % n 个元素，将序列的长度变为 n - 1。当我们知道了 f(n - 1, m) 对应的答案 x 之后，我们也就可以知道，长度为 n 的序列最后一个删除的元素，应当是从 m % n 开始数的第 x 个元素。因此有 f(n - 1, m) = (m % n + x) % n = (m + x) % n。</p><p>我们递归计算 f(n, m), f(n - 1, m), f(n - 2, m), … 直到递归的终点 f(1, m)。当序列长度为 1 时，一定会留下唯一的那个元素，它的编号为 0。</p><p>下面的代码实现了上述的递归函数。</p><pre class=" language-c"><code class="language-c">class Solution <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> x<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>public<span class="token punctuation">:</span>    <span class="token keyword">int</span> <span class="token function">lastRemaining</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10修改配置的git账号密码</title>
      <link href="/2020/04/30/win10-xiu-gai-pei-zhi-de-git-zhang-hao-mi-ma/"/>
      <url>/2020/04/30/win10-xiu-gai-pei-zhi-de-git-zhang-hao-mi-ma/</url>
      
        <content type="html"><![CDATA[<p>打开控制面板<br><img src="https://img-blog.csdnimg.cn/20190415164226970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpbnppdHVuNzk0Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击用户账户<br><img src="https://img-blog.csdnimg.cn/2019041516430874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpbnppdHVuNzk0Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击管理windows凭据<br><img src="https://img-blog.csdnimg.cn/20190415164445989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpbnppdHVuNzk0Nw==,size_16,color_FFFFFF,t_70" alt></p><p>找到对应的网址，点击删除<br><img src="https://img-blog.csdnimg.cn/20190415164712487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpbnppdHVuNzk0Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在继续操作直到再次提示输入git的账号密码</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高效使用Github寻找开源项目</title>
      <link href="/2020/04/30/gao-xiao-shi-yong-github-xun-zhao-kai-yuan-xiang-mu/"/>
      <url>/2020/04/30/gao-xiao-shi-yong-github-xun-zhao-kai-yuan-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="Git和GitHub什么关系？"><a href="#Git和GitHub什么关系？" class="headerlink" title="Git和GitHub什么关系？"></a>Git和GitHub什么关系？</h1><p>Git（读音为/gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</p><p>GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub。<br><font color="red" size="5"><br>git用来管理你的代码，可以对你的项目进行版本控制。github将你用git管理的项目放在网上， 本地的一个个项目对应github上面的一个个仓库。仓库可以公开（开源），私密。程序员之间可以互相学习别人的项目，互相交流，github是全球最大的同性交友网站.<br></font></p><h1 id="怎么在GitHub上靠谱的找一些开源项目"><a href="#怎么在GitHub上靠谱的找一些开源项目" class="headerlink" title="怎么在GitHub上靠谱的找一些开源项目"></a>怎么在GitHub上靠谱的找一些开源项目</h1><p><img src="http://xuewei.world:8000/wp-content/uploads/2020/03/image-74.png" alt></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 按照项目名/仓库名搜索（大小写不敏感）</span>in:name xxx <span class="token comment" spellcheck="true"># 按照README搜索（大小写不敏感）</span>in:readme xxx<span class="token comment" spellcheck="true"># 按照description搜索（大小写不敏感）</span>in:description xxx<span class="token comment" spellcheck="true"># stars数大于xxx</span>stars:<span class="token operator">></span>xxx<span class="token comment" spellcheck="true"># forks数大于xxx</span>forks:<span class="token operator">></span>xxx<span class="token comment" spellcheck="true"># 编程语言为xxx</span>language:xxx<span class="token comment" spellcheck="true"># 最新更新时间晚于YYYY-MM-DD</span>pushed:<span class="token operator">></span>YYYY-MM-DD</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><img src="http://xuewei.world:8000/wp-content/uploads/2020/03/image-76-1024x380.png" alt="img">寻找仓库名称包含ssm、stars数大于500、forks数大于100的开源项目</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习小技巧 </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aria2c使用指南</title>
      <link href="/2020/04/18/aria2c-shi-yong-zhi-nan/"/>
      <url>/2020/04/18/aria2c-shi-yong-zhi-nan/</url>
      
        <content type="html"><![CDATA[<p>PS :<a href="https://github.com/aria2/aria2" target="_blank" rel="noopener">https://github.com/aria2/aria2</a>  (开源地址)</p><h1 id="什么是Aria2"><a href="#什么是Aria2" class="headerlink" title="什么是Aria2"></a>什么是Aria2</h1><p>aria2是一个自由、开源、轻量级多协议和多源的命令行下载工具。它支持 HTTP/HTTPS、FTP、SFTP、 BitTorrent 和 Metalink 协议。aria2 可以通过内建的 JSON-RPC 和 XML-RPC 接口来操纵。aria2 下载文件的时候，自动验证数据块。它可以通过多个来源或者多个协议下载一个文件，并且会尝试利用你的最大下载带宽。默认情况下，所有的 Linux 发行版都包括 aria2，所以我们可以从官方库中很容易的安装。一些 GUI 下载管理器例如 uget 使用 aria2 作为插件来提高下载速度。</p><h2 id="Aria2-特性"><a href="#Aria2-特性" class="headerlink" title="Aria2 特性"></a>Aria2 特性</h2><p>支持 HTTP/HTTPS GET<br>支持 HTTP 代理<br>支持 HTTP BASIC 认证<br>支持 HTTP 代理认证<br>支持 FTP （主动、被动模式）<br>通过 HTTP 代理的 FTP（GET 命令行或者隧道）<br>分段下载<br>支持 Cookie<br>可以作为守护进程运行。<br>支持使用 fast 扩展的 BitTorrent 协议<br>支持在多文件 torrent 中选择文件<br>支持 Metalink 3.0 版本（HTTP/FTP/BitTorrent）<br>限制下载、上传速度</p><h1 id="Linux-下安装-aria2"><a href="#Linux-下安装-aria2" class="headerlink" title="Linux 下安装 aria2"></a>Linux 下安装 aria2</h1><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>对于 Debian、 Ubuntu 和 Mint<span class="token punctuation">]</span>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> aria2<span class="token punctuation">[</span>对于 CentOS、 RHEL、 Fedora 21 和更早些的操作系统<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install aria2</span><span class="token punctuation">[</span>Fedora 22 和 之后的系统<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dnf install aria2</span><span class="token punctuation">[</span>对于 suse 和 openSUSE<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># zypper install wget</span><span class="token punctuation">[</span>Mageia<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># urpmi aria2</span><span class="token punctuation">[</span>对于 Arch Linux<span class="token punctuation">]</span>$ <span class="token function">sudo</span> pacman -S aria2</code></pre><h1 id="Aria2-的使用"><a href="#Aria2-的使用" class="headerlink" title="Aria2 的使用"></a>Aria2 的使用</h1><h2 id="下载单个文件"><a href="#下载单个文件" class="headerlink" title="下载单个文件"></a>下载单个文件</h2><pre class=" language-bash"><code class="language-bash">1、直链下载下载直链文件，只需在命令后附加地址，如：aria2c http://xx.com/xx如果需要重命名为yy的话加上--out或者-o参数，如：aria2c --out<span class="token operator">=</span>yy http://xx.com/xxaria2c -o yy http://xx.com/xx使用aria2的分段和多线程下载功能可以加快文件的下载速度，对于下载大文件时特别有用。-x 分段下载，-s 多线程下载，如：aria2c -s 2 -x 2 http://xx.com/xx这将使用2个连接和2个线程来下载该文件。</code></pre><h2 id="BT下载"><a href="#BT下载" class="headerlink" title="BT下载"></a>BT下载</h2><pre class=" language-bash"><code class="language-bash">种子和磁力下载：aria2c ‘xxx.torrnet‘aria2c <span class="token string">'磁力链接'</span>列出种子内容：aria2c -S xxx.torrent下载种子内编号为1、4、5、6、7的文件，如：aria2c --select-file<span class="token operator">=</span>1,4-7 xxx.torrent设置bt端口：aria2c --listen-port<span class="token operator">=</span>3653 ‘xxx.torrent’</code></pre><h2 id="限速下载"><a href="#限速下载" class="headerlink" title="限速下载"></a>限速下载</h2><pre class=" language-bash"><code class="language-bash">单个文件最大下载速度：aria2c --max-download-limit<span class="token operator">=</span>300K -s10 -x10 <span class="token string">'http://xx.com/xx'</span>整体下载最大速度：aria2c --max-overall-download-limit<span class="token operator">=</span>300k -s10 -x10 <span class="token string">'http://xx.com/xx'</span></code></pre><h1 id="下载多个文件"><a href="#下载多个文件" class="headerlink" title="下载多个文件"></a>下载多个文件</h1><p>下面的命令将会从指定位置下载超过一个的文件并保存到当前目录，在下载文件的过程中，我们可以看到文件的（日期、时间、下载速度和下载进度）</p><pre class=" language-bash"><code class="language-bash">aria2c -Z http://file.drivergenius.com/DGSetup_Home_KZ.exe https://github.com/aria2/aria2/releases/download/release-1.35.0/aria2-1.35.0-aarch64-linux-android-build1.zip</code></pre><p>中间用空格隔开</p><h2 id="续传未完成的下载"><a href="#续传未完成的下载" class="headerlink" title="续传未完成的下载"></a>续传未完成的下载</h2><p>-c 就完事</p><pre class=" language-bash"><code class="language-bash">aria2c -c http://file.drivergenius.com/DGSetup_Home_KZ.exe</code></pre><h1 id="从文件获取输入"><a href="#从文件获取输入" class="headerlink" title="从文件获取输入"></a>从文件获取输入</h1><p>就像 wget 可以从一个文件获取输入的 URL 列表来下载一样。我们需要创建一个文件，将每一个 URL 存储在单独的行中。ara2 命令行可以添加 -i 选项来执行此操作。</p><pre class=" language-bash"><code class="language-bash">aria2c -i test-aria2.txt</code></pre><h1 id="win10使用aria2"><a href="#win10使用aria2" class="headerlink" title="win10使用aria2"></a>win10使用aria2</h1><p>下载win10的,和以上linux操作一致,不过有GUI版的</p><p><a href="https://www.lanzous.com/ibk87wd" target="_blank" rel="noopener">下载地址</a></p><p>使用方法：<br>方法一：单文件下载<br>aria2c.exe -c -s 5 -d F:\安装软件 URL<br>-c：开启断点续传<br>-s 5：设置5线程<br>-d F:\安装软件：设置下载后存储到F:\安装软件<br>URL：要下载文件的地址，<a href="http://xxx.com/xxx.zip" target="_blank" rel="noopener">http://xxx.com/xxx.zip</a> 这种。</p><p>方法二：多文件同时下载<br>aria2c.exe -c -s 5 -d F:\安装软件 -j 2 -i url.txt<br>-j 2：设置同时下载2个任务<br>-i url.txt：从url.txt读取下载任务。<br>针对url.txt，只需要把要下载的文件地址以每行一条的方式写进去即可。</p><pre class=" language-bash"><code class="language-bash">下载完全配置aira2 一键脚本<span class="token function">wget</span> -N git.io/aria2.sh <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> +x aria2.sh <span class="token operator">&amp;&amp;</span> ./aria2.sh然后到这个网址http://ariang.mayswind.net/latest/配置一下</code></pre><p><img src="https://i.imgur.com/3YuMQbD.png" alt></p><p>就可以下载了</p><p>一键配置脚本</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> -N git.io/aria2.sh <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> +x aria2.sh <span class="token operator">&amp;&amp;</span> ./aria2.sh</code></pre><p>然后到这个网址<br><a href="http://ariang.mayswind.net/latest/#!/downloading" target="_blank" rel="noopener">http://ariang.mayswind.net/latest/#!/downloading</a><br>github:<a href="https://github.com/anlen123/aria2.sh" target="_blank" rel="noopener">https://github.com/anlen123/aria2.sh</a><br>进行配置<br><img src="https://i.imgur.com/wJAQXmH.png" alt></p><p>下载bt的话,,需要在配置文件后面加服务器连接<br>我写了一个爬虫来搞它</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">openBT</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    txt <span class="token operator">=</span> list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span>None<span class="token punctuation">,</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(len(txt))</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"bt_temp.txt"</span><span class="token punctuation">,</span><span class="token string">'a+'</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> txt<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"https://github.com/ngosang/trackerslist.git"</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"trackerslist"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"git clone https://github.com/ngosang/trackerslist.git"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># os.system("dir")</span>    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">"trackerslist"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># os.system("dir")</span>    txt_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> file <span class="token keyword">in</span> txt_list<span class="token punctuation">:</span>        <span class="token keyword">if</span> file<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span> <span class="token operator">and</span> file<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"trackers"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print(file)</span>            openBT<span class="token punctuation">(</span>str<span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"bt_temp.txt"</span><span class="token punctuation">)</span>    a <span class="token operator">=</span>list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span>None<span class="token punctuation">,</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"bt.txt"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"del bt.txt"</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"bt.txt"</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"bt-tracker="</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"bt.txt"</span><span class="token punctuation">,</span><span class="token string">'a+'</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> a<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"trackerslist"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"rd /s/q trackerslist"</span><span class="token punctuation">)</span></code></pre><p>docker 版本的使用</p><pre class=" language-bash"><code class="language-bash">docker pull p3terx/aria2-pro  //拉取镜像docker run -d -it -p 6800:6800 -v ~/aria2-config:/config  -v ~/aria2-downloads:/downloads -e RPC_SECRET<span class="token operator">=</span>123456 -e RPC_PORT<span class="token operator">=</span>6800 -e LISTEN_PORT<span class="token operator">=</span>6888 --name aria2-pro docker.io/p3terx/aria2-pro  //运行教程在这:https://p3terx.com/archives/docker-aria2-pro.html</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux中tar命令用法</title>
      <link href="/2020/04/01/linux-zhong-tar-ming-ling-yong-fa/"/>
      <url>/2020/04/01/linux-zhong-tar-ming-ling-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="linux中tar命令用法"><a href="#linux中tar命令用法" class="headerlink" title="linux中tar命令用法"></a>linux中tar命令用法</h1><hr><p>把常用的tar解压命令总结下，当作备忘：</p><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><p>-c: 建立压缩档案<br>-x：解压<br>-t：查看内容<br>-r：向压缩归档文件末尾追加文件<br>-u：更新原压缩包中的文件</p><p>这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。</p><p>-z：有gzip属性的<br>-j：有bz2属性的<br>-Z：有compress属性的<br>-v：显示所有过程<br>-O：将文件解开到标准输出</p><h2 id="下面的参数-f是必须的"><a href="#下面的参数-f是必须的" class="headerlink" title="下面的参数-f是必须的"></a>下面的参数-f是必须的</h2><p>-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</p><p># tar -cf all.tar *.jpg<br>这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。</p><p># tar -rf all.tar *.gif<br>这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。</p><p># tar -uf all.tar logo.gif<br>这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。</p><p># tar -tf all.tar<br>这条命令是列出all.tar包中所有文件，-t是列出文件的意思</p><p># tar -xf all.tar<br>这条命令是解出all.tar包中所有文件，-x是解开的意思</p><p>压缩</p><ul><li>tar –cvf jpg.tar *.jpg 将目录里所有jpg文件打包成tar.jpg</li><li>tar –czf jpg.tar.gz *.jpg  将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz</li><li>tar –cjf jpg.tar.bz2 *.jpg 将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2</li><li>tar –cZf jpg.tar.Z *.jpg  将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z</li><li>rar a jpg.rar *.jpg rar格式的压缩，需要先下载rar for linux</li><li>zip jpg.zip *.jpg  zip格式的压缩，需要先下载zip for linux</li></ul><p>解压</p><ul><li>tar –xvf file.tar 解压 tar包</li><li>tar -xzvf file.tar.gz 解压tar.gz</li><li>tar -xjvf file.tar.bz2  解压 tar.bz2</li><li>tar –xZvf file.tar.Z  解压tar.Z</li><li>unrar e file.rar 解压rar</li><li>unzip file.zip 解压zip</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>*.tar 用 tar –xvf 解压</li><li>*.gz 用 gzip -d或者gunzip 解压     </li><li><em>.tar.gz和</em>.tgz 用 tar –xzf 解压</li><li>*.bz2 用 bzip2 -d或者用bunzip2 解压</li><li>*.tar.bz2用tar –xjf 解压</li><li>*.Z 用 uncompress 解压</li><li>*.tar.Z 用tar –xZf 解压</li><li>*.rar 用 unrar e解压</li><li>*.zip 用 unzip 解压</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 学习小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令学习</title>
      <link href="/2020/02/19/linux-ming-ling-xue-xi/"/>
      <url>/2020/02/19/linux-ming-ling-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="后台运行命令"><a href="#后台运行命令" class="headerlink" title="后台运行命令"></a>后台运行命令</h1><pre class=" language-bash"><code class="language-bash"><span class="token function">nohup</span> 命令 <span class="token operator">&amp;</span>如:nohup python test.py <span class="token operator">&amp;</span>可用ps -e查看   具体看哪个运行可以这么写 <span class="token function">ps</span> -e<span class="token operator">|</span><span class="token function">grep</span> xxxx如我想看后台的python命令：<span class="token function">ps</span> -e<span class="token operator">|</span><span class="token function">grep</span> python杀死后台为<span class="token function">kill</span> + pid</code></pre><h1 id="定时命令"><a href="#定时命令" class="headerlink" title="定时命令"></a>定时命令</h1><p>crontab -e 就可打开</p><pre><code>*    *    *    *    *-    -    -    -    -|    |    |    |    ||    |    |    |    +----- 星期中星期几 (0 - 7) (星期天 为0)|    |    |    +---------- 月份 (1 - 12) |    |    +--------------- 一个月中的第几天 (1 - 31)|    +-------------------- 小时 (0 - 23)+------------------------- 分钟 (0 - 59)</code></pre><h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><p>直接在 vim /etc/crontab 里面修改</p><p>注意,一半是在家目录下进行操作,,如果需要在当前目录需要在.sh里面写好cd 的路径</p><pre class=" language-shell"><code class="language-shell"># For details see man 4 crontabs# Example of job definition:# .---------------- minute (0 - 59)# |  .------------- hour (0 - 23)# |  |  .---------- day of month (1 - 31)# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# |  |  |  |  |# *  *  *  *  * user-name  command to be executed*/1 * * * * root /root/xx/a.sh0 0 * * * root /root/SexDay/auto_push.shauto_push.sh  cd /root/SexDaypython sex.pygit add *git add -A git commit -m "每日100张色图"git statusgit pushPS : 必须要给权限chmod 777 auto_push.sh必须要给权限chmod 777 auto_push.sh必须要给权限chmod 777 auto_push.sh必须要给权限chmod 777 auto_push.sh必须要给权限chmod 777 auto_push.sh</code></pre><p>实例</p><h2 id="每月每天每小时的第-0-分钟执行一次-bin-ls"><a href="#每月每天每小时的第-0-分钟执行一次-bin-ls" class="headerlink" title="每月每天每小时的第 0 分钟执行一次 /bin/ls"></a>每月每天每小时的第 0 分钟执行一次 /bin/ls</h2><pre class=" language-bash"><code class="language-bash">0 * * * * /bin/ls</code></pre><h2 id="在-12-月内-每天的早上-6-点到-12-点，每隔-3-个小时-0-分钟执行一次-usr-bin-backup"><a href="#在-12-月内-每天的早上-6-点到-12-点，每隔-3-个小时-0-分钟执行一次-usr-bin-backup" class="headerlink" title="在 12 月内, 每天的早上 6 点到 12 点，每隔 3 个小时 0 分钟执行一次 /usr/bin/backup"></a>在 12 月内, 每天的早上 6 点到 12 点，每隔 3 个小时 0 分钟执行一次 /usr/bin/backup</h2><pre class=" language-bash"><code class="language-bash">0 6-12/3 * 12 * /usr/bin/backup</code></pre><h2 id="周一到周五每天下午-5-00-寄一封信给-alex-domain-name"><a href="#周一到周五每天下午-5-00-寄一封信给-alex-domain-name" class="headerlink" title="周一到周五每天下午 5:00 寄一封信给 alex@domain.name"></a>周一到周五每天下午 5:00 寄一封信给 <a href="mailto:alex@domain.name" target="_blank" rel="noopener">alex@domain.name</a></h2><pre class=" language-bash"><code class="language-bash">0 17 * * 1-5 mail -s <span class="token string">"hi"</span> alex@domain.name <span class="token operator">&lt;</span> /tmp/maildata</code></pre><h2 id="每月每天的午夜-0-点-20-分-2-点-20-分-4-点-20-分…-执行-echo-“haha”"><a href="#每月每天的午夜-0-点-20-分-2-点-20-分-4-点-20-分…-执行-echo-“haha”" class="headerlink" title="每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分….执行 echo “haha”"></a>每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分….执行 echo “haha”</h2><pre class=" language-bash"><code class="language-bash">20 0-23/2 * * * <span class="token keyword">echo</span> <span class="token string">"haha"</span></code></pre><h2 id="意思是每两个小时重启一次apache"><a href="#意思是每两个小时重启一次apache" class="headerlink" title="意思是每两个小时重启一次apache"></a>意思是每两个小时重启一次apache</h2><pre class=" language-bash"><code class="language-bash">0 */2 * * * /sbin/service httpd restart </code></pre><h2 id="意思是每天7：50开启ssh服务"><a href="#意思是每天7：50开启ssh服务" class="headerlink" title="意思是每天7：50开启ssh服务"></a>意思是每天7：50开启ssh服务</h2><pre class=" language-bash"><code class="language-bash">50 7 * * * /sbin/service sshd start   </code></pre><h2 id="意思是每天22：50关闭ssh服务"><a href="#意思是每天22：50关闭ssh服务" class="headerlink" title="意思是每天22：50关闭ssh服务"></a>意思是每天22：50关闭ssh服务</h2><pre class=" language-bash"><code class="language-bash">50 22 * * * /sbin/service sshd stop  </code></pre><h2 id="每月1号和15号检查-home-磁盘"><a href="#每月1号和15号检查-home-磁盘" class="headerlink" title="每月1号和15号检查/home 磁盘"></a>每月1号和15号检查/home 磁盘</h2><pre class=" language-bash"><code class="language-bash">0 0 1,15 * * <span class="token function">fsck</span> /home </code></pre><h2 id="每小时的第一分执行-home-bruce-backup这个文件"><a href="#每小时的第一分执行-home-bruce-backup这个文件" class="headerlink" title="每小时的第一分执行 /home/bruce/backup这个文件"></a>每小时的第一分执行 /home/bruce/backup这个文件</h2><pre class=" language-bash"><code class="language-bash">1 * * * * /home/bruce/backup  </code></pre><h2 id="每周一至周五3点钟，在目录-home中，查找文件名为-xxx的文件，并删除4天前的文件。"><a href="#每周一至周五3点钟，在目录-home中，查找文件名为-xxx的文件，并删除4天前的文件。" class="headerlink" title="每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件。"></a>每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件。</h2><pre class=" language-bash"><code class="language-bash">00 03 * * 1-5 <span class="token function">find</span> /home <span class="token string">"*.xxx"</span> -mtime +4 -exec <span class="token function">rm</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span>  </code></pre><h2 id="意思是每月的1、11、21、31日是的6：30执行一次ls命令"><a href="#意思是每月的1、11、21、31日是的6：30执行一次ls命令" class="headerlink" title="意思是每月的1、11、21、31日是的6：30执行一次ls命令"></a>意思是每月的1、11、21、31日是的6：30执行一次ls命令</h2><pre class=" language-bash"><code class="language-bash">30 6 */10 * * <span class="token function">ls</span>  </code></pre><h1 id="deepin开机自启"><a href="#deepin开机自启" class="headerlink" title="deepin开机自启"></a>deepin开机自启</h1><p><a href="https://jingyan.baidu.com/article/d169e1866e2b6c436711d840.html" target="_blank" rel="noopener">点击此处查看链接</a></p><p>在一处创建xx.sh命令后，里面写上命令</p><p>进入~/.config/autostart</p><p>创建一个文件叫start.desktop</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>Desktop Entry<span class="token punctuation">]</span>Type<span class="token operator">=</span>ApplicationExec<span class="token operator">=</span>/home/lhq/start.sh</code></pre><h2 id="PS-再用sudo-chmod-x-start-desktop权限和start-sh的权限即可"><a href="#PS-再用sudo-chmod-x-start-desktop权限和start-sh的权限即可" class="headerlink" title="PS:再用sudo chmod +x start.desktop权限和start.sh的权限即可"></a>PS:再用sudo chmod +x start.desktop权限和start.sh的权限即可</h2><h1 id="deepin-linux-打开ssh服务"><a href="#deepin-linux-打开ssh服务" class="headerlink" title="deepin linux 打开ssh服务"></a>deepin linux 打开ssh服务</h1><pre><code>首先，更新一下软件源，打开&quot;终端窗口&quot;，输入&quot;sudo apt-get update&quot;--&gt;回车--&gt;&quot;输入当前登录用户的管理员密码&quot;--&gt;回车,就可以了。然后，在终端中，输入&quot;sudo apt-get install openssh-server&quot;--&gt;回车--&gt;输入&quot;y&quot;--回车--&gt;安装完成即可。安装完成，验证一下是否安装成功，执行如下命令查看一下sshd的进程　sudo ps -e |grep ssh确认说明ssh服务已经启动。也可以查看sshd服务的端口号，默认端口号为22netstat -an|head -5确认网络已经打开能访问互联网即可随后可以使用winscp远程登录</code></pre><h2 id="Screen"><a href="#Screen" class="headerlink" title="Screen"></a>Screen</h2><p>打开会话<br>安装yum insyall screen</p><p>新开一个会话</p><pre class=" language-bash"><code class="language-bash"><span class="token function">screen</span> -S xxx</code></pre><p>查看当前会话</p><pre class=" language-bash"><code class="language-bash"><span class="token function">screen</span> -ls</code></pre><p>进入一个会话</p><pre class=" language-bash"><code class="language-bash"><span class="token function">screen</span> -rx xxx</code></pre><h1 id="端口开放和关闭"><a href="#端口开放和关闭" class="headerlink" title="端口开放和关闭"></a>端口开放和关闭</h1><h2 id="开端口"><a href="#开端口" class="headerlink" title="开端口"></a>开端口</h2><pre class=" language-bash"><code class="language-bash">iptables -A INPUT -ptcp --dport  8099 -j ACCEPT</code></pre><h2 id="关端口"><a href="#关端口" class="headerlink" title="关端口"></a>关端口</h2><pre class=" language-bash"><code class="language-bash">iptables -A OUTPUT -p tcp --dport 端口号-j DROP</code></pre><h2 id="保存设置"><a href="#保存设置" class="headerlink" title="保存设置"></a>保存设置</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> iptables save 保存设置</code></pre><p>以下是linux打开端口命令的使用方法。 </p><p>nc -lp 23 &amp;(打开23端口，即telnet)<br>netstat -an | grep 23 (查看是否打开23端口) </p><h2 id="普通用户可以访问root目录"><a href="#普通用户可以访问root目录" class="headerlink" title="普通用户可以访问root目录"></a>普通用户可以访问root目录</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span>输入密码后<span class="token function">sudo</span> <span class="token function">chmod</span> 777 /root  <span class="token comment" spellcheck="true">#暴力</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库基本操作学习记录</title>
      <link href="/2019/12/31/mysql-shu-ju-ku-ji-ben-cao-zuo-xue-xi-ji-lu/"/>
      <url>/2019/12/31/mysql-shu-ju-ku-ji-ben-cao-zuo-xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h1><p>安装mysql很简单，这里不多赘述了，网上很多教程。<br><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">mysql下载地址</a><br><a href="https://gitee.com/anlen123/wenjian/blob/master/HeidiSQL_10.3_64_Portable.zip" target="_blank" rel="noopener">图形界面工具(gitee)</a><br><a href="https://github.com/anlen123/wenjian/blob/master/HeidiSQL_10.3_64_Portable.zip" target="_blank" rel="noopener">图形界面工具(github)</a><br><a href="https://www.bilibili.com/video/av48488984/" target="_blank" rel="noopener">视频教程</a><br><a href="https://blog.jkdev.cn/index.php/archives/176/" target="_blank" rel="noopener">文章</a></p><h1 id="开启mysql"><a href="#开启mysql" class="headerlink" title="开启mysql"></a>开启mysql</h1><p>win+R<br>开启：net start mysql<br>关闭：net stop mysql</p><h1 id="mysql一些简单操作"><a href="#mysql一些简单操作" class="headerlink" title="mysql一些简单操作"></a>mysql一些简单操作</h1><h2 id="显示当前数据库-show-databases"><a href="#显示当前数据库-show-databases" class="headerlink" title="显示当前数据库 show databases;"></a>显示当前数据库 show databases;</h2><p><img src="/2019/12/31/mysql-shu-ju-ku-ji-ben-cao-zuo-xue-xi-ji-lu/1.jpg" alt></p><h2 id="使用一个数据库-use-test"><a href="#使用一个数据库-use-test" class="headerlink" title="使用一个数据库 use test;"></a>使用一个数据库 use test;</h2><p><img src="/2019/12/31/mysql-shu-ju-ku-ji-ben-cao-zuo-xue-xi-ji-lu/2.jpg" alt></p><h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><p>– 修改表名<br>rename table old_table to new_table;</p><p>– 或者<br>alter table old_table rename as new_table;</p><p>– 修改列名称<br>alter table table_name<br>change column old_name new_name varchar(255);</p><p>– 修改字段类型<br>alter table table_name<br>modify column column_name varchar(255) default ‘’ COMMENT ‘注释’;</p><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p>insert into score (name,score) values(‘小明’,’80’);</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>drop table tb;<br>drop 是直接将表格删除，无法找回。例如删除 user 表：<br>drop table user;<br>truncate （table） tb;<br>truncate 是删除表中所有数据，但不能与where一起使用；<br>TRUNCATE TABLE user;<br>delete from tb (where);<br>delete 也是删除表中数据，但可以与where连用，删除特定行；<br>— 删除表中所有数据<br>delete from user;<br>— 删除指定行<br>delete from user where username =’Tom’;</p><p>delete from score where score = 80;</p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>select * from score  where name like ‘%刘%’; </p><h2 id="python-连接mysql"><a href="#python-连接mysql" class="headerlink" title="python 连接mysql"></a>python 连接mysql</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token keyword">from</span> pymysql<span class="token punctuation">.</span>cursors <span class="token keyword">import</span> DictCursor<span class="token comment" spellcheck="true"># 创建数据库连接  localhost等效于127.0.0.1</span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>passwd<span class="token operator">=</span><span class="token string">"123456"</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 建立游标，指定游标类型，返回字典</span>cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span>DictCursor<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 操作语句，只查询前两行</span><span class="token keyword">try</span><span class="token punctuation">:</span>    sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""select download_url from urls where file_name like '%cat%' limit 20;"""</span>    <span class="token comment" spellcheck="true"># 执行sql语句</span>    cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取查询的所有结果</span>    res <span class="token operator">=</span> cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印结果</span>    <span class="token comment" spellcheck="true"># print(res)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"xxx.md"</span><span class="token punctuation">,</span><span class="token string">"a+"</span> <span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> res<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print(x['download_url'])</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>f<span class="token string">"![]({x['download_url']})\n"</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"操作失败"</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 关闭游标</span>    cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 关闭连接</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>PS :以后一些操作会记录。<br>23333</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim的自我修养</title>
      <link href="/2019/10/31/vim-de-zi-wo-xiu-yang/"/>
      <url>/2019/10/31/vim-de-zi-wo-xiu-yang/</url>
      
        <content type="html"><![CDATA[<h1 id="更新vim8"><a href="#更新vim8" class="headerlink" title="更新vim8"></a>更新vim8</h1><p><img src="https://blog.csdn.net/qq_37903963/article/details/99683590" alt></p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/vim/vim/archive/v8.1.1766.tar.gz<span class="token function">tar</span> -zxvf  v8.1.1766.tar.gz<span class="token function">cd</span> vim-8.1.1766/./configure --prefix<span class="token operator">=</span>/usr/local<span class="token operator">&amp;&amp;</span><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span class="token function">alias</span> vim<span class="token operator">=</span><span class="token string">'/usr/local/bin/vim'</span><span class="token keyword">echo</span> <span class="token string">"alias vim='/usr/local/bin/vim' "</span> <span class="token operator">>></span> ~/.bashrcvim -version</code></pre><h1 id="vim是什么"><a href="#vim是什么" class="headerlink" title="vim是什么?"></a>vim是什么?</h1><h1 id="为什么用vim"><a href="#为什么用vim" class="headerlink" title="为什么用vim"></a>为什么用vim</h1><h1 id="vim一些简单操作命令"><a href="#vim一些简单操作命令" class="headerlink" title="vim一些简单操作命令"></a>vim一些简单操作命令</h1><p>:x 和:wq 是一摸一样的效果，保存并退出<br>:q 退出<br>:w 保存<br>:q! 强制保存</p><h1 id="vim配置文件"><a href="#vim配置文件" class="headerlink" title="vim配置文件"></a>vim配置文件</h1><p>一般是当前目录下的.vimrc</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何共存python2和python3</title>
      <link href="/2019/10/03/gong-cun-python2-he-python3/"/>
      <url>/2019/10/03/gong-cun-python2-he-python3/</url>
      
        <content type="html"><![CDATA[<p>PS：为什么做这一期博客呢？因为前些天做大数的题的时候需要用到python2我的环境是Python3所有我打算配置一个Python2的环境</p><h1 id="下载python3和python2的安装包程序"><a href="#下载python3和python2的安装包程序" class="headerlink" title="下载python3和python2的安装包程序"></a>下载python3和python2的安装包程序</h1><p>这是python官网自行下载<a href="https://www.python.org/" target="_blank" rel="noopener">点击此处</a></p><h1 id="安装python2和python3的安装程序"><a href="#安装python2和python3的安装程序" class="headerlink" title="安装python2和python3的安装程序"></a>安装python2和python3的安装程序</h1><p>python3安装可以看我之前的博客<a href="https://liuhuaqiang.top/2019/07/28/python%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/">点击跳转</a></p><p>python2安装的时候，一定一定要勾选 添加环境<br><img src="/2019/10/03/gong-cun-python2-he-python3/1.png" alt></p><h1 id="修改名字"><a href="#修改名字" class="headerlink" title="修改名字"></a>修改名字</h1><p>进入python3的安装目录，不知道咋看的<a href="https://liuhuaqiang.top/2019/07/29/%E6%9F%A5%E7%9C%8BPython%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95/">点击这里</a></p><p>下一步修改python.exe为python3.exe</p><p>同理，进入python的安装目录把python.exe改成python2.exe<br><img src="/2019/10/03/gong-cun-python2-he-python3/2.png" alt><br><img src="/2019/10/03/gong-cun-python2-he-python3/3.png" alt></p><p>然后win+r输入python2就会进入python2的版本<br>同理python3</p><h1 id="进入pythoncharm配置"><a href="#进入pythoncharm配置" class="headerlink" title="进入pythoncharm配置"></a>进入pythoncharm配置</h1><p><img src="/2019/10/03/gong-cun-python2-he-python3/4.png" alt><br>把改删的删了，添加，python2和python3的安装目录就行了<br>然后保存设置<br><img src="/2019/10/03/gong-cun-python2-he-python3/5.png" alt><br>随便写一个程序右键运行后，在右上角会有配置文件<br><img src="/2019/10/03/gong-cun-python2-he-python3/6.png" alt><br>如图这里可以选择python2还是python3<br><img src="/2019/10/03/gong-cun-python2-he-python3/7.png" alt><br>至此就完成了<br>PS：对了，右下角的这个是，你语法输入默认是2还是3的，python2在python3下会报错，红色的很不好看<br>PS：对了，右下角的这个是，你语法输入默认是2还是3的，python2在python3下会报错，红色的很不好看<br>PS：对了，右下角的这个是，你语法输入默认是2还是3的，python2在python3下会报错，红色的很不好看<br><img src="/2019/10/03/gong-cun-python2-he-python3/8.png" alt><br>走人</p>]]></content>
      
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP代理池python</title>
      <link href="/2019/08/31/ip-dai-li-chi-python/"/>
      <url>/2019/08/31/ip-dai-li-chi-python/</url>
      
        <content type="html"><![CDATA[<h1 id="IP代理池"><a href="#IP代理池" class="headerlink" title="IP代理池"></a>IP代理池</h1><p>为什么要自己建一个呢，因为啊，你一个ip爬取数据的时候，太快或者多次访问会被屏蔽。所以我们就要隔一段时间换一个ip就行。</p><h1 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h1><p><a href="https://www.xicidaili.com/nn/" target="_blank" rel="noopener">https://www.xicidaili.com/nn/</a> (西刺代理)<br>优点：ip很多很多 。<br>缺点：可用的很少。</p><p><a href="http://www.gatherproxy.com/zh/proxylist/country/?c=China" target="_blank" rel="noopener">http://www.gatherproxy.com/zh/proxylist/country/?c=China</a> （国外的需要vpn）<br>优点：可用性很多。<br>缺点：需要翻墙才行哦。</p><h1 id="步骤（-以西刺代理为例子）"><a href="#步骤（-以西刺代理为例子）" class="headerlink" title="步骤（* 以西刺代理为例子）"></a>步骤（* 以西刺代理为例子）</h1><h2 id="访问以上两个网站并且把ip和端口爬取下来保存到一个列表当中"><a href="#访问以上两个网站并且把ip和端口爬取下来保存到一个列表当中" class="headerlink" title="访问以上两个网站并且把ip和端口爬取下来保存到一个列表当中"></a>访问以上两个网站并且把ip和端口爬取下来保存到一个列表当中</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_ip</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> ip    <span class="token keyword">for</span> xx <span class="token keyword">in</span> range<span class="token punctuation">(</span>z<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        url<span class="token operator">=</span> <span class="token string">'https://www.xicidaili.com/nn/%s'</span><span class="token operator">%</span>str<span class="token punctuation">(</span>xx<span class="token punctuation">)</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers <span class="token operator">=</span> dailichi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        sle <span class="token operator">=</span> parsel<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># guo = sle.xpath('//*[@id="ip_list"]').re(r'&lt;img src=".*?.png" alt="(.*?)">',re.S)</span>        jihe  <span class="token operator">=</span> sle<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="ip_list"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>re<span class="token punctuation">(</span>r<span class="token string">'&lt;td>(.*?)&lt;/td>'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>        ip <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> jihe<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            ip<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        duankou <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> jihe<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            duankou<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ip<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ip<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span>duankou<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------------------------'</span><span class="token punctuation">)</span></code></pre><p>这里把它爬到了ip这个全局变量里面</p><h2 id="验证可用性"><a href="#验证可用性" class="headerlink" title="验证可用性"></a>验证可用性</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">yanzheng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span>  ip    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        gg<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            gg<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        ip_chi <span class="token operator">=</span> ip<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        gg<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        proxies <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token string">"http://"</span> <span class="token operator">+</span> ip_chi<span class="token punctuation">,</span>            <span class="token string">"https"</span><span class="token punctuation">:</span> <span class="token string">"http://"</span> <span class="token operator">+</span> ip_chi<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxies<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(ip_chi)</span>            file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'可用ip.txt'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>            file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>ip_chi<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>            file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print('yes')</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print('no')</span>            <span class="token keyword">pass</span></code></pre><p>这里我爬取ip是单线程（别问我为什么不用多线程，容易被封）,验证的时候就不存在了，直接多线程验证，快点，然后，把可用ip保存到一个txt文档里面</p><h2 id="使用可用ip代理访问网址"><a href="#使用可用ip代理访问网址" class="headerlink" title="使用可用ip代理访问网址"></a>使用可用ip代理访问网址</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">requests_get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># url = 'https://www.doutula.com/photo/list/?page=1'</span>    <span class="token keyword">import</span> requests    file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'可用ip.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>    txt <span class="token operator">=</span> file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> ip <span class="token keyword">in</span> txt<span class="token punctuation">:</span>        proxies <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token string">"http://%s"</span><span class="token operator">%</span>str<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"https"</span><span class="token punctuation">:</span> <span class="token string">"http://%s"</span><span class="token operator">%</span>str<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>proxies<span class="token operator">=</span> proxies<span class="token punctuation">,</span>timeout <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(response.text)</span>            <span class="token keyword">return</span> response            <span class="token comment" spellcheck="true"># break</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span></code></pre><p>读取可用ip进行requests请求就完事了</p><p>完整代码</p><pre class=" language-py"><code class="language-py">import requestsimport parselimport reimport randomimport timeimport threadingimport osip=[]gg = threading.Lock()def dailichi():    daili = [        'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36',        'Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; WOW64; Trident/4.0; SLCC1)',        'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; WOW64; Trident/4.0; SLCC1)',        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1',        'Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1',        'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71',        'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)',        'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)',        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11'    ]    dai = random.choice(daili)    # print(dai)    head  ={        'User-Agent':'%s'% dai    }    return headdef get_ip(z,y):    global ip    for xx in range(z,y+1):        url= 'https://www.xicidaili.com/nn/%s'%str(xx)        response = requests.get(url,headers = dailichi())        sle = parsel.Selector(response.text)        # guo = sle.xpath('//*[@id="ip_list"]').re(r'<img src=".*?.png" alt="(.*?)">',re.S)        jihe  = sle.xpath('//*[@id="ip_list"]').re(r'<td>(.*?)</td>',re.S)        ip = []        for x in jihe[::5]:            ip.append(x)        duankou = []        for x in jihe[1::5]:            duankou.append(x)        for x in range(0, len(ip), 1):            ip.append(ip[x]+':'+duankou[x])        time.sleep(random.randint(1,4))        print('-------------------------')def yanzheng():    global  ip    while True:        gg.acquire()        if len(ip)==0:            gg.release()            break        ip_chi = ip.pop()        gg.release()        proxies = {            "http": "http://" + ip_chi,            "https": "http://" + ip_chi,        }        try:            req = requests.get('https://www.baidu.com', proxies=proxies, timeout=3)            # print(ip_chi)            file = open('可用ip.txt','a')            file.write(ip_chi+'\n')            file.close()            # print('yes')        except:            # print('no')            passdef requests_get(url):    # url = 'https://www.doutula.com/photo/list/?page=1'    import requests    file = open('可用ip.txt','r')    txt = file.read().split('\n')    file.close()    for ip in txt:        proxies = {            "http": "http://%s"%str(ip),            "https": "http://%s"%str(ip),        }        try:            response = requests.get(url,proxies= proxies,timeout = 5)            # print(response.text)            return response            # break        except:            passdef get_ipchi():    if os.path.exists('可用ip.txt'):        os.remove('可用ip.txt')    get_ip(1,1)    for x in range(20):        threading.Thread(target=yanzheng).start()    while   len(threading.enumerate())>1:        passget_ipchi()# 以上会爬取可用ip并且保存到（可用ip.txt）这个文件里这里访问百度为例子直接调用之前写的requests_url函数response = requests_url("https://www.baidu.com")print(response.text)print(response.status.code)# 是完全没问题的</code></pre><p>国外的ip池，代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> parsel<span class="token keyword">import</span> re<span class="token keyword">import</span> random<span class="token keyword">import</span> time<span class="token keyword">import</span> threading<span class="token keyword">import</span> osip<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>gg <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dailichi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    daili <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36'</span><span class="token punctuation">,</span>        <span class="token string">'Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; WOW64; Trident/4.0; SLCC1)'</span><span class="token punctuation">,</span>        <span class="token string">'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; WOW64; Trident/4.0; SLCC1)'</span><span class="token punctuation">,</span>        <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1'</span><span class="token punctuation">,</span>        <span class="token string">'Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1'</span><span class="token punctuation">,</span>        <span class="token string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71'</span><span class="token punctuation">,</span>        <span class="token string">'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)'</span><span class="token punctuation">,</span>        <span class="token string">'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)'</span><span class="token punctuation">,</span>        <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11'</span>    <span class="token punctuation">]</span>    dai <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>daili<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(dai)</span>    head  <span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'%s'</span><span class="token operator">%</span> dai    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token keyword">def</span> <span class="token function">get_ip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> ip    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.gatherproxy.com/zh/proxylist/country/?c=China'</span><span class="token punctuation">,</span>headers <span class="token operator">=</span> dailichi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(response.text)</span>    sle <span class="token operator">=</span> parsel<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    ipp <span class="token operator">=</span> sle<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="tblproxy"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>re<span class="token punctuation">(</span><span class="token string">'"PROXY_IP":"(.*?)"'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(sle.xpath('//*[@id="tblproxy"]').getall())</span>    duankou_16 <span class="token operator">=</span> sle<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="tblproxy"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>re<span class="token punctuation">(</span><span class="token string">'"PROXY_PORT":"(.*?)"'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(ipp)</span>    <span class="token comment" spellcheck="true"># print(len(ipp))</span>    duankou<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> duankou_16<span class="token punctuation">:</span>        duankou<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>int<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(duankou)</span>    <span class="token comment" spellcheck="true"># print(len(duankou))</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> zip<span class="token punctuation">(</span>ipp<span class="token punctuation">,</span>duankou<span class="token punctuation">)</span><span class="token punctuation">:</span>        ip<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">yanzheng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span>  ip    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        gg<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            gg<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        ip_chi <span class="token operator">=</span> ip<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        gg<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        proxies <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token string">"http://"</span> <span class="token operator">+</span> ip_chi<span class="token punctuation">,</span>            <span class="token string">"https"</span><span class="token punctuation">:</span> <span class="token string">"http://"</span> <span class="token operator">+</span> ip_chi<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://mcheika.com/'</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxies<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(ip_chi)</span>            file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'可用ip.txt'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>            file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>ip_chi<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>            file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print('yes')</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print('no')</span>            <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">requests_get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># url = 'https://www.doutula.com/photo/list/?page=1'</span>    <span class="token keyword">import</span> requests    file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'可用ip.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>    txt <span class="token operator">=</span> file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> ip <span class="token keyword">in</span> txt<span class="token punctuation">:</span>        proxies <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token string">"http://%s"</span><span class="token operator">%</span>str<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"https"</span><span class="token punctuation">:</span> <span class="token string">"http://%s"</span><span class="token operator">%</span>str<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>proxies<span class="token operator">=</span> proxies<span class="token punctuation">,</span>timeout <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(response.text)</span>            <span class="token comment" spellcheck="true"># return response</span>            <span class="token keyword">return</span>            <span class="token comment" spellcheck="true"># pass</span>            <span class="token comment" spellcheck="true"># break</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">get_ipchi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'可用ip.txt'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'可用ip.txt'</span><span class="token punctuation">)</span>    get_ip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>yanzheng<span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span>   len<span class="token punctuation">(</span>threading<span class="token punctuation">.</span>enumerate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>get_ipchi<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="再见，爱你们。"><a href="#再见，爱你们。" class="headerlink" title="再见，爱你们。"></a>再见，爱你们。</h1>]]></content>
      
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python简单多线程学习笔记</title>
      <link href="/2019/08/30/python-jian-dan-duo-xian-cheng-xue-xi-bi-ji/"/>
      <url>/2019/08/30/python-jian-dan-duo-xian-cheng-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程原理"><a href="#多线程原理" class="headerlink" title="多线程原理"></a>多线程原理</h1><p>多线程（英语：multithreading），是指从软件或者硬件上实现多个线程并发执行的技术。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多于一个线程，进而提升整体处理性能。具有这种能力的系统包括对称多处理机、多核心处理器以及芯片级多处理（Chip-level multithreading）或同时多线程（Simultaneous multithreading）处理器。[1] 在一个程序中，这些独立运行的程序片段叫作“线程”（Thread），利用它编程的概念就叫作“多线程处理（Multithreading）”。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多于一个线程（台湾译作“执行绪”），进而提升整体处理性能。</p><p>额！！！算了算了，直接讲代码吧</p><h1 id="多线程用法"><a href="#多线程用法" class="headerlink" title="多线程用法"></a>多线程用法</h1><p>首先导入threading库，这是python自带的库，不需要pip安装就可以使用的，最常用的有两个方法，</p><ul><li>第一是threading.Thread(target=你的要调用的函数(注意：函数后面不加括号),args={x1,x2})<br>target后面是你用多线程跑的函数，args后面是你的函数的参数，注意了，这个里面是元组，就算是一个元素也要加逗号，这是基础了。</li><li>第二个是threading.Lock(),这是多线程的锁，当你不加锁的时候，你两个线程，操作同一个全局变量的话，会发生，资源竞争的情况，比如说，我定义一个全局资源num=0，现在你定义一个函数是加10000的，第二个函数也是加10000，如果不加锁的情况下，他们会竞争资源，num的值会发生错误的变化，比如变成10054，然后又变成10004，还会变小，如果加锁的情况，最终的结果是20000</li></ul><h1 id="多线程的运行"><a href="#多线程的运行" class="headerlink" title="多线程的运行"></a>多线程的运行</h1><p>我在学这个的时候遇见了一个bug，就是在requests后面加了操作后，会导致最后的结果没变，也就是说，它不是从上往下依次操作的，<br><img src="/2019/08/30/python-jian-dan-duo-xian-cheng-xue-xi-bi-ji/1.png" alt><br>我现在加上一个requests看看哈，<br><img src="/2019/08/30/python-jian-dan-duo-xian-cheng-xue-xi-bi-ji/2.png" alt><br>奇怪吧，那我再加一个延时，<br><img src="/2019/08/30/python-jian-dan-duo-xian-cheng-xue-xi-bi-ji/3.png" alt><br>看出来什么规律没有，就是，不是从上至下，先进入了线程运行，没等它允许完，就开始进入下一个了，这就是多线程快的原因。以上，都说明了，对全局变量进行操作的时候，都是不安全的，所以要加锁，<br>我这里写了一个很简单的生产者消费者模型就是最简单的多线程运算了</p><pre><code>import threadingimport requestsimport parselimport osimport timeimport reimport randomdef dailichi():    daili = [        &#39;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36&#39;,        &#39;Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; WOW64; Trident/4.0; SLCC1)&#39;,        &#39;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; WOW64; Trident/4.0; SLCC1)&#39;,        &#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&#39;,        &#39;Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&#39;,        &#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71&#39;,        &#39;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)&#39;,        &#39;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)&#39;,        &#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&#39;    ]    dai = random.choice(daili)    # print(dai)    head  ={        &#39;User-Agent&#39;:&#39;%s&#39;% dai    }    return headname = []  #这里有三个全局变量img=[]page_url = []lock = threading.Lock()   #这个是锁if not os.path.exists(&#39;豆瓣&#39;):    os.mkdir(&#39;豆瓣&#39;)def download_img(url,name):    from  urllib.request import urlretrieve    urlretrieve(url,&#39;豆瓣&#39;+&#39;/&#39;+&#39;%s.jpg&#39;%name)def shengchanzhe():     #生产者，产出，它的下载链接，但是保存进一个列表里面，不下载    global img    global name    while True:        lock.acquire()        if len(page_url)==0:            lock.release()            break        url = page_url.pop()        lock.release()        response = requests.get(url,headers = dailichi())        sle = parsel.Selector(response.text)        name_title=(sle.xpath(&#39;//*[@id=&quot;content&quot;]/div/div[1]/ol&#39;).re(r&#39;&lt;img width=&quot;100&quot; alt=&quot;(.*?)&quot; src=&quot;.*?&quot; class=&quot;&quot;&gt;&#39;,re.S))        for x in name_title:            name.append(x)        img_url=sle.xpath(&#39;//*[@id=&quot;content&quot;]/div/div[1]/ol&#39;).re(r&#39;&lt;img width=&quot;100&quot; alt=&quot;.*?&quot; src=&quot;(.*?)&quot; class=&quot;&quot;&gt;&#39;)        for x in img_url:            img.append(x)def xiaofeizhe(): #对上面生产者保存的列表进行逐个取值，并进行下载    while True:        lock.acquire()        if len(img)==0 and len(name)==0:            lock.release()            break        url = img.pop()        title = name.pop()        lock.release()        req = requests.get(url)        with open(&#39;豆瓣&#39;+&#39;/&#39;+&#39;%s.jpg&#39;%title,&#39;wb&#39;)as f:            f.write(req.content)def page_url_get():    global page_url    for xx in range(0,246,25):        url = &#39;https://movie.douban.com/top250?start=%s&amp;filter=&#39;%str(xx)        page_url.append(url)if __name__ == &#39;__main__&#39;:    t2 = time.time()    page_url_get()    for num in range(10): #这里是10 是线程数，可以自定义设置的        t = threading.Thread(target=shengchanzhe)        t.start()    time.sleep(1)    for num in range(10):        t= threading.Thread(target=xiaofeizhe)        t.start()    time.sleep(1)    while len(threading.enumerate())&gt;1:        pass    t1 = time.time()    print(t1-t2)</code></pre><p>看了这个模型应该更好理解多线程了。<br>这里用pop就是取出一个后就进行删除，多线程，不对多个数据进行重复操作。</p><p>哎呀，总之就是这种格式</p><pre><code>定义一个锁定义全局变量定义函数：    while Trur:        上锁        if 全局变量==0:            释放锁            break        取全局变量里面的值，        释放锁        下面进行操作for x in range(n) #n是线程数    threading.Thread(函数).start</code></pre><p>再见</p>]]></content>
      
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python环境安装教程</title>
      <link href="/2019/08/28/python-huan-jing-an-zhuang/"/>
      <url>/2019/08/28/python-huan-jing-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>大家好，这里是未闻丶死讯</p><h1 id="python安装"><a href="#python安装" class="headerlink" title="python安装"></a>python安装</h1><p> python官网：<a href="https://www.python.org/" target="_blank" rel="noopener">点击此处</a> <a href="https://pan.baidu.com/s/1S7FgxHRQCmGYVgxPHsIjlQ" target="_blank" rel="noopener">百度云</a> <strong>提取码2333</strong><br><strong>注意</strong>：安装的时候有个path环境一起安装，勾选上。<br><img src="/2019/08/28/python-huan-jing-an-zhuang/6.png" alt></p><h1 id="anaconda安装"><a href="#anaconda安装" class="headerlink" title="anaconda安装"></a>anaconda安装</h1><p> anaconda包含了所有的python环境<br>下载安装即可，一直点下一步。<br> Anaconda(windows&amp;mac&amp;linux) :<a href="https://www.anaconda.com/distribution/#download-section" target="_blank" rel="noopener">点击此处下载</a> <a href="https://pan.baidu.com/s/1kG45zBigzNHmQCBIVw7DLg" target="_blank" rel="noopener">百度云</a><strong>提取码2333</strong></p><h1 id="安装pycharm"><a href="#安装pycharm" class="headerlink" title="安装pycharm"></a>安装pycharm</h1><p> pycharm:<a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">点击此处</a> <a href="https://pan.baidu.com/s/11YAcY7Xz7oe3ITw2dp1qMQ" target="_blank" rel="noopener">百度云</a> <strong>提取码2333</strong></p><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><h4 id="右击桌面上的我的电脑-点击属性"><a href="#右击桌面上的我的电脑-点击属性" class="headerlink" title="右击桌面上的我的电脑 点击属性"></a>右击桌面上的我的电脑 点击属性</h4><p><img src="/2019/08/28/python-huan-jing-an-zhuang/1.png" alt></p><h4 id="点击高级设置"><a href="#点击高级设置" class="headerlink" title="点击高级设置"></a>点击高级设置</h4><p><img src="/2019/08/28/python-huan-jing-an-zhuang/2.png" alt></p><h4 id="点击环境变量"><a href="#点击环境变量" class="headerlink" title="点击环境变量"></a>点击环境变量</h4><p><img src="/2019/08/28/python-huan-jing-an-zhuang/3.png" alt></p><h4 id="点击下面的Path"><a href="#点击下面的Path" class="headerlink" title="点击下面的Path"></a>点击下面的Path</h4><p><img src="/2019/08/28/python-huan-jing-an-zhuang/4.png" alt></p><h4 id="点击新建-把你的python目录粘贴进去-如何查看python的安装目录"><a href="#点击新建-把你的python目录粘贴进去-如何查看python的安装目录" class="headerlink" title="点击新建,把你的python目录粘贴进去 如何查看python的安装目录"></a>点击新建,把你的python目录粘贴进去 <a href="www.baidu.com">如何查看python的安装目录</a></h4><p><img src="/2019/08/28/python-huan-jing-an-zhuang/5.png" alt></p><h1 id="OK了，可以重启一下电脑，然后呢，可以打开pythoncharm自由的写python代码了"><a href="#OK了，可以重启一下电脑，然后呢，可以打开pythoncharm自由的写python代码了" class="headerlink" title="OK了，可以重启一下电脑，然后呢，可以打开pythoncharm自由的写python代码了"></a>OK了，可以重启一下电脑，然后呢，可以打开pythoncharm自由的写python代码了</h1><h1 id="对了，哔哩哔哩关注一下啊，未闻丶死讯23333"><a href="#对了，哔哩哔哩关注一下啊，未闻丶死讯23333" class="headerlink" title="对了，哔哩哔哩关注一下啊，未闻丶死讯23333"></a>对了，哔哩哔哩关注一下啊，未闻丶死讯23333</h1>]]></content>
      
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超简单的github管理(萌新的见解)</title>
      <link href="/2019/08/23/chao-jian-dan-de-github-guan-li-meng-xin-de-jian-jie/"/>
      <url>/2019/08/23/chao-jian-dan-de-github-guan-li-meng-xin-de-jian-jie/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/anlen123/phtoto/blob/master/%E7%8C%AB%E7%B2%AE/(76354679)%F0%9F%A6%8A%F0%9F%90%B0%F0%9F%90%B1%E2%9D%A4.jpg" alt></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大家好，我是刚刚学git不久的萌新，以前用c++，现在在用python，就在今天，我突然发现，pycharm上面居然有git管理工具，而且我一用，卧槽，真的好用，不需要记录，你对文件进行了什么什么操作，不需要git add xxx 或者是 git rm xxx 再git commit -m “xxx”再git push这些指令了，我简直就像找到了新大陆，我就想，肯定有这种有界面的git管理工具的，我上网<br>搜了一下，果然发现了一个神器GitKraken这款工具，就具备了上面的所有功能，而且，真的，一个代码都不用写，超简单，那么现在我们就开始吧！！！</p><h1 id="git下载和github注册（准备工作）"><a href="#git下载和github注册（准备工作）" class="headerlink" title="git下载和github注册（准备工作）"></a>git下载和github注册（准备工作）</h1><p>如果前两个工作还没有做完，到<a href="https://liuhuaqiang.top/2019/08/13/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%EF%BC%88%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%8F%8A%E4%B8%8A%E4%BC%A0%E8%BF%9C%E7%A8%8BGithub%E4%BB%93%E5%BA%93%EF%BC%89/">这里</a>查看教程,还需要，把你电脑的ssh上传到github的密匙上，教程很详细了。</p><h1 id="GitKraken下载"><a href="#GitKraken下载" class="headerlink" title="GitKraken下载"></a>GitKraken下载</h1><p>GitKraken官网是<a href="https://www.gitkraken.com/" target="_blank" rel="noopener">这里</a><br>如图：<br><img src="/2019/08/23/chao-jian-dan-de-github-guan-li-meng-xin-de-jian-jie/1.png" alt><br>可能有些人没有富强（vpn）的下载速度慢到令人发指，<br>有两个方案，到我的群里教你啊，哈哈哈哈！！！<br>我这里给你们准备了百度云的<a href="https://pan.baidu.com/s/1tO5Cgx_3gVer_Wu69GMgig" target="_blank" rel="noopener">链接</a>提取码:dmsr<br>安装，登陆你的github账号</p><h1 id="新建一个仓库"><a href="#新建一个仓库" class="headerlink" title="新建一个仓库"></a>新建一个仓库</h1><p>你可以在GitKraken这个软件上创建，当然，到网页上创建仓库也可以，<br>如图：<br><img src="/2019/08/23/chao-jian-dan-de-github-guan-li-meng-xin-de-jian-jie/2.png" alt><br>创建好后是这样的:<br><img src="/2019/08/23/chao-jian-dan-de-github-guan-li-meng-xin-de-jian-jie/3.png" alt><br>我这里创建了一个love的仓库</p><h1 id="克隆仓库到本地-创建本地仓库并连接到云端仓库"><a href="#克隆仓库到本地-创建本地仓库并连接到云端仓库" class="headerlink" title="克隆仓库到本地(创建本地仓库并连接到云端仓库)"></a>克隆仓库到本地(创建本地仓库并连接到云端仓库)</h1><p>首先，打开软件，界面是这样的：<br><img src="/2019/08/23/chao-jian-dan-de-github-guan-li-meng-xin-de-jian-jie/4.png" alt><br>我们点击Clone a repo，打开后是这样的<br><img src="/2019/08/23/chao-jian-dan-de-github-guan-li-meng-xin-de-jian-jie/5.png" alt><br>这里选择Clone -&gt; Github.com<br>Where to clone to 这里填你的本地仓库的地址<br>Repository to clone 这里填你要连接的仓库</p><p>如图：<br><img src="/2019/08/23/chao-jian-dan-de-github-guan-li-meng-xin-de-jian-jie/6.png" alt><br>然后点击右下角的Clone the repo!</p><p><img src="/2019/08/23/chao-jian-dan-de-github-guan-li-meng-xin-de-jian-jie/7.png" alt><br><img src="/2019/08/23/chao-jian-dan-de-github-guan-li-meng-xin-de-jian-jie/8.png" alt><br>一路上他会问你，是否打开，选择打开，是否初始化本地仓库，是的，<br>一路点击即可<br>然后你就会看见这样的画面：</p><p><img src="/2019/08/23/chao-jian-dan-de-github-guan-li-meng-xin-de-jian-jie/9.png" alt></p><h1 id="添加文件，修改文件，删除文件测试"><a href="#添加文件，修改文件，删除文件测试" class="headerlink" title="添加文件，修改文件，删除文件测试"></a>添加文件，修改文件，删除文件测试</h1><p>完成了上面的步骤，就已经完成了，让我们来测试一下，<br><img src="/2019/08/23/chao-jian-dan-de-github-guan-li-meng-xin-de-jian-jie/10.png" alt><br>我这里添加了一个123.txt然后里面的内容是<a href="https://space.bilibili.com/32482364" target="_blank" rel="noopener">未闻丶死讯</a>,然后我们提交一下，点击右上角的view<br><img src="/2019/08/23/chao-jian-dan-de-github-guan-li-meng-xin-de-jian-jie/11.png" alt><br>点击Status all changes 他会记录你的所有改变，然后输入你的改变的描述，<br><img src="/2019/08/23/chao-jian-dan-de-github-guan-li-meng-xin-de-jian-jie/12.png" alt><br>这样就算提交成功了<br><img src="/2019/08/23/chao-jian-dan-de-github-guan-li-meng-xin-de-jian-jie/13.png" alt><br>最后一步了，需要同步到远程仓库，点击上面的push即可，如图：<br><img src="/2019/08/23/chao-jian-dan-de-github-guan-li-meng-xin-de-jian-jie/14.png" alt><br>第一次会问你，到哪个分支，额，你一个人用的话，基本用不着这个，直接提交就行了。<br><img src="/2019/08/23/chao-jian-dan-de-github-guan-li-meng-xin-de-jian-jie/15.png" alt><br>然后，左下角，提示，成功了，ok，去仓库看看<br><img src="/2019/08/23/chao-jian-dan-de-github-guan-li-meng-xin-de-jian-jie/16.png" alt></p><p>看，成功了添加了吧。<br><img src="/2019/08/23/chao-jian-dan-de-github-guan-li-meng-xin-de-jian-jie/17.png" alt></p><p>下面我们来改和删试试，</p><p><img src="/2019/08/23/chao-jian-dan-de-github-guan-li-meng-xin-de-jian-jie/18.png" alt></p><p>ok<br><img src="/2019/08/23/chao-jian-dan-de-github-guan-li-meng-xin-de-jian-jie/19.png" alt><br>没问题，好了，谢谢大家的观看，溜了。爱你们！！！<br>PS：千万千万一次性上传100M以上的东西，千万别。<br>PS：千万千万一次性上传100M以上的东西，千万别。<br>PS：千万千万一次性上传100M以上的东西，千万别。<br>PS：千万千万一次性上传100M以上的东西，千万别。<br>PS：千万千万一次性上传100M以上的东西，千万别。<br>PS：千万千万一次性上传100M以上的东西，千万别.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python如何打包成exe文件</title>
      <link href="/2019/08/14/python-ru-he-da-bao-cheng-exe-wen-jian/"/>
      <url>/2019/08/14/python-ru-he-da-bao-cheng-exe-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="怎么打包exe呢"><a href="#怎么打包exe呢" class="headerlink" title="怎么打包exe呢"></a>怎么打包exe呢</h1><h2 id="这一期的问题是，我们写好了程序，该怎么打包成exe文件呢"><a href="#这一期的问题是，我们写好了程序，该怎么打包成exe文件呢" class="headerlink" title="这一期的问题是，我们写好了程序，该怎么打包成exe文件呢"></a>这一期的问题是，我们写好了程序，该怎么打包成exe文件呢</h2><p>当然是用pyinstaller 辣！！！！</p><h1 id="第一步，安装pyinstaller"><a href="#第一步，安装pyinstaller" class="headerlink" title="第一步，安装pyinstaller"></a>第一步，安装pyinstaller</h1><p>打开cmd </p><pre class=" language-python"><code class="language-python">pip installer pyinstaller </code></pre><p>搞定了。</p><p>如果有小伙伴安装不了的，可以升级一下pip再安装，</p><pre class=" language-python"><code class="language-python">python <span class="token operator">-</span>m pip  install <span class="token operator">-</span><span class="token operator">-</span>upgrade pip</code></pre><p>一条语句<br>什么？？还安装不了。额，去官网下载pyinstaller 离线包，手动安装<br><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">下载地址</a><br>ctrl+f 搜索pyinstaller<br><img src="/2019/08/14/python-ru-he-da-bao-cheng-exe-wen-jian/1.png" alt></p><p>然后输入，pip installer xxxxxxx<br>xxxxx 是你刚刚下载下来的文件的路径</p><h1 id="第二步，打包"><a href="#第二步，打包" class="headerlink" title="第二步，打包"></a>第二步，打包</h1><p>输入命令</p><pre class=" language-python"><code class="language-python">pyinstaller <span class="token operator">-</span>F xxxxxx <span class="token punctuation">(</span>有界面打包<span class="token punctuation">)</span>pyinstaller <span class="token operator">-</span>F <span class="token operator">-</span>w xxxxx <span class="token punctuation">(</span>无界面打包<span class="token punctuation">)</span></code></pre><p>xxxx 为你要打包的py文件</p><p>欧克 完成了，在那个文件目录下面的dist 文件夹里，可以找到exe文件，告辞！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的基本用法（创建本地仓库及上传远程Github仓库）</title>
      <link href="/2019/08/13/git-de-ji-ben-yong-fa-chuang-jian-ben-di-cang-ku-ji-shang-chuan-yuan-cheng-github-cang-ku/"/>
      <url>/2019/08/13/git-de-ji-ben-yong-fa-chuang-jian-ben-di-cang-ku-ji-shang-chuan-yuan-cheng-github-cang-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="大家好，我又来分享学习git的心得了，才学会，大佬勿喷"><a href="#大家好，我又来分享学习git的心得了，才学会，大佬勿喷" class="headerlink" title="大家好，我又来分享学习git的心得了，才学会，大佬勿喷"></a>大家好，我又来分享学习git的心得了，才学会，大佬勿喷</h1><h3 id="为什么要学习git-–简单来说就是，一个团队很多人一起完成某项目，一起管理，方便，而且，换了电脑，可以直接对项目接着进行操作。"><a href="#为什么要学习git-–简单来说就是，一个团队很多人一起完成某项目，一起管理，方便，而且，换了电脑，可以直接对项目接着进行操作。" class="headerlink" title="为什么要学习git –简单来说就是，一个团队很多人一起完成某项目，一起管理，方便，而且，换了电脑，可以直接对项目接着进行操作。"></a>为什么要学习git –简单来说就是，一个团队很多人一起完成某项目，一起管理，方便，而且，换了电脑，可以直接对项目接着进行操作。</h3><p>废话不多说，开始吧。</p><h1 id="注册一个github账号点击"><a href="#注册一个github账号点击" class="headerlink" title="注册一个github账号点击"></a>注册一个github账号<a href="https://github.com/" target="_blank" rel="noopener">点击</a></h1><h3 id="太简单了，不用我说了。"><a href="#太简单了，不用我说了。" class="headerlink" title="太简单了，不用我说了。"></a>太简单了，不用我说了。</h3><h1 id="第二步，下载git这个软件（系统）下载地址"><a href="#第二步，下载git这个软件（系统）下载地址" class="headerlink" title="第二步，下载git这个软件（系统）下载地址"></a>第二步，下载git这个软件（系统）<a href="https://git-scm.com/" target="_blank" rel="noopener">下载地址</a></h1><h3 id="安装就行，很简单。"><a href="#安装就行，很简单。" class="headerlink" title="安装就行，很简单。"></a>安装就行，很简单。</h3><h1 id="第三步，电脑连接你的ssh密匙"><a href="#第三步，电脑连接你的ssh密匙" class="headerlink" title="第三步，电脑连接你的ssh密匙"></a>第三步，电脑连接你的ssh密匙</h1><h3 id="打开-git-bash-输入"><a href="#打开-git-bash-输入" class="headerlink" title="打开 git bash 输入"></a>打开 git bash 输入</h3><p>生成秘钥：ssh-keygen -t rsa -C “<a href="mailto:xxxxxxx@qq.com" target="_blank" rel="noopener">xxxxxxx@qq.com</a>“ ，直接Enter就行，然后会提示输入密码(可输可不输)<br>说明：命令中的email，就是gitlab中的账号，需要保持一致</p><p>会出现这样就说明产生成功了<br><img src="/2019/08/13/git-de-ji-ben-yong-fa-chuang-jian-ben-di-cang-ku-ji-shang-chuan-yuan-cheng-github-cang-ku/1.png" alt></p><p>然后，去你的电脑用户下，找到.shh 文件夹，里面有id_ras(私钥)和id_ras.pub(公钥)</p><p>用记事本打开id_ras.pub,复制所有，(或者输入</p><pre><code>cat ~/.ssh/id_rsa.pub</code></pre><p>)<br><img src="/2019/08/13/git-de-ji-ben-yong-fa-chuang-jian-ben-di-cang-ku-ji-shang-chuan-yuan-cheng-github-cang-ku/4.png" alt></p><p>打开网站github你的设置你如图</p><p><img src="/2019/08/13/git-de-ji-ben-yong-fa-chuang-jian-ben-di-cang-ku-ji-shang-chuan-yuan-cheng-github-cang-ku/2.png" alt></p><p>添加进去</p><p>🆗，这一步完成了</p><h1 id="第四步，创建本地仓库"><a href="#第四步，创建本地仓库" class="headerlink" title="第四步，创建本地仓库"></a>第四步，创建本地仓库</h1><h2 id="新建一个文件夹，在此文件夹下，右键，有个-git-bash"><a href="#新建一个文件夹，在此文件夹下，右键，有个-git-bash" class="headerlink" title="新建一个文件夹，在此文件夹下，右键，有个 git bash"></a>新建一个文件夹，在此文件夹下，右键，有个 git bash</h2><p>如图<br><img src="/2019/08/13/git-de-ji-ben-yong-fa-chuang-jian-ben-di-cang-ku-ji-shang-chuan-yuan-cheng-github-cang-ku/3.png" alt></p><h2 id="首先要配置个人信息，之后再初始化"><a href="#首先要配置个人信息，之后再初始化" class="headerlink" title="首先要配置个人信息，之后再初始化"></a>首先要配置个人信息，之后再初始化</h2><h3 id="直接输入"><a href="#直接输入" class="headerlink" title="直接输入"></a>直接输入</h3><pre><code>git config --global users.name &quot;xxxxx&quot;git config --global users.email &quot;xxxxx&quot;</code></pre><h3 id="用-git-config-–list-可以查看你的配置"><a href="#用-git-config-–list-可以查看你的配置" class="headerlink" title="用 git config –list 可以查看你的配置"></a>用 git config –list 可以查看你的配置</h3><p><img src="/2019/08/13/git-de-ji-ben-yong-fa-chuang-jian-ben-di-cang-ku-ji-shang-chuan-yuan-cheng-github-cang-ku/5.png" alt></p><h1 id="第五步，初始化本地仓库-就一句话"><a href="#第五步，初始化本地仓库-就一句话" class="headerlink" title="第五步，初始化本地仓库(就一句话)"></a>第五步，初始化本地仓库(就一句话)</h1><pre><code>git init </code></pre><h1 id="第六步-对文件进行操作（增，删，改）"><a href="#第六步-对文件进行操作（增，删，改）" class="headerlink" title="第六步 对文件进行操作（增，删，改）"></a>第六步 对文件进行操作（增，删，改）</h1><h2 id="增，git-add-xxx"><a href="#增，git-add-xxx" class="headerlink" title="增，git add xxx"></a>增，git add xxx</h2><p>我新建了一个test的txt文件<br><img src="/2019/08/13/git-de-ji-ben-yong-fa-chuang-jian-ben-di-cang-ku-ji-shang-chuan-yuan-cheng-github-cang-ku/6.png" alt></p><p>cd test文件夹</p><p>在 git bash中输入 git add test.txt </p><p>每一步完成后可以查看状态确认一下</p><p>git status</p><p><img src="/2019/08/13/git-de-ji-ben-yong-fa-chuang-jian-ben-di-cang-ku-ji-shang-chuan-yuan-cheng-github-cang-ku/7.png" alt></p><p>绿色的新文件</p><p>现在这个文件在缓存区，</p><p>现在提交到本地仓库</p><p>git commit -m “xxxxxx”</p><p>xxxx是提交描述</p><p>比如第一次提交</p><p>git commit -m “第一次提交”</p><p><img src="/2019/08/13/git-de-ji-ben-yong-fa-chuang-jian-ben-di-cang-ku-ji-shang-chuan-yuan-cheng-github-cang-ku/8.png" alt></p><p>看一下状态 git status</p><p>缓存区没有文件了，就是提交上去了</p><p><img src="/2019/08/13/git-de-ji-ben-yong-fa-chuang-jian-ben-di-cang-ku-ji-shang-chuan-yuan-cheng-github-cang-ku/9.png" alt></p><p>至此，增文件就完成了。</p><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><p>一样的和增，一样的语法。</p><p>我们进入test.txt加一些字，</p><p><img src="/2019/08/13/git-de-ji-ben-yong-fa-chuang-jian-ben-di-cang-ku-ji-shang-chuan-yuan-cheng-github-cang-ku/10.png" alt></p><p>然后，git add test.txt</p><p>再然后，git commit -m “第二次提交”</p><p>ok 至此，改操作就完成了</p><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><p>我们删文件，把之前的git add xxx<br>改成 git rm xxx 就行了（注意，本地必须把它删除了才可以操作，用rm -rf 命令或者直接在win窗口中用del删除）</p><p>演示一下<br><img src="/2019/08/13/git-de-ji-ben-yong-fa-chuang-jian-ben-di-cang-ku-ji-shang-chuan-yuan-cheng-github-cang-ku/11.png" alt></p><p>ok 删除操作就完成了</p><h1 id="上传到本地，"><a href="#上传到本地，" class="headerlink" title="上传到本地，"></a>上传到本地，</h1><h2 id="在github上新建一个仓库"><a href="#在github上新建一个仓库" class="headerlink" title="在github上新建一个仓库"></a>在github上新建一个仓库</h2><p><img src="/2019/08/13/git-de-ji-ben-yong-fa-chuang-jian-ben-di-cang-ku-ji-shang-chuan-yuan-cheng-github-cang-ku/12.png" alt></p><p>新建了后，在git bash 中输入<br>git remote add origin xxxxxxxxxxxx<br>git push -u origin master</p><p>xxxxxxxxx 为你的仓库网站</p><p>就算是提交上去了，，以后，进行修改操作那些操作后，，，直接git push 可直接提交，</p><p>至此教程完毕。谢谢观看。</p><p>出错的话使用git pull </p><p>你应该使用  git pull，这个命令做一个git fetch和下一个做git merge。</p><p>如果使用git push origin master –force命令，将来可能会遇到问题。</p><p>PS:可能每次需要输入密码输入这个一行代码就行了</p><pre><code>git config --global credential.helper store</code></pre><p>代理：</p><pre class=" language-bash"><code class="language-bash">在cmd中输入以下指令：<span class="token function">git</span> config --global http.proxy socks5://127.0.0.1:1080<span class="token function">git</span> config --global https.proxy socks5://127.0.0.1:1080（端口号看你自己的配置，一般都是1080）如果要取消代理修改：<span class="token function">git</span> config --global --unset http.proxy<span class="token function">git</span> config --global --unset https.proxy问题补充上述方法挂了全局代理，但是如果要克隆码云、coding等国内仓库，速度就会很慢。更好的方法是只对github进行代理，不会影响国内仓库：<span class="token function">git</span> config --global http.https://github.com.proxy socks5://127.0.0.1:1080<span class="token function">git</span> config --global https.https://github.com.proxy socks5://127.0.0.1:1080代理后git clone速度真的快了很多~我这边能到1MB/s以上使用以下命令查看是否配置好<span class="token function">git</span> config --global -e</code></pre><p>保存密码<br>git 每次push和pull都需要提交密码<br>每次从远程仓库拉代码或者向远程仓库提交代码的时候需要输入密码的解决方法<br>执行  </p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global credential.helper store</code></pre><h1 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h1><h2 id="查看当前分支"><a href="#查看当前分支" class="headerlink" title="查看当前分支"></a>查看当前分支</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch</code></pre><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p>如创建分支xx</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch xx</code></pre><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout xx</code></pre><h2 id="分支上传"><a href="#分支上传" class="headerlink" title="分支上传"></a>分支上传</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> push --set-upstream origin java</code></pre><h2 id="下载分支"><a href="#下载分支" class="headerlink" title="下载分支"></a>下载分支</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/github_id/项目名字 --branch<span class="token operator">=</span>xx</code></pre><h1 id="上传大文件"><a href="#上传大文件" class="headerlink" title="上传大文件"></a>上传大文件</h1><p>资料:<a href="https://blog.csdn.net/Tyro_java/article/details/53440666" target="_blank" rel="noopener">点击查看</a></p><p>安装 lfs</p><p>```bash<br>只需设置1次 LFS :<br>git lfs install<br>然后 跟踪一下你要push的大文件的文件或指定文件类型<br>git lfs track “*.pdf” ，<br>当然还可以直接编辑.gitattributes文件<br>以上已经设置完毕， 其余的工作就是按照正常的 add , commit , push 流程就可以了 :<br>git add yourLargeFile.pdf<br>git commit -m “Add Large file”<br>git push -u origin master</p><h1 id="修改密码github-gitee-coding密码凭证"><a href="#修改密码github-gitee-coding密码凭证" class="headerlink" title="修改密码github,gitee,coding密码凭证"></a>修改密码github,gitee,coding密码凭证</h1><p>控制面板<br><img src="/2019/08/13/git-de-ji-ben-yong-fa-chuang-jian-ben-di-cang-ku-ji-shang-chuan-yuan-cheng-github-cang-ku/14.png" alt><br><img src="/2019/08/13/git-de-ji-ben-yong-fa-chuang-jian-ben-di-cang-ku-ji-shang-chuan-yuan-cheng-github-cang-ku/15.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python的selenuim自动化框架安装(so nice)</title>
      <link href="/2019/08/12/python-de-selenium-zi-dong-hua-kuang-jia-an-zhuang/"/>
      <url>/2019/08/12/python-de-selenium-zi-dong-hua-kuang-jia-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="自动化安装selenium"><a href="#自动化安装selenium" class="headerlink" title="自动化安装selenium"></a>自动化安装selenium</h1><h2 id="第一步，下载谷歌浏览器（火狐也行）下载地址"><a href="#第一步，下载谷歌浏览器（火狐也行）下载地址" class="headerlink" title="第一步，下载谷歌浏览器（火狐也行）下载地址"></a>第一步，下载谷歌浏览器（火狐也行）<a href="https://www.google.cn/intl/zh-CN/chrome/" target="_blank" rel="noopener">下载地址</a></h2><h3 id="查看谷歌浏览器的版本号："><a href="#查看谷歌浏览器的版本号：" class="headerlink" title="查看谷歌浏览器的版本号："></a>查看谷歌浏览器的版本号：<img src="/2019/08/12/python-de-selenium-zi-dong-hua-kuang-jia-an-zhuang/1.png" alt></h3><h3 id="我这里是76-0…-的"><a href="#我这里是76-0…-的" class="headerlink" title="我这里是76.0…..的"></a>我这里是76.0…..的</h3><h2 id="第二步，下载，自动化浏览器的驱动下载地址"><a href="#第二步，下载，自动化浏览器的驱动下载地址" class="headerlink" title="第二步，下载，自动化浏览器的驱动下载地址"></a>第二步，下载，自动化浏览器的驱动<a href="http://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">下载地址</a></h2><p>如图：<img src="/2019/08/12/python-de-selenium-zi-dong-hua-kuang-jia-an-zhuang/2.png" alt></p><h3 id="之前谷歌版本号是76-的这里选择76-0-3809的，总之选择最接近的版本号"><a href="#之前谷歌版本号是76-的这里选择76-0-3809的，总之选择最接近的版本号" class="headerlink" title="之前谷歌版本号是76.的这里选择76.0.3809的，总之选择最接近的版本号"></a>之前谷歌版本号是76.的这里选择76.0.3809的，总之选择最接近的版本号<img src="/2019/08/12/python-de-selenium-zi-dong-hua-kuang-jia-an-zhuang/3.png" alt></h3><h3 id="我这里是win10的所以我下载win32的"><a href="#我这里是win10的所以我下载win32的" class="headerlink" title="我这里是win10的所以我下载win32的"></a>我这里是win10的所以我下载win32的<img src="/2019/08/12/python-de-selenium-zi-dong-hua-kuang-jia-an-zhuang/4.png" alt></h3><h3 id="下一步，把这个exe文件移动到python的安装目录下怎么找到python的安装目录"><a href="#下一步，把这个exe文件移动到python的安装目录下怎么找到python的安装目录" class="headerlink" title="下一步，把这个exe文件移动到python的安装目录下怎么找到python的安装目录"></a>下一步，把这个exe文件移动到python的安装目录下<a href="/2019/07/29/查看Python安装目录/">怎么找到python的安装目录</a></h3><p>如图：<img src="/2019/08/12/python-de-selenium-zi-dong-hua-kuang-jia-an-zhuang/5.png" alt></p><h3 id="如果需要，你也可以移动到谷歌浏览器的安装目录下"><a href="#如果需要，你也可以移动到谷歌浏览器的安装目录下" class="headerlink" title="如果需要，你也可以移动到谷歌浏览器的安装目录下"></a>如果需要，你也可以移动到谷歌浏览器的安装目录下</h3><p>如图：<img src="/2019/08/12/python-de-selenium-zi-dong-hua-kuang-jia-an-zhuang/6.png" alt></p><h2 id="第三步，安装selenium"><a href="#第三步，安装selenium" class="headerlink" title="第三步，安装selenium"></a>第三步，安装selenium</h2><h3 id="一个语句搞定"><a href="#一个语句搞定" class="headerlink" title="一个语句搞定"></a>一个语句搞定</h3><pre class=" language-c++"><code class="language-c++">pip install selenium </code></pre><h3 id="如果不行的话，请手动安装selenium包"><a href="#如果不行的话，请手动安装selenium包" class="headerlink" title="如果不行的话，请手动安装selenium包"></a>如果不行的话，请手动安装selenium包</h3><h2 id="第四步，添加浏览器和浏览器驱动进环境变量"><a href="#第四步，添加浏览器和浏览器驱动进环境变量" class="headerlink" title="第四步，添加浏览器和浏览器驱动进环境变量"></a>第四步，添加浏览器和浏览器驱动进环境变量</h2><h3 id="前面的准备工作做好了，就开始加环境变量了，把那个exe文件添加到环境变量"><a href="#前面的准备工作做好了，就开始加环境变量了，把那个exe文件添加到环境变量" class="headerlink" title="前面的准备工作做好了，就开始加环境变量了，把那个exe文件添加到环境变量"></a>前面的准备工作做好了，就开始加环境变量了，把那个exe文件添加到环境变量</h3><p><img src="/2019/08/12/python-de-selenium-zi-dong-hua-kuang-jia-an-zhuang/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt> 如何添加请查看<a href="/2019/07/28/python环境安装/">这篇文章</a></p><h2 id="让我们来用自动话工具打开百度测试一下"><a href="#让我们来用自动话工具打开百度测试一下" class="headerlink" title="让我们来用自动话工具打开百度测试一下"></a>让我们来用自动话工具打开百度测试一下</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverdriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span></code></pre><p><img src="/2019/08/12/python-de-selenium-zi-dong-hua-kuang-jia-an-zhuang/7.png" alt></p><h3 id="可以看见，打开浏览器了，没问题"><a href="#可以看见，打开浏览器了，没问题" class="headerlink" title="可以看见，打开浏览器了，没问题"></a>可以看见，打开浏览器了，没问题</h3><p>再见期待下一次相遇</p>]]></content>
      
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看Python安装目录</title>
      <link href="/2019/07/29/cha-kan-python-an-zhuang-mu-lu/"/>
      <url>/2019/07/29/cha-kan-python-an-zhuang-mu-lu/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="安装好了python后呢，点击左下角的win，如图"><a href="#安装好了python后呢，点击左下角的win，如图" class="headerlink" title="安装好了python后呢，点击左下角的win，如图"></a>安装好了python后呢，点击左下角的win，如图</h1><p><img src="/2019/07/29/cha-kan-python-an-zhuang-mu-lu/1.png" alt></p><h1 id="找到python，并且右键打开安装位置"><a href="#找到python，并且右键打开安装位置" class="headerlink" title="找到python，并且右键打开安装位置"></a>找到python，并且右键打开安装位置</h1><p><img src="/2019/07/29/cha-kan-python-an-zhuang-mu-lu/2.png" alt></p><h1 id="不对，还是没对，还是快捷方式，那我们再次右键查看安装位置"><a href="#不对，还是没对，还是快捷方式，那我们再次右键查看安装位置" class="headerlink" title="不对，还是没对，还是快捷方式，那我们再次右键查看安装位置"></a>不对，还是没对，还是快捷方式，那我们再次右键查看安装位置</h1><p><img src="/2019/07/29/cha-kan-python-an-zhuang-mu-lu/3.png" alt></p><h1 id="这次应该是正确的吧，复制地址栏"><a href="#这次应该是正确的吧，复制地址栏" class="headerlink" title="这次应该是正确的吧，复制地址栏"></a>这次应该是正确的吧，复制地址栏</h1><p><img src="/2019/07/29/cha-kan-python-an-zhuang-mu-lu/4.png" alt></p><h1 id="至此你得到了你安装python的安装目录。"><a href="#至此你得到了你安装python的安装目录。" class="headerlink" title="至此你得到了你安装python的安装目录。"></a>至此你得到了你安装python的安装目录。</h1><p>** 开始配置你的python环境吧**</p><p><a href="/2019/07/28/python环境安装/">python环境配置教程</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
