<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux命令学习</title>
      <link href="/2020/02/19/Linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/02/19/Linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="后台运行命令"><a href="#后台运行命令" class="headerlink" title="后台运行命令"></a>后台运行命令</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">nohup</span> 命令 <span class="token operator">&amp;</span>如:nohup python test.py <span class="token operator">&amp;</span>可用ps -e查看   具体看哪个运行可以这么写 <span class="token function">ps</span> -e<span class="token operator">|</span><span class="token function">grep</span> xxxx如我想看后台的python命令：<span class="token function">ps</span> -e<span class="token operator">|</span><span class="token function">grep</span> python杀死后台为<span class="token function">kill</span> + pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="定时命令"><a href="#定时命令" class="headerlink" title="定时命令"></a>定时命令</h1><p>crontab -e 就可打开</p><pre><code>*    *    *    *    *-    -    -    -    -|    |    |    |    ||    |    |    |    +----- 星期中星期几 (0 - 7) (星期天 为0)|    |    |    +---------- 月份 (1 - 12) |    |    +--------------- 一个月中的第几天 (1 - 31)|    +-------------------- 小时 (0 - 23)+------------------------- 分钟 (0 - 59)</code></pre><p>实例</p><h2 id="每月每天每小时的第-0-分钟执行一次-bin-ls"><a href="#每月每天每小时的第-0-分钟执行一次-bin-ls" class="headerlink" title="每月每天每小时的第 0 分钟执行一次 /bin/ls"></a>每月每天每小时的第 0 分钟执行一次 /bin/ls</h2><pre class="line-numbers language-bash"><code class="language-bash">0 * * * * /bin/ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="在-12-月内-每天的早上-6-点到-12-点，每隔-3-个小时-0-分钟执行一次-usr-bin-backup"><a href="#在-12-月内-每天的早上-6-点到-12-点，每隔-3-个小时-0-分钟执行一次-usr-bin-backup" class="headerlink" title="在 12 月内, 每天的早上 6 点到 12 点，每隔 3 个小时 0 分钟执行一次 /usr/bin/backup"></a>在 12 月内, 每天的早上 6 点到 12 点，每隔 3 个小时 0 分钟执行一次 /usr/bin/backup</h2><pre class="line-numbers language-bash"><code class="language-bash">0 6-12/3 * 12 * /usr/bin/backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="周一到周五每天下午-5-00-寄一封信给-alex-domain-name"><a href="#周一到周五每天下午-5-00-寄一封信给-alex-domain-name" class="headerlink" title="周一到周五每天下午 5:00 寄一封信给 alex@domain.name"></a>周一到周五每天下午 5:00 寄一封信给 <a href="mailto:alex@domain.name" target="_blank" rel="noopener">alex@domain.name</a></h2><pre class="line-numbers language-bash"><code class="language-bash">0 17 * * 1-5 mail -s <span class="token string">"hi"</span> alex@domain.name <span class="token operator">&lt;</span> /tmp/maildata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="每月每天的午夜-0-点-20-分-2-点-20-分-4-点-20-分…-执行-echo-“haha”"><a href="#每月每天的午夜-0-点-20-分-2-点-20-分-4-点-20-分…-执行-echo-“haha”" class="headerlink" title="每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分….执行 echo “haha”"></a>每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分….执行 echo “haha”</h2><pre class="line-numbers language-bash"><code class="language-bash">20 0-23/2 * * * <span class="token keyword">echo</span> <span class="token string">"haha"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="意思是每两个小时重启一次apache"><a href="#意思是每两个小时重启一次apache" class="headerlink" title="意思是每两个小时重启一次apache"></a>意思是每两个小时重启一次apache</h2><pre class="line-numbers language-bash"><code class="language-bash">0 */2 * * * /sbin/service httpd restart <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="意思是每天7：50开启ssh服务"><a href="#意思是每天7：50开启ssh服务" class="headerlink" title="意思是每天7：50开启ssh服务"></a>意思是每天7：50开启ssh服务</h2><pre class="line-numbers language-bash"><code class="language-bash">50 7 * * * /sbin/service sshd start   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="意思是每天22：50关闭ssh服务"><a href="#意思是每天22：50关闭ssh服务" class="headerlink" title="意思是每天22：50关闭ssh服务"></a>意思是每天22：50关闭ssh服务</h2><pre class="line-numbers language-bash"><code class="language-bash">50 22 * * * /sbin/service sshd stop  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="每月1号和15号检查-home-磁盘"><a href="#每月1号和15号检查-home-磁盘" class="headerlink" title="每月1号和15号检查/home 磁盘"></a>每月1号和15号检查/home 磁盘</h2><pre class="line-numbers language-bash"><code class="language-bash">0 0 1,15 * * <span class="token function">fsck</span> /home <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="每小时的第一分执行-home-bruce-backup这个文件"><a href="#每小时的第一分执行-home-bruce-backup这个文件" class="headerlink" title="每小时的第一分执行 /home/bruce/backup这个文件"></a>每小时的第一分执行 /home/bruce/backup这个文件</h2><pre class="line-numbers language-bash"><code class="language-bash">1 * * * * /home/bruce/backup  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="每周一至周五3点钟，在目录-home中，查找文件名为-xxx的文件，并删除4天前的文件。"><a href="#每周一至周五3点钟，在目录-home中，查找文件名为-xxx的文件，并删除4天前的文件。" class="headerlink" title="每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件。"></a>每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件。</h2><pre class="line-numbers language-bash"><code class="language-bash">00 03 * * 1-5 <span class="token function">find</span> /home <span class="token string">"*.xxx"</span> -mtime +4 -exec <span class="token function">rm</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="意思是每月的1、11、21、31日是的6：30执行一次ls命令"><a href="#意思是每月的1、11、21、31日是的6：30执行一次ls命令" class="headerlink" title="意思是每月的1、11、21、31日是的6：30执行一次ls命令"></a>意思是每月的1、11、21、31日是的6：30执行一次ls命令</h2><pre class="line-numbers language-bash"><code class="language-bash">30 6 */10 * * <span class="token function">ls</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="deepin开机自启"><a href="#deepin开机自启" class="headerlink" title="deepin开机自启"></a>deepin开机自启</h1><p><a href="https://jingyan.baidu.com/article/d169e1866e2b6c436711d840.html" target="_blank" rel="noopener">点击此处查看链接</a></p><p>在一处创建xx.sh命令后，里面写上命令</p><p>进入~/.config/autostart</p><p>创建一个文件叫start.desktop</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>Desktop Entry<span class="token punctuation">]</span>Type<span class="token operator">=</span>ApplicationExec<span class="token operator">=</span>/home/lhq/start.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="PS-再用sudo-chmod-x-start-desktop权限和start-sh的权限即可"><a href="#PS-再用sudo-chmod-x-start-desktop权限和start-sh的权限即可" class="headerlink" title="PS:再用sudo chmod +x start.desktop权限和start.sh的权限即可"></a>PS:再用sudo chmod +x start.desktop权限和start.sh的权限即可</h2><h1 id="deepin-linux-打开ssh服务"><a href="#deepin-linux-打开ssh服务" class="headerlink" title="deepin linux 打开ssh服务"></a>deepin linux 打开ssh服务</h1><pre><code>首先，更新一下软件源，打开&quot;终端窗口&quot;，输入&quot;sudo apt-get update&quot;--&gt;回车--&gt;&quot;输入当前登录用户的管理员密码&quot;--&gt;回车,就可以了。然后，在终端中，输入&quot;sudo apt-get install openssh-server&quot;--&gt;回车--&gt;输入&quot;y&quot;--回车--&gt;安装完成即可。安装完成，验证一下是否安装成功，执行如下命令查看一下sshd的进程　sudo ps -e |grep ssh确认说明ssh服务已经启动。也可以查看sshd服务的端口号，默认端口号为22netstat -an|head -5确认网络已经打开能访问互联网即可随后可以使用winscp远程登录</code></pre><h2 id="Screen"><a href="#Screen" class="headerlink" title="Screen"></a>Screen</h2><p>打开会话<br>安装yum insyall screen</p><p>新开一个会话</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">screen</span> -S xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看当前会话</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">screen</span> -ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入一个会话</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">screen</span> -rx xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python环境安装教程</title>
      <link href="/2020/01/21/python%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
      <url>/2020/01/21/python%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="大家好，这里是未闻丶死讯"><a href="#大家好，这里是未闻丶死讯" class="headerlink" title="大家好，这里是未闻丶死讯"></a>大家好，这里是未闻丶死讯</h2><h1 id="python安装"><a href="#python安装" class="headerlink" title="python安装"></a>python安装</h1><p> python官网：<a href="https://www.python.org/" target="_blank" rel="noopener">点击此处</a> <a href="https://pan.baidu.com/s/1S7FgxHRQCmGYVgxPHsIjlQ" target="_blank" rel="noopener">百度云</a> <strong>提取码2333</strong><br><strong>注意</strong>：安装的时候有个path环境一起安装，勾选上。<br><img src="/2020/01/21/python环境安装/6.png" alt></p><h1 id="anaconda安装"><a href="#anaconda安装" class="headerlink" title="anaconda安装"></a>anaconda安装</h1><p> anaconda包含了所有的python环境<br>下载安装即可，一直点下一步。<br> Anaconda(windows&amp;mac&amp;linux) :<a href="https://www.anaconda.com/distribution/#download-section" target="_blank" rel="noopener">点击此处下载</a> <a href="https://pan.baidu.com/s/1kG45zBigzNHmQCBIVw7DLg" target="_blank" rel="noopener">百度云</a><strong>提取码2333</strong></p><h1 id="安装pycharm"><a href="#安装pycharm" class="headerlink" title="安装pycharm"></a>安装pycharm</h1><p> pycharm:<a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">点击此处</a> <a href="https://pan.baidu.com/s/11YAcY7Xz7oe3ITw2dp1qMQ" target="_blank" rel="noopener">百度云</a> <strong>提取码2333</strong></p><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><h4 id="右击桌面上的我的电脑-点击属性"><a href="#右击桌面上的我的电脑-点击属性" class="headerlink" title="右击桌面上的我的电脑 点击属性"></a>右击桌面上的我的电脑 点击属性</h4><p><img src="/2020/01/21/python环境安装/1.png" alt></p><h4 id="点击高级设置"><a href="#点击高级设置" class="headerlink" title="点击高级设置"></a>点击高级设置</h4><p><img src="/2020/01/21/python环境安装/2.png" alt></p><h4 id="点击环境变量"><a href="#点击环境变量" class="headerlink" title="点击环境变量"></a>点击环境变量</h4><p><img src="/2020/01/21/python环境安装/3.png" alt></p><h4 id="点击下面的Path"><a href="#点击下面的Path" class="headerlink" title="点击下面的Path"></a>点击下面的Path</h4><p><img src="/2020/01/21/python环境安装/4.png" alt></p><h4 id="点击新建-把你的python目录粘贴进去-如何查看python的安装目录"><a href="#点击新建-把你的python目录粘贴进去-如何查看python的安装目录" class="headerlink" title="点击新建,把你的python目录粘贴进去 如何查看python的安装目录"></a>点击新建,把你的python目录粘贴进去 <a href="www.baidu.com">如何查看python的安装目录</a></h4><p><img src="/2020/01/21/python环境安装/5.png" alt></p><h1 id="OK了，可以重启一下电脑，然后呢，可以打开pythoncharm自由的写python代码了"><a href="#OK了，可以重启一下电脑，然后呢，可以打开pythoncharm自由的写python代码了" class="headerlink" title="OK了，可以重启一下电脑，然后呢，可以打开pythoncharm自由的写python代码了"></a>OK了，可以重启一下电脑，然后呢，可以打开pythoncharm自由的写python代码了</h1><h1 id="对了，哔哩哔哩关注一下啊，未闻丶死讯23333"><a href="#对了，哔哩哔哩关注一下啊，未闻丶死讯23333" class="headerlink" title="对了，哔哩哔哩关注一下啊，未闻丶死讯23333"></a>对了，哔哩哔哩关注一下啊，未闻丶死讯23333</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库基本操作学习记录</title>
      <link href="/2019/12/31/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/12/31/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h1><p>安装mysql很简单，这里不多赘述了，网上很多教程。<br><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">mysql下载地址</a><br><a href="https://gitee.com/anlen123/wenjian/blob/master/HeidiSQL_10.3_64_Portable.zip" target="_blank" rel="noopener">图形界面工具(gitee)</a><br><a href="https://github.com/anlen123/wenjian/blob/master/HeidiSQL_10.3_64_Portable.zip" target="_blank" rel="noopener">图形界面工具(github)</a><br><a href="https://www.bilibili.com/video/av48488984/" target="_blank" rel="noopener">视频教程</a><br><a href="https://blog.jkdev.cn/index.php/archives/176/" target="_blank" rel="noopener">文章</a></p><h1 id="开启mysql"><a href="#开启mysql" class="headerlink" title="开启mysql"></a>开启mysql</h1><p>win+R<br>开启：net start mysql<br>关闭：net stop mysql</p><h1 id="mysql一些简单操作"><a href="#mysql一些简单操作" class="headerlink" title="mysql一些简单操作"></a>mysql一些简单操作</h1><h2 id="显示当前数据库-show-databases"><a href="#显示当前数据库-show-databases" class="headerlink" title="显示当前数据库 show databases;"></a>显示当前数据库 show databases;</h2><p><img src="/2019/12/31/mysql数据库基本操作学习记录/1.jpg" alt></p><h2 id="使用一个数据库-use-test"><a href="#使用一个数据库-use-test" class="headerlink" title="使用一个数据库 use test;"></a>使用一个数据库 use test;</h2><p><img src="/2019/12/31/mysql数据库基本操作学习记录/2.jpg" alt></p><h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><p>– 修改表名<br>rename table old_table to new_table;</p><p>– 或者<br>alter table old_table rename as new_table;</p><p>– 修改列名称<br>alter table table_name<br>change column old_name new_name varchar(255);</p><p>– 修改字段类型<br>alter table table_name<br>modify column column_name varchar(255) default ‘’ COMMENT ‘注释’;</p><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p>insert into score (name,score) values(‘小明’,’80’);</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>drop table tb;<br>drop 是直接将表格删除，无法找回。例如删除 user 表：<br>drop table user;<br>truncate （table） tb;<br>truncate 是删除表中所有数据，但不能与where一起使用；<br>TRUNCATE TABLE user;<br>delete from tb (where);<br>delete 也是删除表中数据，但可以与where连用，删除特定行；<br>— 删除表中所有数据<br>delete from user;<br>— 删除指定行<br>delete from user where username =’Tom’;</p><p>delete from score where score = 80;</p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>select * from score  where name like ‘%刘%’; </p><h2 id="python-连接mysql"><a href="#python-连接mysql" class="headerlink" title="python 连接mysql"></a>python 连接mysql</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment" spellcheck="true">#创建连接</span>db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>db<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建浮标</span>cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># sql = "DELETE FROM `test`.`score` WHERE  `name`='杨川' AND `score`=100 LIMIT 1;"</span><span class="token keyword">try</span> <span class="token punctuation">:</span>    sql <span class="token operator">=</span> <span class="token string">"select * from score"</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    txt  <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> info <span class="token keyword">in</span> txt <span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"操作失败"</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PS :以后一些操作会记录。<br>23333</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vim的自我修养</title>
      <link href="/2019/10/31/vim%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/"/>
      <url>/2019/10/31/vim%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="vim是什么"><a href="#vim是什么" class="headerlink" title="vim是什么?"></a>vim是什么?</h1><h1 id="为什么用vim"><a href="#为什么用vim" class="headerlink" title="为什么用vim"></a>为什么用vim</h1><h1 id="vim一些简单操作命令"><a href="#vim一些简单操作命令" class="headerlink" title="vim一些简单操作命令"></a>vim一些简单操作命令</h1><p>:x 和:wq 是一摸一样的效果，保存并退出<br>:q 退出<br>:w 保存<br>:q! 强制保存</p><h1 id="vim配置文件"><a href="#vim配置文件" class="headerlink" title="vim配置文件"></a>vim配置文件</h1><p>一般是当前目录下的.vimrc</p><h1 id="我真的是服了"><a href="#我真的是服了" class="headerlink" title="我真的是服了"></a>我真的是服了</h1><p>2333</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何共存python2和python3</title>
      <link href="/2019/10/03/%E5%85%B1%E5%AD%98python2%E5%92%8Cpython3/"/>
      <url>/2019/10/03/%E5%85%B1%E5%AD%98python2%E5%92%8Cpython3/</url>
      
        <content type="html"><![CDATA[<p>PS：为什么做这一期博客呢？因为前些天做大数的题的时候需要用到python2我的环境是Python3所有我打算配置一个Python2的环境</p><h1 id="下载python3和python2的安装包程序"><a href="#下载python3和python2的安装包程序" class="headerlink" title="下载python3和python2的安装包程序"></a>下载python3和python2的安装包程序</h1><p>这是python官网自行下载<a href="https://www.python.org/" target="_blank" rel="noopener">点击此处</a></p><h1 id="安装python2和python3的安装程序"><a href="#安装python2和python3的安装程序" class="headerlink" title="安装python2和python3的安装程序"></a>安装python2和python3的安装程序</h1><p>python3安装可以看我之前的博客<a href="https://liuhuaqiang.top/2019/07/28/python%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/">点击跳转</a></p><p>python2安装的时候，一定一定要勾选 添加环境<br><img src="/2019/10/03/共存python2和python3/1.png" alt></p><h1 id="修改名字"><a href="#修改名字" class="headerlink" title="修改名字"></a>修改名字</h1><p>进入python3的安装目录，不知道咋看的<a href="https://liuhuaqiang.top/2019/07/29/%E6%9F%A5%E7%9C%8BPython%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95/">点击这里</a></p><p>下一步修改python.exe为python3.exe</p><p>同理，进入python的安装目录把python.exe改成python2.exe<br><img src="/2019/10/03/共存python2和python3/2.png" alt><br><img src="/2019/10/03/共存python2和python3/3.png" alt></p><p>然后win+r输入python2就会进入python2的版本<br>同理python3</p><h1 id="进入pythoncharm配置"><a href="#进入pythoncharm配置" class="headerlink" title="进入pythoncharm配置"></a>进入pythoncharm配置</h1><p><img src="/2019/10/03/共存python2和python3/4.png" alt><br>把改删的删了，添加，python2和python3的安装目录就行了<br>然后保存设置<br><img src="/2019/10/03/共存python2和python3/5.png" alt><br>随便写一个程序右键运行后，在右上角会有配置文件<br><img src="/2019/10/03/共存python2和python3/6.png" alt><br>如图这里可以选择python2还是python3<br><img src="/2019/10/03/共存python2和python3/7.png" alt><br>至此就完成了<br>PS：对了，右下角的这个是，你语法输入默认是2还是3的，python2在python3下会报错，红色的很不好看<br>PS：对了，右下角的这个是，你语法输入默认是2还是3的，python2在python3下会报错，红色的很不好看<br>PS：对了，右下角的这个是，你语法输入默认是2还是3的，python2在python3下会报错，红色的很不好看<br><img src="/2019/10/03/共存python2和python3/8.png" alt><br>走人</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IP代理池python</title>
      <link href="/2019/08/31/IP%E4%BB%A3%E7%90%86%E6%B1%A0python/"/>
      <url>/2019/08/31/IP%E4%BB%A3%E7%90%86%E6%B1%A0python/</url>
      
        <content type="html"><![CDATA[<h1 id="IP代理池"><a href="#IP代理池" class="headerlink" title="IP代理池"></a>IP代理池</h1><p>为什么要自己建一个呢，因为啊，你一个ip爬取数据的时候，太快或者多次访问会被屏蔽。所以我们就要隔一段时间换一个ip就行。</p><h1 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h1><p><a href="https://www.xicidaili.com/nn/" target="_blank" rel="noopener">https://www.xicidaili.com/nn/</a> (西刺代理)<br>优点：ip很多很多 。<br>缺点：可用的很少。</p><p><a href="http://www.gatherproxy.com/zh/proxylist/country/?c=China" target="_blank" rel="noopener">http://www.gatherproxy.com/zh/proxylist/country/?c=China</a> （国外的需要vpn）<br>优点：可用性很多。<br>缺点：需要翻墙才行哦。</p><h1 id="步骤（-以西刺代理为例子）"><a href="#步骤（-以西刺代理为例子）" class="headerlink" title="步骤（* 以西刺代理为例子）"></a>步骤（* 以西刺代理为例子）</h1><h2 id="访问以上两个网站并且把ip和端口爬取下来保存到一个列表当中"><a href="#访问以上两个网站并且把ip和端口爬取下来保存到一个列表当中" class="headerlink" title="访问以上两个网站并且把ip和端口爬取下来保存到一个列表当中"></a>访问以上两个网站并且把ip和端口爬取下来保存到一个列表当中</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_ip</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> ip    <span class="token keyword">for</span> xx <span class="token keyword">in</span> range<span class="token punctuation">(</span>z<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        url<span class="token operator">=</span> <span class="token string">'https://www.xicidaili.com/nn/%s'</span><span class="token operator">%</span>str<span class="token punctuation">(</span>xx<span class="token punctuation">)</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers <span class="token operator">=</span> dailichi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        sle <span class="token operator">=</span> parsel<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># guo = sle.xpath('//*[@id="ip_list"]').re(r'&lt;img src=".*?.png" alt="(.*?)">',re.S)</span>        jihe  <span class="token operator">=</span> sle<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="ip_list"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>re<span class="token punctuation">(</span>r<span class="token string">'&lt;td>(.*?)&lt;/td>'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>        ip <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> jihe<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            ip<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        duankou <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> jihe<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            duankou<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ip<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ip<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span>duankou<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------------------------'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里把它爬到了ip这个全局变量里面</p><h2 id="验证可用性"><a href="#验证可用性" class="headerlink" title="验证可用性"></a>验证可用性</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">yanzheng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span>  ip    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        gg<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            gg<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        ip_chi <span class="token operator">=</span> ip<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        gg<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        proxies <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token string">"http://"</span> <span class="token operator">+</span> ip_chi<span class="token punctuation">,</span>            <span class="token string">"https"</span><span class="token punctuation">:</span> <span class="token string">"http://"</span> <span class="token operator">+</span> ip_chi<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxies<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(ip_chi)</span>            file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'可用ip.txt'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>            file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>ip_chi<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>            file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print('yes')</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print('no')</span>            <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我爬取ip是单线程（别问我为什么不用多线程，容易被封）,验证的时候就不存在了，直接多线程验证，快点，然后，把可用ip保存到一个txt文档里面</p><h2 id="使用可用ip代理访问网址"><a href="#使用可用ip代理访问网址" class="headerlink" title="使用可用ip代理访问网址"></a>使用可用ip代理访问网址</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">requests_get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># url = 'https://www.doutula.com/photo/list/?page=1'</span>    <span class="token keyword">import</span> requests    file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'可用ip.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>    txt <span class="token operator">=</span> file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> ip <span class="token keyword">in</span> txt<span class="token punctuation">:</span>        proxies <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token string">"http://%s"</span><span class="token operator">%</span>str<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"https"</span><span class="token punctuation">:</span> <span class="token string">"http://%s"</span><span class="token operator">%</span>str<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>proxies<span class="token operator">=</span> proxies<span class="token punctuation">,</span>timeout <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(response.text)</span>            <span class="token keyword">return</span> response            <span class="token comment" spellcheck="true"># break</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>读取可用ip进行requests请求就完事了</p><p>完整代码</p><pre class="line-numbers language-py"><code class="language-py">import requestsimport parselimport reimport randomimport timeimport threadingimport osip=[]gg = threading.Lock()def dailichi():    daili = [        'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36',        'Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; WOW64; Trident/4.0; SLCC1)',        'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; WOW64; Trident/4.0; SLCC1)',        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1',        'Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1',        'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71',        'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)',        'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)',        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11'    ]    dai = random.choice(daili)    # print(dai)    head  ={        'User-Agent':'%s'% dai    }    return headdef get_ip(z,y):    global ip    for xx in range(z,y+1):        url= 'https://www.xicidaili.com/nn/%s'%str(xx)        response = requests.get(url,headers = dailichi())        sle = parsel.Selector(response.text)        # guo = sle.xpath('//*[@id="ip_list"]').re(r'<img src=".*?.png" alt="(.*?)">',re.S)        jihe  = sle.xpath('//*[@id="ip_list"]').re(r'<td>(.*?)</td>',re.S)        ip = []        for x in jihe[::5]:            ip.append(x)        duankou = []        for x in jihe[1::5]:            duankou.append(x)        for x in range(0, len(ip), 1):            ip.append(ip[x]+':'+duankou[x])        time.sleep(random.randint(1,4))        print('-------------------------')def yanzheng():    global  ip    while True:        gg.acquire()        if len(ip)==0:            gg.release()            break        ip_chi = ip.pop()        gg.release()        proxies = {            "http": "http://" + ip_chi,            "https": "http://" + ip_chi,        }        try:            req = requests.get('https://www.baidu.com', proxies=proxies, timeout=3)            # print(ip_chi)            file = open('可用ip.txt','a')            file.write(ip_chi+'\n')            file.close()            # print('yes')        except:            # print('no')            passdef requests_get(url):    # url = 'https://www.doutula.com/photo/list/?page=1'    import requests    file = open('可用ip.txt','r')    txt = file.read().split('\n')    file.close()    for ip in txt:        proxies = {            "http": "http://%s"%str(ip),            "https": "http://%s"%str(ip),        }        try:            response = requests.get(url,proxies= proxies,timeout = 5)            # print(response.text)            return response            # break        except:            passdef get_ipchi():    if os.path.exists('可用ip.txt'):        os.remove('可用ip.txt')    get_ip(1,1)    for x in range(20):        threading.Thread(target=yanzheng).start()    while   len(threading.enumerate())>1:        passget_ipchi()# 以上会爬取可用ip并且保存到（可用ip.txt）这个文件里这里访问百度为例子直接调用之前写的requests_url函数response = requests_url("https://www.baidu.com")print(response.text)print(response.status.code)# 是完全没问题的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>国外的ip池，代码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> parsel<span class="token keyword">import</span> re<span class="token keyword">import</span> random<span class="token keyword">import</span> time<span class="token keyword">import</span> threading<span class="token keyword">import</span> osip<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>gg <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dailichi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    daili <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36'</span><span class="token punctuation">,</span>        <span class="token string">'Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; WOW64; Trident/4.0; SLCC1)'</span><span class="token punctuation">,</span>        <span class="token string">'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; WOW64; Trident/4.0; SLCC1)'</span><span class="token punctuation">,</span>        <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1'</span><span class="token punctuation">,</span>        <span class="token string">'Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1'</span><span class="token punctuation">,</span>        <span class="token string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71'</span><span class="token punctuation">,</span>        <span class="token string">'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)'</span><span class="token punctuation">,</span>        <span class="token string">'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)'</span><span class="token punctuation">,</span>        <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11'</span>    <span class="token punctuation">]</span>    dai <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>daili<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(dai)</span>    head  <span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'%s'</span><span class="token operator">%</span> dai    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token keyword">def</span> <span class="token function">get_ip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> ip    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.gatherproxy.com/zh/proxylist/country/?c=China'</span><span class="token punctuation">,</span>headers <span class="token operator">=</span> dailichi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(response.text)</span>    sle <span class="token operator">=</span> parsel<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    ipp <span class="token operator">=</span> sle<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="tblproxy"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>re<span class="token punctuation">(</span><span class="token string">'"PROXY_IP":"(.*?)"'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(sle.xpath('//*[@id="tblproxy"]').getall())</span>    duankou_16 <span class="token operator">=</span> sle<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="tblproxy"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>re<span class="token punctuation">(</span><span class="token string">'"PROXY_PORT":"(.*?)"'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(ipp)</span>    <span class="token comment" spellcheck="true"># print(len(ipp))</span>    duankou<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> duankou_16<span class="token punctuation">:</span>        duankou<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>int<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(duankou)</span>    <span class="token comment" spellcheck="true"># print(len(duankou))</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> zip<span class="token punctuation">(</span>ipp<span class="token punctuation">,</span>duankou<span class="token punctuation">)</span><span class="token punctuation">:</span>        ip<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">yanzheng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span>  ip    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        gg<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            gg<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        ip_chi <span class="token operator">=</span> ip<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        gg<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        proxies <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token string">"http://"</span> <span class="token operator">+</span> ip_chi<span class="token punctuation">,</span>            <span class="token string">"https"</span><span class="token punctuation">:</span> <span class="token string">"http://"</span> <span class="token operator">+</span> ip_chi<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://mcheika.com/'</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxies<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(ip_chi)</span>            file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'可用ip.txt'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>            file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>ip_chi<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>            file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print('yes')</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print('no')</span>            <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">requests_get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># url = 'https://www.doutula.com/photo/list/?page=1'</span>    <span class="token keyword">import</span> requests    file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'可用ip.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>    txt <span class="token operator">=</span> file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> ip <span class="token keyword">in</span> txt<span class="token punctuation">:</span>        proxies <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token string">"http://%s"</span><span class="token operator">%</span>str<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"https"</span><span class="token punctuation">:</span> <span class="token string">"http://%s"</span><span class="token operator">%</span>str<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>proxies<span class="token operator">=</span> proxies<span class="token punctuation">,</span>timeout <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(response.text)</span>            <span class="token comment" spellcheck="true"># return response</span>            <span class="token keyword">return</span>            <span class="token comment" spellcheck="true"># pass</span>            <span class="token comment" spellcheck="true"># break</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">get_ipchi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'可用ip.txt'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'可用ip.txt'</span><span class="token punctuation">)</span>    get_ip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>yanzheng<span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span>   len<span class="token punctuation">(</span>threading<span class="token punctuation">.</span>enumerate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>get_ipchi<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="再见，爱你们。"><a href="#再见，爱你们。" class="headerlink" title="再见，爱你们。"></a>再见，爱你们。</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python简单多线程学习笔记</title>
      <link href="/2019/08/30/python%E7%AE%80%E5%8D%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/08/30/python%E7%AE%80%E5%8D%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程原理"><a href="#多线程原理" class="headerlink" title="多线程原理"></a>多线程原理</h1><p>多线程（英语：multithreading），是指从软件或者硬件上实现多个线程并发执行的技术。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多于一个线程，进而提升整体处理性能。具有这种能力的系统包括对称多处理机、多核心处理器以及芯片级多处理（Chip-level multithreading）或同时多线程（Simultaneous multithreading）处理器。[1] 在一个程序中，这些独立运行的程序片段叫作“线程”（Thread），利用它编程的概念就叫作“多线程处理（Multithreading）”。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多于一个线程（台湾译作“执行绪”），进而提升整体处理性能。</p><p>额！！！算了算了，直接讲代码吧</p><h1 id="多线程用法"><a href="#多线程用法" class="headerlink" title="多线程用法"></a>多线程用法</h1><p>首先导入threading库，这是python自带的库，不需要pip安装就可以使用的，最常用的有两个方法，</p><ul><li>第一是threading.Thread(target=你的要调用的函数(注意：函数后面不加括号),args={x1,x2})<br>target后面是你用多线程跑的函数，args后面是你的函数的参数，注意了，这个里面是元组，就算是一个元素也要加逗号，这是基础了。</li><li>第二个是threading.Lock(),这是多线程的锁，当你不加锁的时候，你两个线程，操作同一个全局变量的话，会发生，资源竞争的情况，比如说，我定义一个全局资源num=0，现在你定义一个函数是加10000的，第二个函数也是加10000，如果不加锁的情况下，他们会竞争资源，num的值会发生错误的变化，比如变成10054，然后又变成10004，还会变小，如果加锁的情况，最终的结果是20000</li></ul><h1 id="多线程的运行"><a href="#多线程的运行" class="headerlink" title="多线程的运行"></a>多线程的运行</h1><p>我在学这个的时候遇见了一个bug，就是在requests后面加了操作后，会导致最后的结果没变，也就是说，它不是从上往下依次操作的，<br><img src="/2019/08/30/python简单多线程学习笔记/1.png" alt><br>我现在加上一个requests看看哈，<br><img src="/2019/08/30/python简单多线程学习笔记/2.png" alt><br>奇怪吧，那我再加一个延时，<br><img src="/2019/08/30/python简单多线程学习笔记/3.png" alt><br>看出来什么规律没有，就是，不是从上至下，先进入了线程运行，没等它允许完，就开始进入下一个了，这就是多线程快的原因。以上，都说明了，对全局变量进行操作的时候，都是不安全的，所以要加锁，<br>我这里写了一个很简单的生产者消费者模型就是最简单的多线程运算了</p><pre><code>import threadingimport requestsimport parselimport osimport timeimport reimport randomdef dailichi():    daili = [        &#39;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36&#39;,        &#39;Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; WOW64; Trident/4.0; SLCC1)&#39;,        &#39;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; WOW64; Trident/4.0; SLCC1)&#39;,        &#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&#39;,        &#39;Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&#39;,        &#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71&#39;,        &#39;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)&#39;,        &#39;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)&#39;,        &#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&#39;    ]    dai = random.choice(daili)    # print(dai)    head  ={        &#39;User-Agent&#39;:&#39;%s&#39;% dai    }    return headname = []  #这里有三个全局变量img=[]page_url = []lock = threading.Lock()   #这个是锁if not os.path.exists(&#39;豆瓣&#39;):    os.mkdir(&#39;豆瓣&#39;)def download_img(url,name):    from  urllib.request import urlretrieve    urlretrieve(url,&#39;豆瓣&#39;+&#39;/&#39;+&#39;%s.jpg&#39;%name)def shengchanzhe():     #生产者，产出，它的下载链接，但是保存进一个列表里面，不下载    global img    global name    while True:        lock.acquire()        if len(page_url)==0:            lock.release()            break        url = page_url.pop()        lock.release()        response = requests.get(url,headers = dailichi())        sle = parsel.Selector(response.text)        name_title=(sle.xpath(&#39;//*[@id=&quot;content&quot;]/div/div[1]/ol&#39;).re(r&#39;&lt;img width=&quot;100&quot; alt=&quot;(.*?)&quot; src=&quot;.*?&quot; class=&quot;&quot;&gt;&#39;,re.S))        for x in name_title:            name.append(x)        img_url=sle.xpath(&#39;//*[@id=&quot;content&quot;]/div/div[1]/ol&#39;).re(r&#39;&lt;img width=&quot;100&quot; alt=&quot;.*?&quot; src=&quot;(.*?)&quot; class=&quot;&quot;&gt;&#39;)        for x in img_url:            img.append(x)def xiaofeizhe(): #对上面生产者保存的列表进行逐个取值，并进行下载    while True:        lock.acquire()        if len(img)==0 and len(name)==0:            lock.release()            break        url = img.pop()        title = name.pop()        lock.release()        req = requests.get(url)        with open(&#39;豆瓣&#39;+&#39;/&#39;+&#39;%s.jpg&#39;%title,&#39;wb&#39;)as f:            f.write(req.content)def page_url_get():    global page_url    for xx in range(0,246,25):        url = &#39;https://movie.douban.com/top250?start=%s&amp;filter=&#39;%str(xx)        page_url.append(url)if __name__ == &#39;__main__&#39;:    t2 = time.time()    page_url_get()    for num in range(10): #这里是10 是线程数，可以自定义设置的        t = threading.Thread(target=shengchanzhe)        t.start()    time.sleep(1)    for num in range(10):        t= threading.Thread(target=xiaofeizhe)        t.start()    time.sleep(1)    while len(threading.enumerate())&gt;1:        pass    t1 = time.time()    print(t1-t2)</code></pre><p>看了这个模型应该更好理解多线程了。<br>这里用pop就是取出一个后就进行删除，多线程，不对多个数据进行重复操作。</p><p>哎呀，总之就是这种格式</p><pre><code>定义一个锁定义全局变量定义函数：    while Trur:        上锁        if 全局变量==0:            释放锁            break        取全局变量里面的值，        释放锁        下面进行操作for x in range(n) #n是线程数    threading.Thread(函数).start</code></pre><p>再见</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>超简单的github管理(萌新的见解)</title>
      <link href="/2019/08/23/%E8%B6%85%E7%AE%80%E5%8D%95%E7%9A%84github%E7%AE%A1%E7%90%86-%E8%90%8C%E6%96%B0%E7%9A%84%E8%A7%81%E8%A7%A3/"/>
      <url>/2019/08/23/%E8%B6%85%E7%AE%80%E5%8D%95%E7%9A%84github%E7%AE%A1%E7%90%86-%E8%90%8C%E6%96%B0%E7%9A%84%E8%A7%81%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/anlen123/phtoto/blob/master/%E7%8C%AB%E7%B2%AE/(76354679)%F0%9F%A6%8A%F0%9F%90%B0%F0%9F%90%B1%E2%9D%A4.jpg" alt></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大家好，我是刚刚学git不久的萌新，以前用c++，现在在用python，就在今天，我突然发现，pycharm上面居然有git管理工具，而且我一用，卧槽，真的好用，不需要记录，你对文件进行了什么什么操作，不需要git add xxx 或者是 git rm xxx 再git commit -m “xxx”再git push这些指令了，我简直就像找到了新大陆，我就想，肯定有这种有界面的git管理工具的，我上网<br>搜了一下，果然发现了一个神器GitKraken这款工具，就具备了上面的所有功能，而且，真的，一个代码都不用写，超简单，那么现在我们就开始吧！！！</p><h1 id="git下载和github注册（准备工作）"><a href="#git下载和github注册（准备工作）" class="headerlink" title="git下载和github注册（准备工作）"></a>git下载和github注册（准备工作）</h1><p>如果前两个工作还没有做完，到<a href="https://liuhuaqiang.top/2019/08/13/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%EF%BC%88%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%8F%8A%E4%B8%8A%E4%BC%A0%E8%BF%9C%E7%A8%8BGithub%E4%BB%93%E5%BA%93%EF%BC%89/">这里</a>查看教程,还需要，把你电脑的ssh上传到github的密匙上，教程很详细了。</p><h1 id="GitKraken下载"><a href="#GitKraken下载" class="headerlink" title="GitKraken下载"></a>GitKraken下载</h1><p>GitKraken官网是<a href="https://www.gitkraken.com/" target="_blank" rel="noopener">这里</a><br>如图：<br><img src="/2019/08/23/超简单的github管理-萌新的见解/1.png" alt><br>可能有些人没有富强（vpn）的下载速度慢到令人发指，<br>有两个方案，到我的群里教你啊，哈哈哈哈！！！<br>我这里给你们准备了百度云的<a href="https://pan.baidu.com/s/1tO5Cgx_3gVer_Wu69GMgig" target="_blank" rel="noopener">链接</a>提取码:dmsr<br>安装，登陆你的github账号</p><h1 id="新建一个仓库"><a href="#新建一个仓库" class="headerlink" title="新建一个仓库"></a>新建一个仓库</h1><p>你可以在GitKraken这个软件上创建，当然，到网页上创建仓库也可以，<br>如图：<br><img src="/2019/08/23/超简单的github管理-萌新的见解/2.png" alt><br>创建好后是这样的:<br><img src="/2019/08/23/超简单的github管理-萌新的见解/3.png" alt><br>我这里创建了一个love的仓库</p><h1 id="克隆仓库到本地-创建本地仓库并连接到云端仓库"><a href="#克隆仓库到本地-创建本地仓库并连接到云端仓库" class="headerlink" title="克隆仓库到本地(创建本地仓库并连接到云端仓库)"></a>克隆仓库到本地(创建本地仓库并连接到云端仓库)</h1><p>首先，打开软件，界面是这样的：<br><img src="/2019/08/23/超简单的github管理-萌新的见解/4.png" alt><br>我们点击Clone a repo，打开后是这样的<br><img src="/2019/08/23/超简单的github管理-萌新的见解/5.png" alt><br>这里选择Clone -&gt; Github.com<br>Where to clone to 这里填你的本地仓库的地址<br>Repository to clone 这里填你要连接的仓库</p><p>如图：<br><img src="/2019/08/23/超简单的github管理-萌新的见解/6.png" alt><br>然后点击右下角的Clone the repo!</p><p><img src="/2019/08/23/超简单的github管理-萌新的见解/7.png" alt><br><img src="/2019/08/23/超简单的github管理-萌新的见解/8.png" alt><br>一路上他会问你，是否打开，选择打开，是否初始化本地仓库，是的，<br>一路点击即可<br>然后你就会看见这样的画面：</p><p><img src="/2019/08/23/超简单的github管理-萌新的见解/9.png" alt></p><h1 id="添加文件，修改文件，删除文件测试"><a href="#添加文件，修改文件，删除文件测试" class="headerlink" title="添加文件，修改文件，删除文件测试"></a>添加文件，修改文件，删除文件测试</h1><p>完成了上面的步骤，就已经完成了，让我们来测试一下，<br><img src="/2019/08/23/超简单的github管理-萌新的见解/10.png" alt><br>我这里添加了一个123.txt然后里面的内容是<a href="https://space.bilibili.com/32482364" target="_blank" rel="noopener">未闻丶死讯</a>,然后我们提交一下，点击右上角的view<br><img src="/2019/08/23/超简单的github管理-萌新的见解/11.png" alt><br>点击Status all changes 他会记录你的所有改变，然后输入你的改变的描述，<br><img src="/2019/08/23/超简单的github管理-萌新的见解/12.png" alt><br>这样就算提交成功了<br><img src="/2019/08/23/超简单的github管理-萌新的见解/13.png" alt><br>最后一步了，需要同步到远程仓库，点击上面的push即可，如图：<br><img src="/2019/08/23/超简单的github管理-萌新的见解/14.png" alt><br>第一次会问你，到哪个分支，额，你一个人用的话，基本用不着这个，直接提交就行了。<br><img src="/2019/08/23/超简单的github管理-萌新的见解/15.png" alt><br>然后，左下角，提示，成功了，ok，去仓库看看<br><img src="/2019/08/23/超简单的github管理-萌新的见解/16.png" alt></p><p>看，成功了添加了吧。<br><img src="/2019/08/23/超简单的github管理-萌新的见解/17.png" alt></p><p>下面我们来改和删试试，</p><p><img src="/2019/08/23/超简单的github管理-萌新的见解/18.png" alt></p><p>ok<br><img src="/2019/08/23/超简单的github管理-萌新的见解/19.png" alt><br>没问题，好了，谢谢大家的观看，溜了。爱你们！！！<br>PS：千万千万一次性上传100M以上的东西，千万别。<br>PS：千万千万一次性上传100M以上的东西，千万别。<br>PS：千万千万一次性上传100M以上的东西，千万别。<br>PS：千万千万一次性上传100M以上的东西，千万别。<br>PS：千万千万一次性上传100M以上的东西，千万别。<br>PS：千万千万一次性上传100M以上的东西，千万别.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python如何打包成exe文件</title>
      <link href="/2019/08/14/python%E5%A6%82%E4%BD%95%E6%89%93%E5%8C%85%E6%88%90exe%E6%96%87%E4%BB%B6/"/>
      <url>/2019/08/14/python%E5%A6%82%E4%BD%95%E6%89%93%E5%8C%85%E6%88%90exe%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="怎么打包exe呢"><a href="#怎么打包exe呢" class="headerlink" title="怎么打包exe呢"></a>怎么打包exe呢</h1><h2 id="这一期的问题是，我们写好了程序，该怎么打包成exe文件呢"><a href="#这一期的问题是，我们写好了程序，该怎么打包成exe文件呢" class="headerlink" title="这一期的问题是，我们写好了程序，该怎么打包成exe文件呢"></a>这一期的问题是，我们写好了程序，该怎么打包成exe文件呢</h2><p>当然是用pyinstaller 辣！！！！</p><h1 id="第一步，安装pyinstaller"><a href="#第一步，安装pyinstaller" class="headerlink" title="第一步，安装pyinstaller"></a>第一步，安装pyinstaller</h1><p>打开cmd </p><pre class="line-numbers language-python"><code class="language-python">pip installer pyinstaller <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>搞定了。</p><p>如果有小伙伴安装不了的，可以升级一下pip再安装，</p><pre class="line-numbers language-python"><code class="language-python">python <span class="token operator">-</span>m pip  install <span class="token operator">-</span><span class="token operator">-</span>upgrade pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一条语句<br>什么？？还安装不了。额，去官网下载pyinstaller 离线包，手动安装<br><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">下载地址</a><br>ctrl+f 搜索pyinstaller<br><img src="/2019/08/14/python如何打包成exe文件/1.png" alt></p><p>然后输入，pip installer xxxxxxx<br>xxxxx 是你刚刚下载下来的文件的路径</p><h1 id="第二步，打包"><a href="#第二步，打包" class="headerlink" title="第二步，打包"></a>第二步，打包</h1><p>输入命令</p><pre class="line-numbers language-python"><code class="language-python">pyinstaller <span class="token operator">-</span>F xxxxxx <span class="token punctuation">(</span>有界面打包<span class="token punctuation">)</span>pyinstaller <span class="token operator">-</span>F <span class="token operator">-</span>w xxxxx <span class="token punctuation">(</span>无界面打包<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>xxxx 为你要打包的py文件</p><p>欧克 完成了，在那个文件目录下面的dist 文件夹里，可以找到exe文件，告辞！！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git的基本用法（创建本地仓库及上传远程Github仓库）</title>
      <link href="/2019/08/13/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%EF%BC%88%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%8F%8A%E4%B8%8A%E4%BC%A0%E8%BF%9C%E7%A8%8BGithub%E4%BB%93%E5%BA%93%EF%BC%89/"/>
      <url>/2019/08/13/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%EF%BC%88%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%8F%8A%E4%B8%8A%E4%BC%A0%E8%BF%9C%E7%A8%8BGithub%E4%BB%93%E5%BA%93%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="大家好，我又来分享学习git的心得了，才学会，大佬勿喷"><a href="#大家好，我又来分享学习git的心得了，才学会，大佬勿喷" class="headerlink" title="大家好，我又来分享学习git的心得了，才学会，大佬勿喷"></a>大家好，我又来分享学习git的心得了，才学会，大佬勿喷</h1><h3 id="为什么要学习git-–简单来说就是，一个团队很多人一起完成某项目，一起管理，方便，而且，换了电脑，可以直接对项目接着进行操作。"><a href="#为什么要学习git-–简单来说就是，一个团队很多人一起完成某项目，一起管理，方便，而且，换了电脑，可以直接对项目接着进行操作。" class="headerlink" title="为什么要学习git –简单来说就是，一个团队很多人一起完成某项目，一起管理，方便，而且，换了电脑，可以直接对项目接着进行操作。"></a>为什么要学习git –简单来说就是，一个团队很多人一起完成某项目，一起管理，方便，而且，换了电脑，可以直接对项目接着进行操作。</h3><p>废话不多说，开始吧。</p><h1 id="注册一个github账号点击"><a href="#注册一个github账号点击" class="headerlink" title="注册一个github账号点击"></a>注册一个github账号<a href="https://github.com/" target="_blank" rel="noopener">点击</a></h1><h3 id="太简单了，不用我说了。"><a href="#太简单了，不用我说了。" class="headerlink" title="太简单了，不用我说了。"></a>太简单了，不用我说了。</h3><h1 id="第二步，下载git这个软件（系统）下载地址"><a href="#第二步，下载git这个软件（系统）下载地址" class="headerlink" title="第二步，下载git这个软件（系统）下载地址"></a>第二步，下载git这个软件（系统）<a href="https://git-scm.com/" target="_blank" rel="noopener">下载地址</a></h1><h3 id="安装就行，很简单。"><a href="#安装就行，很简单。" class="headerlink" title="安装就行，很简单。"></a>安装就行，很简单。</h3><h1 id="第三步，电脑连接你的ssh密匙"><a href="#第三步，电脑连接你的ssh密匙" class="headerlink" title="第三步，电脑连接你的ssh密匙"></a>第三步，电脑连接你的ssh密匙</h1><h3 id="打开-git-bash-输入"><a href="#打开-git-bash-输入" class="headerlink" title="打开 git bash 输入"></a>打开 git bash 输入</h3><p>生成秘钥：ssh-keygen -t rsa -C “<a href="mailto:xxxxxxx@qq.com" target="_blank" rel="noopener">xxxxxxx@qq.com</a>“ ，直接Enter就行，然后会提示输入密码(可输可不输)<br>说明：命令中的email，就是gitlab中的账号，需要保持一致</p><p>会出现这样就说明产生成功了<br><img src="/2019/08/13/git的基本用法（创建本地仓库及上传远程Github仓库）/1.png" alt></p><p>然后，去你的电脑用户下，找到.shh 文件夹，里面有id_ras(私钥)和id_ras.pub(公钥)</p><p>用记事本打开id_ras.pub,复制所有，(或者输入</p><pre><code>cat ~/.ssh/id_rsa.pub</code></pre><p>)<br><img src="/2019/08/13/git的基本用法（创建本地仓库及上传远程Github仓库）/4.png" alt></p><p>打开网站github你的设置你如图</p><p><img src="/2019/08/13/git的基本用法（创建本地仓库及上传远程Github仓库）/2.png" alt></p><p>添加进去</p><p>🆗，这一步完成了</p><h1 id="第四步，创建本地仓库"><a href="#第四步，创建本地仓库" class="headerlink" title="第四步，创建本地仓库"></a>第四步，创建本地仓库</h1><h2 id="新建一个文件夹，在此文件夹下，右键，有个-git-bash"><a href="#新建一个文件夹，在此文件夹下，右键，有个-git-bash" class="headerlink" title="新建一个文件夹，在此文件夹下，右键，有个 git bash"></a>新建一个文件夹，在此文件夹下，右键，有个 git bash</h2><p>如图<br><img src="/2019/08/13/git的基本用法（创建本地仓库及上传远程Github仓库）/3.png" alt></p><h2 id="首先要配置个人信息，之后再初始化"><a href="#首先要配置个人信息，之后再初始化" class="headerlink" title="首先要配置个人信息，之后再初始化"></a>首先要配置个人信息，之后再初始化</h2><h3 id="直接输入"><a href="#直接输入" class="headerlink" title="直接输入"></a>直接输入</h3><pre><code>git config --global users.name &quot;xxxxx&quot;git config --global users.email &quot;xxxxx&quot;</code></pre><h3 id="用-git-config-–list-可以查看你的配置"><a href="#用-git-config-–list-可以查看你的配置" class="headerlink" title="用 git config –list 可以查看你的配置"></a>用 git config –list 可以查看你的配置</h3><p><img src="/2019/08/13/git的基本用法（创建本地仓库及上传远程Github仓库）/5.png" alt></p><h1 id="第五步，初始化本地仓库-就一句话"><a href="#第五步，初始化本地仓库-就一句话" class="headerlink" title="第五步，初始化本地仓库(就一句话)"></a>第五步，初始化本地仓库(就一句话)</h1><pre><code>git init </code></pre><h1 id="第六步-对文件进行操作（增，删，改）"><a href="#第六步-对文件进行操作（增，删，改）" class="headerlink" title="第六步 对文件进行操作（增，删，改）"></a>第六步 对文件进行操作（增，删，改）</h1><h2 id="增，git-add-xxx"><a href="#增，git-add-xxx" class="headerlink" title="增，git add xxx"></a>增，git add xxx</h2><p>我新建了一个test的txt文件<br><img src="/2019/08/13/git的基本用法（创建本地仓库及上传远程Github仓库）/6.png" alt></p><p>cd test文件夹</p><p>在 git bash中输入 git add test.txt </p><p>每一步完成后可以查看状态确认一下</p><p>git status</p><p><img src="/2019/08/13/git的基本用法（创建本地仓库及上传远程Github仓库）/7.png" alt></p><p>绿色的新文件</p><p>现在这个文件在缓存区，</p><p>现在提交到本地仓库</p><p>git commit -m “xxxxxx”</p><p>xxxx是提交描述</p><p>比如第一次提交</p><p>git commit -m “第一次提交”</p><p><img src="/2019/08/13/git的基本用法（创建本地仓库及上传远程Github仓库）/8.png" alt></p><p>看一下状态 git status</p><p>缓存区没有文件了，就是提交上去了</p><p><img src="/2019/08/13/git的基本用法（创建本地仓库及上传远程Github仓库）/9.png" alt></p><p>至此，增文件就完成了。</p><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><p>一样的和增，一样的语法。</p><p>我们进入test.txt加一些字，</p><p><img src="/2019/08/13/git的基本用法（创建本地仓库及上传远程Github仓库）/10.png" alt></p><p>然后，git add test.txt</p><p>再然后，git commit -m “第二次提交”</p><p>ok 至此，改操作就完成了</p><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><p>我们删文件，把之前的git add xxx<br>改成 git rm xxx 就行了（注意，本地必须把它删除了才可以操作，用rm -rf 命令或者直接在win窗口中用del删除）</p><p>演示一下<br><img src="/2019/08/13/git的基本用法（创建本地仓库及上传远程Github仓库）/11.png" alt></p><p>ok 删除操作就完成了</p><h1 id="上传到本地，"><a href="#上传到本地，" class="headerlink" title="上传到本地，"></a>上传到本地，</h1><h2 id="在github上新建一个仓库"><a href="#在github上新建一个仓库" class="headerlink" title="在github上新建一个仓库"></a>在github上新建一个仓库</h2><p><img src="/2019/08/13/git的基本用法（创建本地仓库及上传远程Github仓库）/12.png" alt></p><p>新建了后，在git bash 中输入<br>git remote add origin xxxxxxxxxxxx<br>git push -u origin master</p><p>xxxxxxxxx 为你的仓库网站</p><p>就算是提交上去了，，以后，进行修改操作那些操作后，，，直接git push 可直接提交，</p><p>至此教程完毕。谢谢观看。</p><p>出错的话使用git pull </p><p>你应该使用  git pull，这个命令做一个git fetch和下一个做git merge。</p><p>如果使用git push origin master –force命令，将来可能会遇到问题。</p><p>PS:可能每次需要输入密码输入这个一行代码就行了</p><pre><code>git config --global credential.helper store</code></pre><p>代理：</p><pre class="line-numbers language-bash"><code class="language-bash">在cmd中输入以下指令：<span class="token function">git</span> config --global http.proxy socks5://127.0.0.1:1080<span class="token function">git</span> config --global https.proxy socks5://127.0.0.1:1080（端口号看你自己的配置，一般都是1080）如果要取消代理修改：<span class="token function">git</span> config --global --unset http.proxy<span class="token function">git</span> config --global --unset https.proxy问题补充上述方法挂了全局代理，但是如果要克隆码云、coding等国内仓库，速度就会很慢。更好的方法是只对github进行代理，不会影响国内仓库：<span class="token function">git</span> config --global http.https://github.com.proxy socks5://127.0.0.1:1080<span class="token function">git</span> config --global https.https://github.com.proxy socks5://127.0.0.1:1080代理后git clone速度真的快了很多~我这边能到1MB/s以上使用以下命令查看是否配置好<span class="token function">git</span> config --global -e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存密码<br>git 每次push和pull都需要提交密码<br>每次从远程仓库拉代码或者向远程仓库提交代码的时候需要输入密码的解决方法<br>执行  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global credential.helper store<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h1><h2 id="查看当前分支"><a href="#查看当前分支" class="headerlink" title="查看当前分支"></a>查看当前分支</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p>如创建分支xx</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> branch xx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> checkout xx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="分支上传"><a href="#分支上传" class="headerlink" title="分支上传"></a>分支上传</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push --set-upstream origin java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="下载分支"><a href="#下载分支" class="headerlink" title="下载分支"></a>下载分支</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/github_id/项目名字 --branch<span class="token operator">=</span>xx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="上传大文件"><a href="#上传大文件" class="headerlink" title="上传大文件"></a>上传大文件</h1><p>资料:<a href="https://blog.csdn.net/Tyro_java/article/details/53440666" target="_blank" rel="noopener">点击查看</a></p><p>安装 lfs</p><p>```bash<br>只需设置1次 LFS :<br>git lfs install<br>然后 跟踪一下你要push的大文件的文件或指定文件类型<br>git lfs track “*.pdf” ，<br>当然还可以直接编辑.gitattributes文件<br>以上已经设置完毕， 其余的工作就是按照正常的 add , commit , push 流程就可以了 :<br>git add yourLargeFile.pdf<br>git commit -m “Add Large file”<br>git push -u origin master</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python的selenuim自动化框架安装(so nice)</title>
      <link href="/2019/08/12/python%E7%9A%84selenium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%A1%86%E6%9E%B6%E5%AE%89%E8%A3%85/"/>
      <url>/2019/08/12/python%E7%9A%84selenium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%A1%86%E6%9E%B6%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="自动化安装selenium"><a href="#自动化安装selenium" class="headerlink" title="自动化安装selenium"></a>自动化安装selenium</h1><h2 id="第一步，下载谷歌浏览器（火狐也行）下载地址"><a href="#第一步，下载谷歌浏览器（火狐也行）下载地址" class="headerlink" title="第一步，下载谷歌浏览器（火狐也行）下载地址"></a>第一步，下载谷歌浏览器（火狐也行）<a href="https://www.google.cn/intl/zh-CN/chrome/" target="_blank" rel="noopener">下载地址</a></h2><h3 id="查看谷歌浏览器的版本号："><a href="#查看谷歌浏览器的版本号：" class="headerlink" title="查看谷歌浏览器的版本号："></a>查看谷歌浏览器的版本号：<img src="/2019/08/12/python的selenium自动化框架安装/1.png" alt></h3><h3 id="我这里是76-0…-的"><a href="#我这里是76-0…-的" class="headerlink" title="我这里是76.0…..的"></a>我这里是76.0…..的</h3><h2 id="第二步，下载，自动化浏览器的驱动下载地址"><a href="#第二步，下载，自动化浏览器的驱动下载地址" class="headerlink" title="第二步，下载，自动化浏览器的驱动下载地址"></a>第二步，下载，自动化浏览器的驱动<a href="http://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">下载地址</a></h2><p>如图：<img src="/2019/08/12/python的selenium自动化框架安装/2.png" alt></p><h3 id="之前谷歌版本号是76-的这里选择76-0-3809的，总之选择最接近的版本号"><a href="#之前谷歌版本号是76-的这里选择76-0-3809的，总之选择最接近的版本号" class="headerlink" title="之前谷歌版本号是76.的这里选择76.0.3809的，总之选择最接近的版本号"></a>之前谷歌版本号是76.的这里选择76.0.3809的，总之选择最接近的版本号<img src="/2019/08/12/python的selenium自动化框架安装/3.png" alt></h3><h3 id="我这里是win10的所以我下载win32的"><a href="#我这里是win10的所以我下载win32的" class="headerlink" title="我这里是win10的所以我下载win32的"></a>我这里是win10的所以我下载win32的<img src="/2019/08/12/python的selenium自动化框架安装/4.png" alt></h3><h3 id="下一步，把这个exe文件移动到python的安装目录下怎么找到python的安装目录"><a href="#下一步，把这个exe文件移动到python的安装目录下怎么找到python的安装目录" class="headerlink" title="下一步，把这个exe文件移动到python的安装目录下怎么找到python的安装目录"></a>下一步，把这个exe文件移动到python的安装目录下<a href="/2019/07/29/查看Python安装目录/">怎么找到python的安装目录</a></h3><p>如图：<img src="/2019/08/12/python的selenium自动化框架安装/5.png" alt></p><h3 id="如果需要，你也可以移动到谷歌浏览器的安装目录下"><a href="#如果需要，你也可以移动到谷歌浏览器的安装目录下" class="headerlink" title="如果需要，你也可以移动到谷歌浏览器的安装目录下"></a>如果需要，你也可以移动到谷歌浏览器的安装目录下</h3><p>如图：<img src="/2019/08/12/python的selenium自动化框架安装/6.png" alt></p><h2 id="第三步，安装selenium"><a href="#第三步，安装selenium" class="headerlink" title="第三步，安装selenium"></a>第三步，安装selenium</h2><h3 id="一个语句搞定"><a href="#一个语句搞定" class="headerlink" title="一个语句搞定"></a>一个语句搞定</h3><pre class="line-numbers language-c++"><code class="language-c++">pip install selenium <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="如果不行的话，请手动安装selenium包"><a href="#如果不行的话，请手动安装selenium包" class="headerlink" title="如果不行的话，请手动安装selenium包"></a>如果不行的话，请手动安装selenium包</h3><h2 id="第四步，添加浏览器和浏览器驱动进环境变量"><a href="#第四步，添加浏览器和浏览器驱动进环境变量" class="headerlink" title="第四步，添加浏览器和浏览器驱动进环境变量"></a>第四步，添加浏览器和浏览器驱动进环境变量</h2><h3 id="前面的准备工作做好了，就开始加环境变量了，把那个exe文件添加到环境变量"><a href="#前面的准备工作做好了，就开始加环境变量了，把那个exe文件添加到环境变量" class="headerlink" title="前面的准备工作做好了，就开始加环境变量了，把那个exe文件添加到环境变量"></a>前面的准备工作做好了，就开始加环境变量了，把那个exe文件添加到环境变量</h3><p><img src="/2019/08/12/python的selenium自动化框架安装/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt> 如何添加请查看<a href="/2019/07/28/python环境安装/">这篇文章</a></p><h2 id="让我们来用自动话工具打开百度测试一下"><a href="#让我们来用自动话工具打开百度测试一下" class="headerlink" title="让我们来用自动话工具打开百度测试一下"></a>让我们来用自动话工具打开百度测试一下</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverdriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2019/08/12/python的selenium自动化框架安装/7.png" alt></p><h3 id="可以看见，打开浏览器了，没问题"><a href="#可以看见，打开浏览器了，没问题" class="headerlink" title="可以看见，打开浏览器了，没问题"></a>可以看见，打开浏览器了，没问题</h3><p>再见期待下一次相遇</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>查看Python安装目录</title>
      <link href="/2019/07/29/%E6%9F%A5%E7%9C%8BPython%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95/"/>
      <url>/2019/07/29/%E6%9F%A5%E7%9C%8BPython%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="安装好了python后呢，点击左下角的win，如图"><a href="#安装好了python后呢，点击左下角的win，如图" class="headerlink" title="安装好了python后呢，点击左下角的win，如图"></a>安装好了python后呢，点击左下角的win，如图</h1><p><img src="/2019/07/29/查看Python安装目录/1.png" alt></p><h1 id="找到python，并且右键打开安装位置"><a href="#找到python，并且右键打开安装位置" class="headerlink" title="找到python，并且右键打开安装位置"></a>找到python，并且右键打开安装位置</h1><p><img src="/2019/07/29/查看Python安装目录/2.png" alt></p><h1 id="不对，还是没对，还是快捷方式，那我们再次右键查看安装位置"><a href="#不对，还是没对，还是快捷方式，那我们再次右键查看安装位置" class="headerlink" title="不对，还是没对，还是快捷方式，那我们再次右键查看安装位置"></a>不对，还是没对，还是快捷方式，那我们再次右键查看安装位置</h1><p><img src="/2019/07/29/查看Python安装目录/3.png" alt></p><h1 id="这次应该是正确的吧，复制地址栏"><a href="#这次应该是正确的吧，复制地址栏" class="headerlink" title="这次应该是正确的吧，复制地址栏"></a>这次应该是正确的吧，复制地址栏</h1><p><img src="/2019/07/29/查看Python安装目录/4.png" alt></p><h1 id="至此你得到了你安装python的安装目录。"><a href="#至此你得到了你安装python的安装目录。" class="headerlink" title="至此你得到了你安装python的安装目录。"></a>至此你得到了你安装python的安装目录。</h1><p>** 开始配置你的python环境吧**</p><p><a href="/2019/07/28/python环境安装/">python环境配置教程</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
